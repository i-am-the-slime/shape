// Generated by purs bundle 0.14.2
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  }; 
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyFn = new Apply(function () {
      return Data_Functor.functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["applyFn"] = applyFn;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  }; 
  var applicativeFn = new Applicative(function () {
      return Control_Apply.applyFn;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["applicativeFn"] = applicativeFn;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];          
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["bindArray"] = bindArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.ST.Global"] = $PS["Control.Monad.ST.Global"] || {};
  var exports = $PS["Control.Monad.ST.Global"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var toEffect = Unsafe_Coerce.unsafeCoerce;
  exports["toEffect"] = toEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.ST.Class"] = $PS["Control.Monad.ST.Class"] || {};
  var exports = $PS["Control.Monad.ST.Class"];
  var Control_Monad_ST_Global = $PS["Control.Monad.ST.Global"];                
  var MonadST = function (liftST) {
      this.liftST = liftST;
  };                                                                                  
  var monadSTEffect = new MonadST(Control_Monad_ST_Global.toEffect);
  var liftST = function (dict) {
      return dict.liftST;
  };
  exports["liftST"] = liftST;
  exports["monadSTEffect"] = monadSTEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports["for"] = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["bindST"] = bindST;
  exports["for"] = $foreign["for"];
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };   

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };                                                                               
  var run = function (st) {
      return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(st)($foreign.unsafeFreeze)();
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["run"] = run;
  exports["withArray"] = withArray;
  exports["push"] = push;
  exports["new"] = $foreign["new"];
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var SemigroupRecord = function (appendRecord) {
      this.appendRecord = appendRecord;
  };
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupRecordNil = new SemigroupRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return new SemigroupRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);                                   
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var intersperse = function (a) {
      return function (arr) {
          var v = $foreign.length(arr);
          if (v < 2) {
              return arr;
          };
          if (Data_Boolean.otherwise) {
              return Data_Array_ST.run((function () {
                  var unsafeGetElem = function (idx) {
                      return unsafeIndex()(arr)(idx);
                  };
                  return function __do() {
                      var out = Data_Array_ST["new"]();
                      Data_Array_ST.push(unsafeGetElem(0))(out)();
                      Control_Monad_ST_Internal["for"](1)(v)(function (idx) {
                          return function __do() {
                              Data_Array_ST.push(a)(out)();
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(unsafeGetElem(idx))(out))();
                          };
                      })();
                      return out;
                  };
              })());
          };
          throw new Error("Failed pattern match at Data.Array (line 613, column 21 - line 622, column 19): " + [ v.constructor.name ]);
      };
  };                                                                                     
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 340, column 1 - line 340, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $109 = Data_Maybe.maybe([  ])(singleton);
          return function ($110) {
              return $109(f($110));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["head"] = head;
  exports["last"] = last;
  exports["init"] = init;
  exports["intersperse"] = intersperse;
  exports["catMaybes"] = catMaybes;
  exports["zip"] = zip;
  exports["length"] = $foreign.length;
})(PS);
(function(exports) {
  "use strict";

  exports.foldr1Impl = function (f) {
    return function (xs) {
      var acc = xs[xs.length - 1];
      for (var i = xs.length - 2; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }
      return acc;
    };
  };

  exports.foldl1Impl = function (f) {
    return function (xs) {
      var acc = xs[0];
      var len = xs.length;
      for (var i = 1; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };
})(PS["Data.Array.NonEmpty.Internal"] = PS["Data.Array.NonEmpty.Internal"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var MonoidRecord = function (SemigroupRecord0, memptyRecord) {
      this.SemigroupRecord0 = SemigroupRecord0;
      this.memptyRecord = memptyRecord;
  };
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidRecordNil = new MonoidRecord(function () {
      return Data_Semigroup.semigroupRecordNil;
  }, function (v) {
      return {};
  });      
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function (dictRowToList) {
      return function (dictMonoidRecord) {
          return new Monoid(function () {
              return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
          }, memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function (dictCons) {
              return function (dictMonoidRecord) {
                  return new MonoidRecord(function () {
                      return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                  }, function (v) {
                      var tail = memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      return insert(mempty(dictMonoid))(tail);
                  });
              };
          };
      };
  };
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Semigroup.Foldable"] = $PS["Data.Semigroup.Foldable"] || {};
  var exports = $PS["Data.Semigroup.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var JoinWith = function (x) {
      return x;
  };
  var Foldable1 = function (Foldable0, foldMap1, foldl1, foldr1) {
      this.Foldable0 = Foldable0;
      this.foldMap1 = foldMap1;
      this.foldl1 = foldl1;
      this.foldr1 = foldr1;
  };
  var semigroupJoinWith = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return JoinWith(function (j) {
                  return Data_Semigroup.append(dictSemigroup)(v(j))(Data_Semigroup.append(dictSemigroup)(j)(v1(j)));
              });
          };
      });
  };                                                           
  var joinee = function (v) {
      return v;
  };
  var foldl1 = function (dict) {
      return dict.foldl1;
  };
  var foldMap1DefaultL = function (dictFoldable1) {
      return function (dictFunctor) {
          return function (dictSemigroup) {
              return function (f) {
                  var $115 = foldl1(dictFoldable1)(Data_Semigroup.append(dictSemigroup));
                  var $116 = Data_Functor.map(dictFunctor)(f);
                  return function ($117) {
                      return $115($116($117));
                  };
              };
          };
      };
  };
  var foldMap1 = function (dict) {
      return dict.foldMap1;
  };
  var intercalateMap = function (dictFoldable1) {
      return function (dictSemigroup) {
          return function (j) {
              return function (f) {
                  return function (foldable) {
                      return joinee(foldMap1(dictFoldable1)(semigroupJoinWith(dictSemigroup))(function ($124) {
                          return JoinWith(Data_Function["const"](f($124)));
                      })(foldable))(j);
                  };
              };
          };
      };
  };
  exports["Foldable1"] = Foldable1;
  exports["foldMap1DefaultL"] = foldMap1DefaultL;
  exports["intercalateMap"] = intercalateMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var $foreign = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];  
  var NonEmptyArray = function (x) {
      return x;
  };                                                                              
  var functorNonEmptyArray = Data_Functor.functorArray;                              
  var foldableNonEmptyArray = Data_Foldable.foldableArray;
  var foldable1NonEmptyArray = new Data_Semigroup_Foldable.Foldable1(function () {
      return foldableNonEmptyArray;
  }, function (dictSemigroup) {
      return Data_Semigroup_Foldable.foldMap1DefaultL(foldable1NonEmptyArray)(functorNonEmptyArray)(dictSemigroup);
  }, $foreign.foldl1Impl, $foreign.foldr1Impl);
  exports["NonEmptyArray"] = NonEmptyArray;
  exports["foldableNonEmptyArray"] = foldableNonEmptyArray;
  exports["foldable1NonEmptyArray"] = foldable1NonEmptyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];               
  var unsafeFromArray = Data_Array_NonEmpty_Internal.NonEmptyArray;
  var toArray = function (v) {
      return v;
  };
  var singleton = function ($60) {
      return unsafeFromArray(Data_Array.singleton($60));
  };
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 159, column 1 - line 159, column 58): " + [ xs.constructor.name ]);
  };
  var cons$prime = function (x) {
      return function (xs) {
          return unsafeFromArray(Data_Array.cons(x)(xs));
      };
  };
  var adaptMaybe = function (f) {
      var $75 = Data_Maybe.fromJust();
      return function ($76) {
          return $75(f(toArray($76)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  var init = adaptMaybe(Data_Array.init);
  var last = adaptMaybe(Data_Array.last);    
  var adaptAny = function (f) {
      return function ($78) {
          return f(toArray($78));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  var unsafeAdapt = function (f) {
      var $79 = adaptAny(f);
      return function ($80) {
          return unsafeFromArray($79($80));
      };
  };
  var cons = function (x) {
      return unsafeAdapt(Data_Array.cons(x));
  };
  var intersperse = function (x) {
      return unsafeAdapt(Data_Array.intersperse(x));
  };
  exports["fromArray"] = fromArray;
  exports["toArray"] = toArray;
  exports["singleton"] = singleton;
  exports["cons'"] = cons$prime;
  exports["head"] = head;
  exports["last"] = last;
  exports["init"] = init;
  exports["intersperse"] = intersperse;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  }; 
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $51 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($51) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                              
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.mkFn3 = function (fn) {
    /* jshint maxparams: 3 */
    return function (a, b, c) {
      return fn(a)(b)(c);
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["mkFn3"] = $foreign.mkFn3;
})(PS);
(function(exports) {
  "use strict";

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  exports["fromString"] = fromString;
  exports["hexadecimal"] = hexadecimal;
  exports["fromStringAs"] = fromStringAs;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();                                                                
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $205 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($206) {
                  return $205(f($206));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done1 = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $207 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($208) {
              return $207(rev($208));
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["foldableList"] = foldableList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                    
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["member"] = member;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  exports["unwrap"] = unwrap;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;

  exports.fromStringImpl = function(str, isFinite, just, nothing) {
    var num = parseFloat(str);
    if (isFinite(num)) {
      return just(num);
    } else {
      return nothing;
    }
  };
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var fromString = function (str) {
      return $foreign.fromStringImpl(str, $foreign["isFinite"], Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["fromString"] = fromString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  }; 
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["member"] = member;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOfStartingAt = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];                                                          
  var indexOf$prime = $foreign["_indexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var dropRight = function (i) {
      return function (s) {
          return $foreign.take($foreign.length(s) - i | 0)(s);
      };
  };
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["charAt"] = charAt;
  exports["indexOf'"] = indexOf$prime;
  exports["dropRight"] = dropRight;
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["length"] = length;
  exports["take"] = take;
})(PS);
(function(exports) {
  "use strict";

  exports.replaceAll = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
      };
    };
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["replaceAll"] = $foreign.replaceAll;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                                                          
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.dotAll) {
              return "s";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })()))));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["match"] = match;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var unicode = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: true
  });
  exports["unicode"] = unicode;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.Regex.Unsafe"] = $PS["Data.String.Regex.Unsafe"] || {};
  var exports = $PS["Data.String.Regex.Unsafe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var unsafeRegex = function (s) {
      return function (f) {
          return Data_Either.either(Partial_Unsafe.unsafeCrashWith)(Control_Category.identity(Control_Category.categoryFn))(Data_String_Regex.regex(s)(f));
      };
  };
  exports["unsafeRegex"] = unsafeRegex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Void"] = $PS["Data.Void"] || {};
  var exports = $PS["Data.Void"];
  var absurd = function (a) {
      var spin = function ($copy_v) {
          var $tco_result;
          function $tco_loop(v) {
              $copy_v = v;
              return;
          };
          while (!false) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return spin(a);
  };
  exports["absurd"] = absurd;
})(PS);
(function(exports) {
  "use strict";

  exports.mkEffectFn3 = function mkEffectFn3(fn) {
    return function(a, b, c) {
      return fn(a)(b)(c)();
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["mkEffectFn3"] = $foreign.mkEffectFn3;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["PureScript.CST.Types"] = $PS["PureScript.CST.Types"] || {};
  var exports = $PS["PureScript.CST.Types"];     
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var Unicode = (function () {
      function Unicode() {

      };
      Unicode.value = new Unicode();
      return Unicode;
  })();
  var Nominal = (function () {
      function Nominal() {

      };
      Nominal.value = new Nominal();
      return Nominal;
  })();
  var Representational = (function () {
      function Representational() {

      };
      Representational.value = new Representational();
      return Representational;
  })();
  var Phantom = (function () {
      function Phantom() {

      };
      Phantom.value = new Phantom();
      return Phantom;
  })();
  var ModuleName = function (x) {
      return x;
  };
  var TokLeftParen = (function () {
      function TokLeftParen() {

      };
      TokLeftParen.value = new TokLeftParen();
      return TokLeftParen;
  })();
  var TokRightParen = (function () {
      function TokRightParen() {

      };
      TokRightParen.value = new TokRightParen();
      return TokRightParen;
  })();
  var TokLeftBrace = (function () {
      function TokLeftBrace() {

      };
      TokLeftBrace.value = new TokLeftBrace();
      return TokLeftBrace;
  })();
  var TokRightBrace = (function () {
      function TokRightBrace() {

      };
      TokRightBrace.value = new TokRightBrace();
      return TokRightBrace;
  })();
  var TokLeftSquare = (function () {
      function TokLeftSquare() {

      };
      TokLeftSquare.value = new TokLeftSquare();
      return TokLeftSquare;
  })();
  var TokRightSquare = (function () {
      function TokRightSquare() {

      };
      TokRightSquare.value = new TokRightSquare();
      return TokRightSquare;
  })();
  var TokLeftArrow = (function () {
      function TokLeftArrow(value0) {
          this.value0 = value0;
      };
      TokLeftArrow.create = function (value0) {
          return new TokLeftArrow(value0);
      };
      return TokLeftArrow;
  })();
  var TokRightArrow = (function () {
      function TokRightArrow(value0) {
          this.value0 = value0;
      };
      TokRightArrow.create = function (value0) {
          return new TokRightArrow(value0);
      };
      return TokRightArrow;
  })();
  var TokRightFatArrow = (function () {
      function TokRightFatArrow(value0) {
          this.value0 = value0;
      };
      TokRightFatArrow.create = function (value0) {
          return new TokRightFatArrow(value0);
      };
      return TokRightFatArrow;
  })();
  var TokDoubleColon = (function () {
      function TokDoubleColon(value0) {
          this.value0 = value0;
      };
      TokDoubleColon.create = function (value0) {
          return new TokDoubleColon(value0);
      };
      return TokDoubleColon;
  })();
  var TokForall = (function () {
      function TokForall(value0) {
          this.value0 = value0;
      };
      TokForall.create = function (value0) {
          return new TokForall(value0);
      };
      return TokForall;
  })();
  var TokEquals = (function () {
      function TokEquals() {

      };
      TokEquals.value = new TokEquals();
      return TokEquals;
  })();
  var TokPipe = (function () {
      function TokPipe() {

      };
      TokPipe.value = new TokPipe();
      return TokPipe;
  })();
  var TokTick = (function () {
      function TokTick() {

      };
      TokTick.value = new TokTick();
      return TokTick;
  })();
  var TokDot = (function () {
      function TokDot() {

      };
      TokDot.value = new TokDot();
      return TokDot;
  })();
  var TokComma = (function () {
      function TokComma() {

      };
      TokComma.value = new TokComma();
      return TokComma;
  })();
  var TokUnderscore = (function () {
      function TokUnderscore() {

      };
      TokUnderscore.value = new TokUnderscore();
      return TokUnderscore;
  })();
  var TokBackslash = (function () {
      function TokBackslash() {

      };
      TokBackslash.value = new TokBackslash();
      return TokBackslash;
  })();
  var TokAt = (function () {
      function TokAt() {

      };
      TokAt.value = new TokAt();
      return TokAt;
  })();
  var TokLowerName = (function () {
      function TokLowerName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokLowerName.create = function (value0) {
          return function (value1) {
              return new TokLowerName(value0, value1);
          };
      };
      return TokLowerName;
  })();
  var TokUpperName = (function () {
      function TokUpperName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokUpperName.create = function (value0) {
          return function (value1) {
              return new TokUpperName(value0, value1);
          };
      };
      return TokUpperName;
  })();
  var TokOperator = (function () {
      function TokOperator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokOperator.create = function (value0) {
          return function (value1) {
              return new TokOperator(value0, value1);
          };
      };
      return TokOperator;
  })();
  var TokSymbolName = (function () {
      function TokSymbolName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokSymbolName.create = function (value0) {
          return function (value1) {
              return new TokSymbolName(value0, value1);
          };
      };
      return TokSymbolName;
  })();
  var TokSymbolArrow = (function () {
      function TokSymbolArrow(value0) {
          this.value0 = value0;
      };
      TokSymbolArrow.create = function (value0) {
          return new TokSymbolArrow(value0);
      };
      return TokSymbolArrow;
  })();
  var TokHole = (function () {
      function TokHole(value0) {
          this.value0 = value0;
      };
      TokHole.create = function (value0) {
          return new TokHole(value0);
      };
      return TokHole;
  })();
  var TokChar = (function () {
      function TokChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokChar.create = function (value0) {
          return function (value1) {
              return new TokChar(value0, value1);
          };
      };
      return TokChar;
  })();
  var TokString = (function () {
      function TokString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokString.create = function (value0) {
          return function (value1) {
              return new TokString(value0, value1);
          };
      };
      return TokString;
  })();
  var TokRawString = (function () {
      function TokRawString(value0) {
          this.value0 = value0;
      };
      TokRawString.create = function (value0) {
          return new TokRawString(value0);
      };
      return TokRawString;
  })();
  var TokInt = (function () {
      function TokInt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokInt.create = function (value0) {
          return function (value1) {
              return new TokInt(value0, value1);
          };
      };
      return TokInt;
  })();
  var TokNumber = (function () {
      function TokNumber(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokNumber.create = function (value0) {
          return function (value1) {
              return new TokNumber(value0, value1);
          };
      };
      return TokNumber;
  })();
  var TokLayoutStart = (function () {
      function TokLayoutStart(value0) {
          this.value0 = value0;
      };
      TokLayoutStart.create = function (value0) {
          return new TokLayoutStart(value0);
      };
      return TokLayoutStart;
  })();
  var TokLayoutSep = (function () {
      function TokLayoutSep(value0) {
          this.value0 = value0;
      };
      TokLayoutSep.create = function (value0) {
          return new TokLayoutSep(value0);
      };
      return TokLayoutSep;
  })();
  var TokLayoutEnd = (function () {
      function TokLayoutEnd(value0) {
          this.value0 = value0;
      };
      TokLayoutEnd.create = function (value0) {
          return new TokLayoutEnd(value0);
      };
      return TokLayoutEnd;
  })();
  var LF = (function () {
      function LF() {

      };
      LF.value = new LF();
      return LF;
  })();
  var CRLF = (function () {
      function CRLF() {

      };
      CRLF.value = new CRLF();
      return CRLF;
  })();
  var Infix = (function () {
      function Infix() {

      };
      Infix.value = new Infix();
      return Infix;
  })();
  var Infixl = (function () {
      function Infixl() {

      };
      Infixl.value = new Infixl();
      return Infixl;
  })();
  var Infixr = (function () {
      function Infixr() {

      };
      Infixr.value = new Infixr();
      return Infixr;
  })();
  var Comment = (function () {
      function Comment(value0) {
          this.value0 = value0;
      };
      Comment.create = function (value0) {
          return new Comment(value0);
      };
      return Comment;
  })();
  var Space = (function () {
      function Space(value0) {
          this.value0 = value0;
      };
      Space.create = function (value0) {
          return new Space(value0);
      };
      return Space;
  })();
  var Line = (function () {
      function Line(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Line.create = function (value0) {
          return function (value1) {
              return new Line(value0, value1);
          };
      };
      return Line;
  })();
  var FixityValue = (function () {
      function FixityValue(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FixityValue.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FixityValue(value0, value1, value2);
              };
          };
      };
      return FixityValue;
  })();
  var FixityType = (function () {
      function FixityType(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      FixityType.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new FixityType(value0, value1, value2, value3);
                  };
              };
          };
      };
      return FixityType;
  })();
  var RecordPun = (function () {
      function RecordPun(value0) {
          this.value0 = value0;
      };
      RecordPun.create = function (value0) {
          return new RecordPun(value0);
      };
      return RecordPun;
  })();
  var RecordField = (function () {
      function RecordField(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RecordField.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RecordField(value0, value1, value2);
              };
          };
      };
      return RecordField;
  })();
  var DataAll = (function () {
      function DataAll(value0) {
          this.value0 = value0;
      };
      DataAll.create = function (value0) {
          return new DataAll(value0);
      };
      return DataAll;
  })();
  var DataEnumerated = (function () {
      function DataEnumerated(value0) {
          this.value0 = value0;
      };
      DataEnumerated.create = function (value0) {
          return new DataEnumerated(value0);
      };
      return DataEnumerated;
  })();
  var ExportValue = (function () {
      function ExportValue(value0) {
          this.value0 = value0;
      };
      ExportValue.create = function (value0) {
          return new ExportValue(value0);
      };
      return ExportValue;
  })();
  var ExportOp = (function () {
      function ExportOp(value0) {
          this.value0 = value0;
      };
      ExportOp.create = function (value0) {
          return new ExportOp(value0);
      };
      return ExportOp;
  })();
  var ExportType = (function () {
      function ExportType(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportType.create = function (value0) {
          return function (value1) {
              return new ExportType(value0, value1);
          };
      };
      return ExportType;
  })();
  var ExportTypeOp = (function () {
      function ExportTypeOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportTypeOp.create = function (value0) {
          return function (value1) {
              return new ExportTypeOp(value0, value1);
          };
      };
      return ExportTypeOp;
  })();
  var ExportClass = (function () {
      function ExportClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportClass.create = function (value0) {
          return function (value1) {
              return new ExportClass(value0, value1);
          };
      };
      return ExportClass;
  })();
  var ExportKind = (function () {
      function ExportKind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportKind.create = function (value0) {
          return function (value1) {
              return new ExportKind(value0, value1);
          };
      };
      return ExportKind;
  })();
  var ExportModule = (function () {
      function ExportModule(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportModule.create = function (value0) {
          return function (value1) {
              return new ExportModule(value0, value1);
          };
      };
      return ExportModule;
  })();
  var ExportError = (function () {
      function ExportError(value0) {
          this.value0 = value0;
      };
      ExportError.create = function (value0) {
          return new ExportError(value0);
      };
      return ExportError;
  })();
  var ImportValue = (function () {
      function ImportValue(value0) {
          this.value0 = value0;
      };
      ImportValue.create = function (value0) {
          return new ImportValue(value0);
      };
      return ImportValue;
  })();
  var ImportOp = (function () {
      function ImportOp(value0) {
          this.value0 = value0;
      };
      ImportOp.create = function (value0) {
          return new ImportOp(value0);
      };
      return ImportOp;
  })();
  var ImportType = (function () {
      function ImportType(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportType.create = function (value0) {
          return function (value1) {
              return new ImportType(value0, value1);
          };
      };
      return ImportType;
  })();
  var ImportTypeOp = (function () {
      function ImportTypeOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportTypeOp.create = function (value0) {
          return function (value1) {
              return new ImportTypeOp(value0, value1);
          };
      };
      return ImportTypeOp;
  })();
  var ImportClass = (function () {
      function ImportClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportClass.create = function (value0) {
          return function (value1) {
              return new ImportClass(value0, value1);
          };
      };
      return ImportClass;
  })();
  var ImportKind = (function () {
      function ImportKind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportKind.create = function (value0) {
          return function (value1) {
              return new ImportKind(value0, value1);
          };
      };
      return ImportKind;
  })();
  var ImportError = (function () {
      function ImportError(value0) {
          this.value0 = value0;
      };
      ImportError.create = function (value0) {
          return new ImportError(value0);
      };
      return ImportError;
  })();
  var One = (function () {
      function One(value0) {
          this.value0 = value0;
      };
      One.create = function (value0) {
          return new One(value0);
      };
      return One;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var TypeVarKinded = (function () {
      function TypeVarKinded(value0) {
          this.value0 = value0;
      };
      TypeVarKinded.create = function (value0) {
          return new TypeVarKinded(value0);
      };
      return TypeVarKinded;
  })();
  var TypeVarName = (function () {
      function TypeVarName(value0) {
          this.value0 = value0;
      };
      TypeVarName.create = function (value0) {
          return new TypeVarName(value0);
      };
      return TypeVarName;
  })();
  var TypeVar = (function () {
      function TypeVar(value0) {
          this.value0 = value0;
      };
      TypeVar.create = function (value0) {
          return new TypeVar(value0);
      };
      return TypeVar;
  })();
  var TypeConstructor = (function () {
      function TypeConstructor(value0) {
          this.value0 = value0;
      };
      TypeConstructor.create = function (value0) {
          return new TypeConstructor(value0);
      };
      return TypeConstructor;
  })();
  var TypeWildcard = (function () {
      function TypeWildcard(value0) {
          this.value0 = value0;
      };
      TypeWildcard.create = function (value0) {
          return new TypeWildcard(value0);
      };
      return TypeWildcard;
  })();
  var TypeHole = (function () {
      function TypeHole(value0) {
          this.value0 = value0;
      };
      TypeHole.create = function (value0) {
          return new TypeHole(value0);
      };
      return TypeHole;
  })();
  var TypeString = (function () {
      function TypeString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeString.create = function (value0) {
          return function (value1) {
              return new TypeString(value0, value1);
          };
      };
      return TypeString;
  })();
  var TypeRow = (function () {
      function TypeRow(value0) {
          this.value0 = value0;
      };
      TypeRow.create = function (value0) {
          return new TypeRow(value0);
      };
      return TypeRow;
  })();
  var TypeRecord = (function () {
      function TypeRecord(value0) {
          this.value0 = value0;
      };
      TypeRecord.create = function (value0) {
          return new TypeRecord(value0);
      };
      return TypeRecord;
  })();
  var TypeForall = (function () {
      function TypeForall(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      TypeForall.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new TypeForall(value0, value1, value2, value3);
                  };
              };
          };
      };
      return TypeForall;
  })();
  var TypeKinded = (function () {
      function TypeKinded(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TypeKinded.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TypeKinded(value0, value1, value2);
              };
          };
      };
      return TypeKinded;
  })();
  var TypeApp = (function () {
      function TypeApp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeApp.create = function (value0) {
          return function (value1) {
              return new TypeApp(value0, value1);
          };
      };
      return TypeApp;
  })();
  var TypeOp = (function () {
      function TypeOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeOp.create = function (value0) {
          return function (value1) {
              return new TypeOp(value0, value1);
          };
      };
      return TypeOp;
  })();
  var TypeOpName = (function () {
      function TypeOpName(value0) {
          this.value0 = value0;
      };
      TypeOpName.create = function (value0) {
          return new TypeOpName(value0);
      };
      return TypeOpName;
  })();
  var TypeArrow = (function () {
      function TypeArrow(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TypeArrow.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TypeArrow(value0, value1, value2);
              };
          };
      };
      return TypeArrow;
  })();
  var TypeArrowName = (function () {
      function TypeArrowName(value0) {
          this.value0 = value0;
      };
      TypeArrowName.create = function (value0) {
          return new TypeArrowName(value0);
      };
      return TypeArrowName;
  })();
  var TypeConstrained = (function () {
      function TypeConstrained(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TypeConstrained.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TypeConstrained(value0, value1, value2);
              };
          };
      };
      return TypeConstrained;
  })();
  var TypeParens = (function () {
      function TypeParens(value0) {
          this.value0 = value0;
      };
      TypeParens.create = function (value0) {
          return new TypeParens(value0);
      };
      return TypeParens;
  })();
  var TypeUnaryRow = (function () {
      function TypeUnaryRow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeUnaryRow.create = function (value0) {
          return function (value1) {
              return new TypeUnaryRow(value0, value1);
          };
      };
      return TypeUnaryRow;
  })();
  var $$TypeError = (function () {
      function $$TypeError(value0) {
          this.value0 = value0;
      };
      $$TypeError.create = function (value0) {
          return new $$TypeError(value0);
      };
      return $$TypeError;
  })();
  var ForeignValue = (function () {
      function ForeignValue(value0) {
          this.value0 = value0;
      };
      ForeignValue.create = function (value0) {
          return new ForeignValue(value0);
      };
      return ForeignValue;
  })();
  var ForeignData = (function () {
      function ForeignData(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ForeignData.create = function (value0) {
          return function (value1) {
              return new ForeignData(value0, value1);
          };
      };
      return ForeignData;
  })();
  var ForeignKind = (function () {
      function ForeignKind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ForeignKind.create = function (value0) {
          return function (value1) {
              return new ForeignKind(value0, value1);
          };
      };
      return ForeignKind;
  })();
  var FundepDetermined = (function () {
      function FundepDetermined(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FundepDetermined.create = function (value0) {
          return function (value1) {
              return new FundepDetermined(value0, value1);
          };
      };
      return FundepDetermined;
  })();
  var FundepDetermines = (function () {
      function FundepDetermines(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FundepDetermines.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FundepDetermines(value0, value1, value2);
              };
          };
      };
      return FundepDetermines;
  })();
  var BinderWildcard = (function () {
      function BinderWildcard(value0) {
          this.value0 = value0;
      };
      BinderWildcard.create = function (value0) {
          return new BinderWildcard(value0);
      };
      return BinderWildcard;
  })();
  var BinderVar = (function () {
      function BinderVar(value0) {
          this.value0 = value0;
      };
      BinderVar.create = function (value0) {
          return new BinderVar(value0);
      };
      return BinderVar;
  })();
  var BinderNamed = (function () {
      function BinderNamed(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderNamed.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderNamed(value0, value1, value2);
              };
          };
      };
      return BinderNamed;
  })();
  var BinderConstructor = (function () {
      function BinderConstructor(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderConstructor.create = function (value0) {
          return function (value1) {
              return new BinderConstructor(value0, value1);
          };
      };
      return BinderConstructor;
  })();
  var BinderBoolean = (function () {
      function BinderBoolean(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderBoolean.create = function (value0) {
          return function (value1) {
              return new BinderBoolean(value0, value1);
          };
      };
      return BinderBoolean;
  })();
  var BinderChar = (function () {
      function BinderChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderChar.create = function (value0) {
          return function (value1) {
              return new BinderChar(value0, value1);
          };
      };
      return BinderChar;
  })();
  var BinderString = (function () {
      function BinderString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderString.create = function (value0) {
          return function (value1) {
              return new BinderString(value0, value1);
          };
      };
      return BinderString;
  })();
  var BinderInt = (function () {
      function BinderInt(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderInt.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderInt(value0, value1, value2);
              };
          };
      };
      return BinderInt;
  })();
  var BinderNumber = (function () {
      function BinderNumber(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderNumber.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderNumber(value0, value1, value2);
              };
          };
      };
      return BinderNumber;
  })();
  var BinderArray = (function () {
      function BinderArray(value0) {
          this.value0 = value0;
      };
      BinderArray.create = function (value0) {
          return new BinderArray(value0);
      };
      return BinderArray;
  })();
  var BinderRecord = (function () {
      function BinderRecord(value0) {
          this.value0 = value0;
      };
      BinderRecord.create = function (value0) {
          return new BinderRecord(value0);
      };
      return BinderRecord;
  })();
  var BinderParens = (function () {
      function BinderParens(value0) {
          this.value0 = value0;
      };
      BinderParens.create = function (value0) {
          return new BinderParens(value0);
      };
      return BinderParens;
  })();
  var BinderTyped = (function () {
      function BinderTyped(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderTyped.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderTyped(value0, value1, value2);
              };
          };
      };
      return BinderTyped;
  })();
  var BinderOp = (function () {
      function BinderOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderOp.create = function (value0) {
          return function (value1) {
              return new BinderOp(value0, value1);
          };
      };
      return BinderOp;
  })();
  var BinderError = (function () {
      function BinderError(value0) {
          this.value0 = value0;
      };
      BinderError.create = function (value0) {
          return new BinderError(value0);
      };
      return BinderError;
  })();
  var DoLet = (function () {
      function DoLet(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DoLet.create = function (value0) {
          return function (value1) {
              return new DoLet(value0, value1);
          };
      };
      return DoLet;
  })();
  var DoDiscard = (function () {
      function DoDiscard(value0) {
          this.value0 = value0;
      };
      DoDiscard.create = function (value0) {
          return new DoDiscard(value0);
      };
      return DoDiscard;
  })();
  var DoBind = (function () {
      function DoBind(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DoBind.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DoBind(value0, value1, value2);
              };
          };
      };
      return DoBind;
  })();
  var DoError = (function () {
      function DoError(value0) {
          this.value0 = value0;
      };
      DoError.create = function (value0) {
          return new DoError(value0);
      };
      return DoError;
  })();
  var LetBindingSignature = (function () {
      function LetBindingSignature(value0) {
          this.value0 = value0;
      };
      LetBindingSignature.create = function (value0) {
          return new LetBindingSignature(value0);
      };
      return LetBindingSignature;
  })();
  var LetBindingName = (function () {
      function LetBindingName(value0) {
          this.value0 = value0;
      };
      LetBindingName.create = function (value0) {
          return new LetBindingName(value0);
      };
      return LetBindingName;
  })();
  var LetBindingPattern = (function () {
      function LetBindingPattern(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      LetBindingPattern.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new LetBindingPattern(value0, value1, value2);
              };
          };
      };
      return LetBindingPattern;
  })();
  var LetBindingError = (function () {
      function LetBindingError(value0) {
          this.value0 = value0;
      };
      LetBindingError.create = function (value0) {
          return new LetBindingError(value0);
      };
      return LetBindingError;
  })();
  var Unconditional = (function () {
      function Unconditional(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Unconditional.create = function (value0) {
          return function (value1) {
              return new Unconditional(value0, value1);
          };
      };
      return Unconditional;
  })();
  var Guarded = (function () {
      function Guarded(value0) {
          this.value0 = value0;
      };
      Guarded.create = function (value0) {
          return new Guarded(value0);
      };
      return Guarded;
  })();
  var ExprHole = (function () {
      function ExprHole(value0) {
          this.value0 = value0;
      };
      ExprHole.create = function (value0) {
          return new ExprHole(value0);
      };
      return ExprHole;
  })();
  var ExprSection = (function () {
      function ExprSection(value0) {
          this.value0 = value0;
      };
      ExprSection.create = function (value0) {
          return new ExprSection(value0);
      };
      return ExprSection;
  })();
  var ExprIdent = (function () {
      function ExprIdent(value0) {
          this.value0 = value0;
      };
      ExprIdent.create = function (value0) {
          return new ExprIdent(value0);
      };
      return ExprIdent;
  })();
  var ExprConstructor = (function () {
      function ExprConstructor(value0) {
          this.value0 = value0;
      };
      ExprConstructor.create = function (value0) {
          return new ExprConstructor(value0);
      };
      return ExprConstructor;
  })();
  var ExprBoolean = (function () {
      function ExprBoolean(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprBoolean.create = function (value0) {
          return function (value1) {
              return new ExprBoolean(value0, value1);
          };
      };
      return ExprBoolean;
  })();
  var ExprChar = (function () {
      function ExprChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprChar.create = function (value0) {
          return function (value1) {
              return new ExprChar(value0, value1);
          };
      };
      return ExprChar;
  })();
  var ExprString = (function () {
      function ExprString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprString.create = function (value0) {
          return function (value1) {
              return new ExprString(value0, value1);
          };
      };
      return ExprString;
  })();
  var ExprInt = (function () {
      function ExprInt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprInt.create = function (value0) {
          return function (value1) {
              return new ExprInt(value0, value1);
          };
      };
      return ExprInt;
  })();
  var ExprNumber = (function () {
      function ExprNumber(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprNumber.create = function (value0) {
          return function (value1) {
              return new ExprNumber(value0, value1);
          };
      };
      return ExprNumber;
  })();
  var ExprArray = (function () {
      function ExprArray(value0) {
          this.value0 = value0;
      };
      ExprArray.create = function (value0) {
          return new ExprArray(value0);
      };
      return ExprArray;
  })();
  var ExprRecord = (function () {
      function ExprRecord(value0) {
          this.value0 = value0;
      };
      ExprRecord.create = function (value0) {
          return new ExprRecord(value0);
      };
      return ExprRecord;
  })();
  var ExprParens = (function () {
      function ExprParens(value0) {
          this.value0 = value0;
      };
      ExprParens.create = function (value0) {
          return new ExprParens(value0);
      };
      return ExprParens;
  })();
  var ExprTyped = (function () {
      function ExprTyped(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ExprTyped.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ExprTyped(value0, value1, value2);
              };
          };
      };
      return ExprTyped;
  })();
  var ExprInfix = (function () {
      function ExprInfix(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprInfix.create = function (value0) {
          return function (value1) {
              return new ExprInfix(value0, value1);
          };
      };
      return ExprInfix;
  })();
  var ExprOp = (function () {
      function ExprOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprOp.create = function (value0) {
          return function (value1) {
              return new ExprOp(value0, value1);
          };
      };
      return ExprOp;
  })();
  var ExprOpName = (function () {
      function ExprOpName(value0) {
          this.value0 = value0;
      };
      ExprOpName.create = function (value0) {
          return new ExprOpName(value0);
      };
      return ExprOpName;
  })();
  var ExprNegate = (function () {
      function ExprNegate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprNegate.create = function (value0) {
          return function (value1) {
              return new ExprNegate(value0, value1);
          };
      };
      return ExprNegate;
  })();
  var ExprRecordAccessor = (function () {
      function ExprRecordAccessor(value0) {
          this.value0 = value0;
      };
      ExprRecordAccessor.create = function (value0) {
          return new ExprRecordAccessor(value0);
      };
      return ExprRecordAccessor;
  })();
  var ExprRecordUpdate = (function () {
      function ExprRecordUpdate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprRecordUpdate.create = function (value0) {
          return function (value1) {
              return new ExprRecordUpdate(value0, value1);
          };
      };
      return ExprRecordUpdate;
  })();
  var ExprApp = (function () {
      function ExprApp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprApp.create = function (value0) {
          return function (value1) {
              return new ExprApp(value0, value1);
          };
      };
      return ExprApp;
  })();
  var ExprLambda = (function () {
      function ExprLambda(value0) {
          this.value0 = value0;
      };
      ExprLambda.create = function (value0) {
          return new ExprLambda(value0);
      };
      return ExprLambda;
  })();
  var ExprIf = (function () {
      function ExprIf(value0) {
          this.value0 = value0;
      };
      ExprIf.create = function (value0) {
          return new ExprIf(value0);
      };
      return ExprIf;
  })();
  var ExprCase = (function () {
      function ExprCase(value0) {
          this.value0 = value0;
      };
      ExprCase.create = function (value0) {
          return new ExprCase(value0);
      };
      return ExprCase;
  })();
  var ExprLet = (function () {
      function ExprLet(value0) {
          this.value0 = value0;
      };
      ExprLet.create = function (value0) {
          return new ExprLet(value0);
      };
      return ExprLet;
  })();
  var ExprDo = (function () {
      function ExprDo(value0) {
          this.value0 = value0;
      };
      ExprDo.create = function (value0) {
          return new ExprDo(value0);
      };
      return ExprDo;
  })();
  var ExprAdo = (function () {
      function ExprAdo(value0) {
          this.value0 = value0;
      };
      ExprAdo.create = function (value0) {
          return new ExprAdo(value0);
      };
      return ExprAdo;
  })();
  var ExprError = (function () {
      function ExprError(value0) {
          this.value0 = value0;
      };
      ExprError.create = function (value0) {
          return new ExprError(value0);
      };
      return ExprError;
  })();
  var RecordUpdateLeaf = (function () {
      function RecordUpdateLeaf(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RecordUpdateLeaf.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RecordUpdateLeaf(value0, value1, value2);
              };
          };
      };
      return RecordUpdateLeaf;
  })();
  var RecordUpdateBranch = (function () {
      function RecordUpdateBranch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RecordUpdateBranch.create = function (value0) {
          return function (value1) {
              return new RecordUpdateBranch(value0, value1);
          };
      };
      return RecordUpdateBranch;
  })();
  var InstanceBindingSignature = (function () {
      function InstanceBindingSignature(value0) {
          this.value0 = value0;
      };
      InstanceBindingSignature.create = function (value0) {
          return new InstanceBindingSignature(value0);
      };
      return InstanceBindingSignature;
  })();
  var InstanceBindingName = (function () {
      function InstanceBindingName(value0) {
          this.value0 = value0;
      };
      InstanceBindingName.create = function (value0) {
          return new InstanceBindingName(value0);
      };
      return InstanceBindingName;
  })();
  var DeclData = (function () {
      function DeclData(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DeclData.create = function (value0) {
          return function (value1) {
              return new DeclData(value0, value1);
          };
      };
      return DeclData;
  })();
  var DeclType = (function () {
      function DeclType(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DeclType.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DeclType(value0, value1, value2);
              };
          };
      };
      return DeclType;
  })();
  var DeclNewtype = (function () {
      function DeclNewtype(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      DeclNewtype.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new DeclNewtype(value0, value1, value2, value3);
                  };
              };
          };
      };
      return DeclNewtype;
  })();
  var DeclClass = (function () {
      function DeclClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DeclClass.create = function (value0) {
          return function (value1) {
              return new DeclClass(value0, value1);
          };
      };
      return DeclClass;
  })();
  var DeclInstanceChain = (function () {
      function DeclInstanceChain(value0) {
          this.value0 = value0;
      };
      DeclInstanceChain.create = function (value0) {
          return new DeclInstanceChain(value0);
      };
      return DeclInstanceChain;
  })();
  var DeclDerive = (function () {
      function DeclDerive(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DeclDerive.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DeclDerive(value0, value1, value2);
              };
          };
      };
      return DeclDerive;
  })();
  var DeclKindSignature = (function () {
      function DeclKindSignature(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DeclKindSignature.create = function (value0) {
          return function (value1) {
              return new DeclKindSignature(value0, value1);
          };
      };
      return DeclKindSignature;
  })();
  var DeclSignature = (function () {
      function DeclSignature(value0) {
          this.value0 = value0;
      };
      DeclSignature.create = function (value0) {
          return new DeclSignature(value0);
      };
      return DeclSignature;
  })();
  var DeclValue = (function () {
      function DeclValue(value0) {
          this.value0 = value0;
      };
      DeclValue.create = function (value0) {
          return new DeclValue(value0);
      };
      return DeclValue;
  })();
  var DeclFixity = (function () {
      function DeclFixity(value0) {
          this.value0 = value0;
      };
      DeclFixity.create = function (value0) {
          return new DeclFixity(value0);
      };
      return DeclFixity;
  })();
  var DeclForeign = (function () {
      function DeclForeign(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DeclForeign.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DeclForeign(value0, value1, value2);
              };
          };
      };
      return DeclForeign;
  })();
  var DeclRole = (function () {
      function DeclRole(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      DeclRole.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new DeclRole(value0, value1, value2, value3);
                  };
              };
          };
      };
      return DeclRole;
  })();
  var DeclError = (function () {
      function DeclError(value0) {
          this.value0 = value0;
      };
      DeclError.create = function (value0) {
          return new DeclError(value0);
      };
      return DeclError;
  })();
  exports["ModuleName"] = ModuleName;
  exports["Comment"] = Comment;
  exports["Space"] = Space;
  exports["Line"] = Line;
  exports["LF"] = LF;
  exports["CRLF"] = CRLF;
  exports["ASCII"] = ASCII;
  exports["Unicode"] = Unicode;
  exports["TokLeftParen"] = TokLeftParen;
  exports["TokRightParen"] = TokRightParen;
  exports["TokLeftBrace"] = TokLeftBrace;
  exports["TokRightBrace"] = TokRightBrace;
  exports["TokLeftSquare"] = TokLeftSquare;
  exports["TokRightSquare"] = TokRightSquare;
  exports["TokLeftArrow"] = TokLeftArrow;
  exports["TokRightArrow"] = TokRightArrow;
  exports["TokRightFatArrow"] = TokRightFatArrow;
  exports["TokDoubleColon"] = TokDoubleColon;
  exports["TokForall"] = TokForall;
  exports["TokEquals"] = TokEquals;
  exports["TokPipe"] = TokPipe;
  exports["TokTick"] = TokTick;
  exports["TokDot"] = TokDot;
  exports["TokComma"] = TokComma;
  exports["TokUnderscore"] = TokUnderscore;
  exports["TokBackslash"] = TokBackslash;
  exports["TokAt"] = TokAt;
  exports["TokLowerName"] = TokLowerName;
  exports["TokUpperName"] = TokUpperName;
  exports["TokOperator"] = TokOperator;
  exports["TokSymbolName"] = TokSymbolName;
  exports["TokSymbolArrow"] = TokSymbolArrow;
  exports["TokHole"] = TokHole;
  exports["TokChar"] = TokChar;
  exports["TokString"] = TokString;
  exports["TokRawString"] = TokRawString;
  exports["TokInt"] = TokInt;
  exports["TokNumber"] = TokNumber;
  exports["TokLayoutStart"] = TokLayoutStart;
  exports["TokLayoutSep"] = TokLayoutSep;
  exports["TokLayoutEnd"] = TokLayoutEnd;
  exports["One"] = One;
  exports["Many"] = Many;
  exports["TypeVar"] = TypeVar;
  exports["TypeConstructor"] = TypeConstructor;
  exports["TypeWildcard"] = TypeWildcard;
  exports["TypeHole"] = TypeHole;
  exports["TypeString"] = TypeString;
  exports["TypeRow"] = TypeRow;
  exports["TypeRecord"] = TypeRecord;
  exports["TypeForall"] = TypeForall;
  exports["TypeKinded"] = TypeKinded;
  exports["TypeApp"] = TypeApp;
  exports["TypeOp"] = TypeOp;
  exports["TypeOpName"] = TypeOpName;
  exports["TypeArrow"] = TypeArrow;
  exports["TypeArrowName"] = TypeArrowName;
  exports["TypeConstrained"] = TypeConstrained;
  exports["TypeParens"] = TypeParens;
  exports["TypeUnaryRow"] = TypeUnaryRow;
  exports["TypeError"] = $$TypeError;
  exports["TypeVarKinded"] = TypeVarKinded;
  exports["TypeVarName"] = TypeVarName;
  exports["ExportValue"] = ExportValue;
  exports["ExportOp"] = ExportOp;
  exports["ExportType"] = ExportType;
  exports["ExportTypeOp"] = ExportTypeOp;
  exports["ExportClass"] = ExportClass;
  exports["ExportKind"] = ExportKind;
  exports["ExportModule"] = ExportModule;
  exports["ExportError"] = ExportError;
  exports["DataAll"] = DataAll;
  exports["DataEnumerated"] = DataEnumerated;
  exports["DeclData"] = DeclData;
  exports["DeclType"] = DeclType;
  exports["DeclNewtype"] = DeclNewtype;
  exports["DeclClass"] = DeclClass;
  exports["DeclInstanceChain"] = DeclInstanceChain;
  exports["DeclDerive"] = DeclDerive;
  exports["DeclKindSignature"] = DeclKindSignature;
  exports["DeclSignature"] = DeclSignature;
  exports["DeclValue"] = DeclValue;
  exports["DeclFixity"] = DeclFixity;
  exports["DeclForeign"] = DeclForeign;
  exports["DeclRole"] = DeclRole;
  exports["DeclError"] = DeclError;
  exports["InstanceBindingSignature"] = InstanceBindingSignature;
  exports["InstanceBindingName"] = InstanceBindingName;
  exports["ImportValue"] = ImportValue;
  exports["ImportOp"] = ImportOp;
  exports["ImportType"] = ImportType;
  exports["ImportTypeOp"] = ImportTypeOp;
  exports["ImportClass"] = ImportClass;
  exports["ImportKind"] = ImportKind;
  exports["ImportError"] = ImportError;
  exports["FundepDetermined"] = FundepDetermined;
  exports["FundepDetermines"] = FundepDetermines;
  exports["Infix"] = Infix;
  exports["Infixl"] = Infixl;
  exports["Infixr"] = Infixr;
  exports["FixityValue"] = FixityValue;
  exports["FixityType"] = FixityType;
  exports["Unconditional"] = Unconditional;
  exports["Guarded"] = Guarded;
  exports["ForeignValue"] = ForeignValue;
  exports["ForeignData"] = ForeignData;
  exports["ForeignKind"] = ForeignKind;
  exports["Nominal"] = Nominal;
  exports["Representational"] = Representational;
  exports["Phantom"] = Phantom;
  exports["ExprHole"] = ExprHole;
  exports["ExprSection"] = ExprSection;
  exports["ExprIdent"] = ExprIdent;
  exports["ExprConstructor"] = ExprConstructor;
  exports["ExprBoolean"] = ExprBoolean;
  exports["ExprChar"] = ExprChar;
  exports["ExprString"] = ExprString;
  exports["ExprInt"] = ExprInt;
  exports["ExprNumber"] = ExprNumber;
  exports["ExprArray"] = ExprArray;
  exports["ExprRecord"] = ExprRecord;
  exports["ExprParens"] = ExprParens;
  exports["ExprTyped"] = ExprTyped;
  exports["ExprInfix"] = ExprInfix;
  exports["ExprOp"] = ExprOp;
  exports["ExprOpName"] = ExprOpName;
  exports["ExprNegate"] = ExprNegate;
  exports["ExprRecordAccessor"] = ExprRecordAccessor;
  exports["ExprRecordUpdate"] = ExprRecordUpdate;
  exports["ExprApp"] = ExprApp;
  exports["ExprLambda"] = ExprLambda;
  exports["ExprIf"] = ExprIf;
  exports["ExprCase"] = ExprCase;
  exports["ExprLet"] = ExprLet;
  exports["ExprDo"] = ExprDo;
  exports["ExprAdo"] = ExprAdo;
  exports["ExprError"] = ExprError;
  exports["RecordPun"] = RecordPun;
  exports["RecordField"] = RecordField;
  exports["RecordUpdateLeaf"] = RecordUpdateLeaf;
  exports["RecordUpdateBranch"] = RecordUpdateBranch;
  exports["LetBindingSignature"] = LetBindingSignature;
  exports["LetBindingName"] = LetBindingName;
  exports["LetBindingPattern"] = LetBindingPattern;
  exports["LetBindingError"] = LetBindingError;
  exports["DoLet"] = DoLet;
  exports["DoDiscard"] = DoDiscard;
  exports["DoBind"] = DoBind;
  exports["DoError"] = DoError;
  exports["BinderWildcard"] = BinderWildcard;
  exports["BinderVar"] = BinderVar;
  exports["BinderNamed"] = BinderNamed;
  exports["BinderConstructor"] = BinderConstructor;
  exports["BinderBoolean"] = BinderBoolean;
  exports["BinderChar"] = BinderChar;
  exports["BinderString"] = BinderString;
  exports["BinderInt"] = BinderInt;
  exports["BinderNumber"] = BinderNumber;
  exports["BinderArray"] = BinderArray;
  exports["BinderRecord"] = BinderRecord;
  exports["BinderParens"] = BinderParens;
  exports["BinderTyped"] = BinderTyped;
  exports["BinderOp"] = BinderOp;
  exports["BinderError"] = BinderError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["PureScript.CST.Print"] = $PS["PureScript.CST.Print"] || {};
  var exports = $PS["PureScript.CST.Print"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var ShowLayout = (function () {
      function ShowLayout() {

      };
      ShowLayout.value = new ShowLayout();
      return ShowLayout;
  })();
  var HideLayout = (function () {
      function HideLayout() {

      };
      HideLayout.value = new HideLayout();
      return HideLayout;
  })();
  var printQualified = function (moduleName) {
      return function (name) {
          if (moduleName instanceof Data_Maybe.Nothing) {
              return name;
          };
          if (moduleName instanceof Data_Maybe.Just) {
              return Data_Newtype.unwrap()(moduleName.value0) + ("." + name);
          };
          throw new Error("Failed pattern match at PureScript.CST.Print (line 124, column 34 - line 126, column 38): " + [ moduleName.constructor.name ]);
      };
  };
  var printTokenWithOption = function (option) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.TokLeftParen) {
              return "(";
          };
          if (v instanceof PureScript_CST_Types.TokRightParen) {
              return ")";
          };
          if (v instanceof PureScript_CST_Types.TokLeftBrace) {
              return "{";
          };
          if (v instanceof PureScript_CST_Types.TokRightBrace) {
              return "}";
          };
          if (v instanceof PureScript_CST_Types.TokLeftSquare) {
              return "[";
          };
          if (v instanceof PureScript_CST_Types.TokRightSquare) {
              return "]";
          };
          if (v instanceof PureScript_CST_Types.TokLeftArrow) {
              if (v.value0 instanceof PureScript_CST_Types.ASCII) {
                  return "<-";
              };
              if (v.value0 instanceof PureScript_CST_Types.Unicode) {
                  return "\u2190";
              };
              throw new Error("Failed pattern match at PureScript.CST.Print (line 51, column 5 - line 53, column 21): " + [ v.value0.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.TokRightArrow) {
              if (v.value0 instanceof PureScript_CST_Types.ASCII) {
                  return "->";
              };
              if (v.value0 instanceof PureScript_CST_Types.Unicode) {
                  return "\u2192";
              };
              throw new Error("Failed pattern match at PureScript.CST.Print (line 55, column 5 - line 57, column 21): " + [ v.value0.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
              if (v.value0 instanceof PureScript_CST_Types.ASCII) {
                  return "=>";
              };
              if (v.value0 instanceof PureScript_CST_Types.Unicode) {
                  return "\u21d2";
              };
              throw new Error("Failed pattern match at PureScript.CST.Print (line 59, column 5 - line 61, column 21): " + [ v.value0.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.TokDoubleColon) {
              if (v.value0 instanceof PureScript_CST_Types.ASCII) {
                  return "::";
              };
              if (v.value0 instanceof PureScript_CST_Types.Unicode) {
                  return "\u2237";
              };
              throw new Error("Failed pattern match at PureScript.CST.Print (line 63, column 5 - line 65, column 21): " + [ v.value0.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.TokForall) {
              if (v.value0 instanceof PureScript_CST_Types.ASCII) {
                  return "forall";
              };
              if (v.value0 instanceof PureScript_CST_Types.Unicode) {
                  return "\u2200";
              };
              throw new Error("Failed pattern match at PureScript.CST.Print (line 67, column 5 - line 69, column 21): " + [ v.value0.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.TokEquals) {
              return "=";
          };
          if (v instanceof PureScript_CST_Types.TokPipe) {
              return "|";
          };
          if (v instanceof PureScript_CST_Types.TokTick) {
              return "`";
          };
          if (v instanceof PureScript_CST_Types.TokDot) {
              return ".";
          };
          if (v instanceof PureScript_CST_Types.TokComma) {
              return ",";
          };
          if (v instanceof PureScript_CST_Types.TokUnderscore) {
              return "_";
          };
          if (v instanceof PureScript_CST_Types.TokBackslash) {
              return "\\";
          };
          if (v instanceof PureScript_CST_Types.TokAt) {
              return "@";
          };
          if (v instanceof PureScript_CST_Types.TokLowerName) {
              return printQualified(v.value0)(v.value1);
          };
          if (v instanceof PureScript_CST_Types.TokUpperName) {
              return printQualified(v.value0)(v.value1);
          };
          if (v instanceof PureScript_CST_Types.TokOperator) {
              return printQualified(v.value0)(v.value1);
          };
          if (v instanceof PureScript_CST_Types.TokSymbolName) {
              return printQualified(v.value0)("(" + (v.value1 + ")"));
          };
          if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
              if (v.value0 instanceof PureScript_CST_Types.ASCII) {
                  return "(->)";
              };
              if (v.value0 instanceof PureScript_CST_Types.Unicode) {
                  return "(\u2192)";
              };
              throw new Error("Failed pattern match at PureScript.CST.Print (line 95, column 5 - line 97, column 23): " + [ v.value0.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.TokHole) {
              return "?" + v.value0;
          };
          if (v instanceof PureScript_CST_Types.TokChar) {
              return "'" + (v.value0 + "'");
          };
          if (v instanceof PureScript_CST_Types.TokString) {
              return "\"" + (v.value0 + "\"");
          };
          if (v instanceof PureScript_CST_Types.TokRawString) {
              return "\"\"\"" + (v.value0 + "\"\"\"");
          };
          if (v instanceof PureScript_CST_Types.TokInt) {
              return v.value0;
          };
          if (v instanceof PureScript_CST_Types.TokNumber) {
              return v.value0;
          };
          if (v instanceof PureScript_CST_Types.TokLayoutStart) {
              if (option instanceof ShowLayout) {
                  return "{";
              };
              if (option instanceof HideLayout) {
                  return "";
              };
              throw new Error("Failed pattern match at PureScript.CST.Print (line 111, column 5 - line 113, column 23): " + [ option.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.TokLayoutSep) {
              if (option instanceof ShowLayout) {
                  return ";";
              };
              if (option instanceof HideLayout) {
                  return "";
              };
              throw new Error("Failed pattern match at PureScript.CST.Print (line 115, column 5 - line 117, column 23): " + [ option.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
              if (option instanceof ShowLayout) {
                  return "}";
              };
              if (option instanceof HideLayout) {
                  return "";
              };
              throw new Error("Failed pattern match at PureScript.CST.Print (line 119, column 5 - line 121, column 23): " + [ option.constructor.name ]);
          };
          throw new Error("Failed pattern match at PureScript.CST.Print (line 37, column 31 - line 121, column 23): " + [ v.constructor.name ]);
      };
  };
  var printToken = printTokenWithOption(HideLayout.value);
  exports["printToken"] = printToken;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["PureScript.CST.Range"] = $PS["PureScript.CST.Range"] || {};
  var exports = $PS["PureScript.CST.Range"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Void = $PS["Data.Void"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];
  var RangeOf = function (rangeOf) {
      this.rangeOf = rangeOf;
  };
  var rangeOfWrapped = new RangeOf(function (v) {
      return {
          start: v.open.range.start,
          end: v.close.range.end
      };
  });
  var rangeOfVoid = new RangeOf(Data_Void.absurd);
  var rangeOfQualifiedName = new RangeOf(function (v) {
      return v.token.range;
  });
  var rangeOfName = new RangeOf(function (v) {
      return v.token.range;
  });
  var rangeOf = function (dict) {
      return dict.rangeOf;
  };
  var rangeOfClassFundep = new RangeOf(function (v) {
      if (v instanceof PureScript_CST_Types.FundepDetermined) {
          return {
              start: v.value0.range.start,
              end: (rangeOf(rangeOfName)(Data_Array_NonEmpty.last(v.value1))).end
          };
      };
      if (v instanceof PureScript_CST_Types.FundepDetermines) {
          return {
              start: (rangeOf(rangeOfName)(Data_Array_NonEmpty.head(v.value0))).start,
              end: (rangeOf(rangeOfName)(Data_Array_NonEmpty.last(v.value2))).end
          };
      };
      throw new Error("Failed pattern match at PureScript.CST.Range (line 544, column 13 - line 552, column 8): " + [ v.constructor.name ]);
  });
  var rangeOfDataMembers = new RangeOf(function (v) {
      if (v instanceof PureScript_CST_Types.DataAll) {
          return v.value0.range;
      };
      if (v instanceof PureScript_CST_Types.DataEnumerated) {
          return rangeOf(rangeOfWrapped)(v.value0);
      };
      throw new Error("Failed pattern match at PureScript.CST.Range (line 306, column 13 - line 310, column 16): " + [ v.constructor.name ]);
  });
  var rangeOfExport = function (dictRangeOf) {
      return new RangeOf(function (v) {
          if (v instanceof PureScript_CST_Types.ExportValue) {
              return rangeOf(rangeOfName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExportOp) {
              return rangeOf(rangeOfName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExportType) {
              if (v.value1 instanceof Data_Maybe.Nothing) {
                  return rangeOf(rangeOfName)(v.value0);
              };
              if (v.value1 instanceof Data_Maybe.Just) {
                  return {
                      start: (rangeOf(rangeOfName)(v.value0)).start,
                      end: (rangeOf(rangeOfDataMembers)(v.value1.value0)).end
                  };
              };
              throw new Error("Failed pattern match at PureScript.CST.Range (line 260, column 7 - line 266, column 12): " + [ v.value1.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.ExportTypeOp) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfName)(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExportClass) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfName)(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExportKind) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfName)(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExportModule) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfName)(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExportError) {
              return rangeOf(dictRangeOf)(v.value0);
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 254, column 13 - line 284, column 16): " + [ v.constructor.name ]);
      });
  };
  var rangeOfFixityOp = new RangeOf(function (v) {
      if (v instanceof PureScript_CST_Types.FixityValue) {
          return {
              start: (rangeOf(rangeOfQualifiedName)(v.value0)).start,
              end: (rangeOf(rangeOfName)(v.value2)).end
          };
      };
      if (v instanceof PureScript_CST_Types.FixityType) {
          return {
              start: v.value0.range.start,
              end: (rangeOf(rangeOfName)(v.value3)).end
          };
      };
      throw new Error("Failed pattern match at PureScript.CST.Range (line 624, column 13 - line 632, column 8): " + [ v.constructor.name ]);
  });
  var rangeOfImport = function (dictRangeOf) {
      return new RangeOf(function (v) {
          if (v instanceof PureScript_CST_Types.ImportValue) {
              return rangeOf(rangeOfName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ImportOp) {
              return rangeOf(rangeOfName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ImportType) {
              if (v.value1 instanceof Data_Maybe.Nothing) {
                  return rangeOf(rangeOfName)(v.value0);
              };
              if (v.value1 instanceof Data_Maybe.Just) {
                  return {
                      start: (rangeOf(rangeOfName)(v.value0)).start,
                      end: (rangeOf(rangeOfDataMembers)(v.value1.value0)).end
                  };
              };
              throw new Error("Failed pattern match at PureScript.CST.Range (line 349, column 7 - line 355, column 12): " + [ v.value1.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.ImportTypeOp) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfName)(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ImportClass) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfName)(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ImportKind) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfName)(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ImportError) {
              return rangeOf(dictRangeOf)(v.value0);
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 343, column 13 - line 369, column 16): " + [ v.constructor.name ]);
      });
  };
  var rangeOfImportDecl = new RangeOf(function (v) {
      var v1 = (function () {
          if (v.qualified instanceof Data_Maybe.Nothing) {
              if (v.names instanceof Data_Maybe.Nothing) {
                  return rangeOf(rangeOfName)(v.module);
              };
              if (v.names instanceof Data_Maybe.Just) {
                  return rangeOf(rangeOfWrapped)(v.names.value0.value1);
              };
              throw new Error("Failed pattern match at PureScript.CST.Range (line 324, column 11 - line 328, column 30): " + [ v.names.constructor.name ]);
          };
          if (v.qualified instanceof Data_Maybe.Just) {
              return rangeOf(rangeOfName)(v.qualified.value0.value1);
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 322, column 17 - line 330, column 20): " + [ v.qualified.constructor.name ]);
      })();
      return {
          start: v.keyword.range.start,
          end: v1.end
      };
  });
  var rangeOfLabeled = function (dictRangeOf) {
      return function (dictRangeOf1) {
          return new RangeOf(function (v) {
              return {
                  start: (rangeOf(dictRangeOf)(v.label)).start,
                  end: (rangeOf(dictRangeOf1)(v.value)).end
              };
          });
      };
  };
  var rangeOfSeparated = function (dictRangeOf) {
      return new RangeOf(function (v) {
          var v1 = Data_Array.last(v.tail);
          if (v1 instanceof Data_Maybe.Just) {
              return {
                  start: (rangeOf(dictRangeOf)(v.head)).start,
                  end: (rangeOf(dictRangeOf)(v1.value0.value1)).end
              };
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return rangeOf(dictRangeOf)(v.head);
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 101, column 5 - line 107, column 21): " + [ v1.constructor.name ]);
      });
  };
  var rangeOfType = function (dictRangeOf) {
      return new RangeOf(function (v) {
          if (v instanceof PureScript_CST_Types.TypeVar) {
              return rangeOf(rangeOfName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.TypeConstructor) {
              return rangeOf(rangeOfQualifiedName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.TypeWildcard) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.TypeHole) {
              return rangeOf(rangeOfName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.TypeString) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.TypeRow) {
              return rangeOf(rangeOfWrapped)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.TypeRecord) {
              return rangeOf(rangeOfWrapped)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.TypeForall) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfType(dictRangeOf))(v.value3)).end
              };
          };
          if (v instanceof PureScript_CST_Types.TypeKinded) {
              return {
                  start: (rangeOf(rangeOfType(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfType(dictRangeOf))(v.value2)).end
              };
          };
          if (v instanceof PureScript_CST_Types.TypeApp) {
              return {
                  start: (rangeOf(rangeOfType(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfType(dictRangeOf))(Data_Array_NonEmpty.last(v.value1))).end
              };
          };
          if (v instanceof PureScript_CST_Types.TypeOp) {
              return {
                  start: (rangeOf(rangeOfType(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfType(dictRangeOf))(Data_Tuple.snd(Data_Array_NonEmpty.last(v.value1)))).end
              };
          };
          if (v instanceof PureScript_CST_Types.TypeOpName) {
              return rangeOf(rangeOfQualifiedName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.TypeArrow) {
              return {
                  start: (rangeOf(rangeOfType(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfType(dictRangeOf))(v.value2)).end
              };
          };
          if (v instanceof PureScript_CST_Types.TypeArrowName) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.TypeConstrained) {
              return {
                  start: (rangeOf(rangeOfType(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfType(dictRangeOf))(v.value2)).end
              };
          };
          if (v instanceof PureScript_CST_Types.TypeParens) {
              return rangeOf(rangeOfWrapped)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.TypeUnaryRow) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfType(dictRangeOf))(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types["TypeError"]) {
              return rangeOf(dictRangeOf)(v.value0);
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 135, column 13 - line 185, column 16): " + [ v.constructor.name ]);
      });
  };
  var rangeOfBinder = function (dictRangeOf) {
      return new RangeOf(function (v) {
          if (v instanceof PureScript_CST_Types.BinderWildcard) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.BinderVar) {
              return rangeOf(rangeOfName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.BinderNamed) {
              return {
                  start: (rangeOf(rangeOfName)(v.value0)).start,
                  end: (rangeOf(rangeOfBinder(dictRangeOf))(v.value2)).end
              };
          };
          if (v instanceof PureScript_CST_Types.BinderConstructor) {
              var v1 = Data_Array.last(v.value1);
              if (v1 instanceof Data_Maybe.Nothing) {
                  return rangeOf(rangeOfQualifiedName)(v.value0);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return {
                      start: (rangeOf(rangeOfQualifiedName)(v.value0)).start,
                      end: (rangeOf(rangeOfBinder(dictRangeOf))(v1.value0)).end
                  };
              };
              throw new Error("Failed pattern match at PureScript.CST.Range (line 908, column 7 - line 914, column 12): " + [ v1.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.BinderBoolean) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.BinderChar) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.BinderString) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.BinderInt) {
              if (v.value0 instanceof Data_Maybe.Nothing) {
                  return v.value1.range;
              };
              if (v.value0 instanceof Data_Maybe.Just) {
                  return {
                      start: v.value0.value0.range.start,
                      end: v.value1.range.end
                  };
              };
              throw new Error("Failed pattern match at PureScript.CST.Range (line 922, column 7 - line 928, column 12): " + [ v.value0.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.BinderNumber) {
              if (v.value0 instanceof Data_Maybe.Nothing) {
                  return v.value1.range;
              };
              if (v.value0 instanceof Data_Maybe.Just) {
                  return {
                      start: v.value0.value0.range.start,
                      end: v.value1.range.end
                  };
              };
              throw new Error("Failed pattern match at PureScript.CST.Range (line 930, column 7 - line 936, column 12): " + [ v.value0.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.BinderArray) {
              return rangeOf(rangeOfWrapped)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.BinderRecord) {
              return rangeOf(rangeOfWrapped)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.BinderParens) {
              return rangeOf(rangeOfWrapped)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.BinderTyped) {
              return {
                  start: (rangeOf(rangeOfBinder(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfType(dictRangeOf))(v.value2)).end
              };
          };
          if (v instanceof PureScript_CST_Types.BinderOp) {
              return {
                  start: (rangeOf(rangeOfBinder(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfBinder(dictRangeOf))(Data_Tuple.snd(Data_Array_NonEmpty.last(v.value1)))).end
              };
          };
          if (v instanceof PureScript_CST_Types.BinderError) {
              return rangeOf(dictRangeOf)(v.value0);
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 898, column 13 - line 952, column 16): " + [ v.constructor.name ]);
      });
  };
  var rangeOfDataCtor = function (dictRangeOf) {
      return new RangeOf(function (v) {
          var v1 = (function () {
              var v2 = Data_Array.last(v.fields);
              if (v2 instanceof Data_Maybe.Nothing) {
                  return rangeOf(rangeOfName)(v.name);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  return rangeOf(rangeOfType(dictRangeOf))(v2.value0);
              };
              throw new Error("Failed pattern match at PureScript.CST.Range (line 391, column 17 - line 395, column 21): " + [ v2.constructor.name ]);
          })();
          return {
              start: (rangeOf(rangeOfName)(v.name)).start,
              end: v1.end
          };
      });
  };
  var rangeOfForeign = function (dictRangeOf) {
      return new RangeOf(function (v) {
          if (v instanceof PureScript_CST_Types.ForeignValue) {
              return rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ForeignData) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ForeignKind) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfName)(v.value1)).end
              };
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 642, column 13 - line 652, column 8): " + [ v.constructor.name ]);
      });
  };
  var rangeOfTypeVarBinding = new RangeOf(function (v) {
      if (v instanceof PureScript_CST_Types.TypeVarKinded) {
          return rangeOf(rangeOfWrapped)(v.value0);
      };
      if (v instanceof PureScript_CST_Types.TypeVarName) {
          return rangeOf(rangeOfName)(v.value0);
      };
      throw new Error("Failed pattern match at PureScript.CST.Range (line 240, column 13 - line 244, column 16): " + [ v.constructor.name ]);
  });
  var rangeOfWhere = function (dictRangeOf) {
      return new RangeOf(function (v) {
          if (v.bindings instanceof Data_Maybe.Nothing) {
              return rangeOf(rangeOfExpr(dictRangeOf))(v.expr);
          };
          if (v.bindings instanceof Data_Maybe.Just) {
              return {
                  start: (rangeOf(rangeOfExpr(dictRangeOf))(v.expr)).start,
                  end: (rangeOf(rangeOfLetBinding(dictRangeOf))(Data_Array_NonEmpty.last(v.bindings.value0.value1))).end
              };
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 995, column 40 - line 1001, column 8): " + [ v.bindings.constructor.name ]);
      });
  };
  var rangeOfLetBinding = function (dictRangeOf) {
      return new RangeOf(function (v) {
          if (v instanceof PureScript_CST_Types.LetBindingSignature) {
              return rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(v.value0);
          };
          if (v instanceof PureScript_CST_Types.LetBindingName) {
              return {
                  start: (rangeOf(rangeOfName)(v.value0.name)).start,
                  end: (rangeOf(rangeOfGuarded(dictRangeOf))(v.value0.guarded)).end
              };
          };
          if (v instanceof PureScript_CST_Types.LetBindingPattern) {
              return {
                  start: (rangeOf(rangeOfBinder(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfWhere(dictRangeOf))(v.value2)).end
              };
          };
          if (v instanceof PureScript_CST_Types.LetBindingError) {
              return rangeOf(dictRangeOf)(v.value0);
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 872, column 13 - line 884, column 16): " + [ v.constructor.name ]);
      });
  };
  var rangeOfGuardedExpr = function (dictRangeOf) {
      return new RangeOf(function (v) {
          return {
              start: v.bar.range.start,
              end: (rangeOf(rangeOfWhere(dictRangeOf))(v.where)).end
          };
      });
  };
  var rangeOfGuarded = function (dictRangeOf) {
      return new RangeOf(function (v) {
          if (v instanceof PureScript_CST_Types.Unconditional) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfWhere(dictRangeOf))(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types.Guarded) {
              return {
                  start: (rangeOf(rangeOfGuardedExpr(dictRangeOf))(Data_Array_NonEmpty.head(v.value0))).start,
                  end: (rangeOf(rangeOfGuardedExpr(dictRangeOf))(Data_Array_NonEmpty.last(v.value0))).end
              };
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 588, column 13 - line 596, column 8): " + [ v.constructor.name ]);
      });
  };
  var rangeOfExpr = function (dictRangeOf) {
      return new RangeOf(function (v) {
          if (v instanceof PureScript_CST_Types.ExprHole) {
              return rangeOf(rangeOfName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExprSection) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.ExprIdent) {
              return rangeOf(rangeOfQualifiedName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExprConstructor) {
              return rangeOf(rangeOfQualifiedName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExprBoolean) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.ExprChar) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.ExprString) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.ExprInt) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.ExprNumber) {
              return v.value0.range;
          };
          if (v instanceof PureScript_CST_Types.ExprArray) {
              return rangeOf(rangeOfWrapped)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExprRecord) {
              return rangeOf(rangeOfWrapped)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExprParens) {
              return rangeOf(rangeOfWrapped)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExprTyped) {
              return {
                  start: (rangeOf(rangeOfExpr(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfType(dictRangeOf))(v.value2)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprInfix) {
              return {
                  start: (rangeOf(rangeOfExpr(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfExpr(dictRangeOf))(Data_Tuple.snd(Data_Array_NonEmpty.last(v.value1)))).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprOp) {
              return {
                  start: (rangeOf(rangeOfExpr(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfExpr(dictRangeOf))(Data_Tuple.snd(Data_Array_NonEmpty.last(v.value1)))).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprOpName) {
              return rangeOf(rangeOfQualifiedName)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExprNegate) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfExpr(dictRangeOf))(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprRecordAccessor) {
              return {
                  start: (rangeOf(rangeOfExpr(dictRangeOf))(v.value0.expr)).start,
                  end: (rangeOf(rangeOfSeparated(rangeOfName))(v.value0.path)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprRecordUpdate) {
              return {
                  start: (rangeOf(rangeOfExpr(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfWrapped)(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprApp) {
              return {
                  start: (rangeOf(rangeOfExpr(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfExpr(dictRangeOf))(Data_Array_NonEmpty.last(v.value1))).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprLambda) {
              return {
                  start: v.value0.symbol.range.start,
                  end: (rangeOf(rangeOfExpr(dictRangeOf))(v.value0.body)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprIf) {
              return {
                  start: v.value0.keyword.range.start,
                  end: (rangeOf(rangeOfExpr(dictRangeOf))(v["value0"]["false"])).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprCase) {
              return {
                  start: v.value0.keyword.range.start,
                  end: (rangeOf(rangeOfGuarded(dictRangeOf))(Data_Tuple.snd(Data_Array_NonEmpty.last(v.value0.branches)))).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprLet) {
              return {
                  start: v.value0.keyword.range.start,
                  end: (rangeOf(rangeOfExpr(dictRangeOf))(v.value0.body)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprDo) {
              return {
                  start: v.value0.keyword.range.start,
                  end: (rangeOf(rangeOfDoStatement(dictRangeOf))(Data_Array_NonEmpty.last(v.value0.statements))).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprAdo) {
              return {
                  start: v.value0.keyword.range.start,
                  end: (rangeOf(rangeOfExpr(dictRangeOf))(v.value0.result)).end
              };
          };
          if (v instanceof PureScript_CST_Types.ExprError) {
              return rangeOf(dictRangeOf)(v.value0);
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 682, column 13 - line 762, column 16): " + [ v.constructor.name ]);
      });
  };
  var rangeOfDoStatement = function (dictRangeOf) {
      return new RangeOf(function (v) {
          if (v instanceof PureScript_CST_Types.DoLet) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfLetBinding(dictRangeOf))(Data_Array_NonEmpty.last(v.value1))).end
              };
          };
          if (v instanceof PureScript_CST_Types.DoDiscard) {
              return rangeOf(rangeOfExpr(dictRangeOf))(v.value0);
          };
          if (v instanceof PureScript_CST_Types.DoBind) {
              return {
                  start: (rangeOf(rangeOfBinder(dictRangeOf))(v.value0)).start,
                  end: (rangeOf(rangeOfExpr(dictRangeOf))(v.value2)).end
              };
          };
          if (v instanceof PureScript_CST_Types.DoError) {
              return rangeOf(dictRangeOf)(v.value0);
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 846, column 13 - line 858, column 16): " + [ v.constructor.name ]);
      });
  };
  var rangeOfInstanceBinding = function (dictRangeOf) {
      return new RangeOf(function (v) {
          if (v instanceof PureScript_CST_Types.InstanceBindingSignature) {
              return rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(v.value0);
          };
          if (v instanceof PureScript_CST_Types.InstanceBindingName) {
              return {
                  start: (rangeOf(rangeOfName)(v.value0.name)).start,
                  end: (rangeOf(rangeOfGuarded(dictRangeOf))(v.value0.guarded)).end
              };
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 664, column 13 - line 670, column 8): " + [ v.constructor.name ]);
      });
  };
  var rangeOfInstance = function (dictRangeOf) {
      return new RangeOf(function (v) {
          var v1 = (function () {
              if (v.body instanceof Data_Maybe.Nothing) {
                  var v2 = Data_Array.last(v.head.types);
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return rangeOf(rangeOfQualifiedName)(v.head.className);
                  };
                  if (v2 instanceof Data_Maybe.Just) {
                      return rangeOf(rangeOfType(dictRangeOf))(v2.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Range (line 566, column 11 - line 570, column 25): " + [ v2.constructor.name ]);
              };
              if (v.body instanceof Data_Maybe.Just) {
                  return rangeOf(rangeOfInstanceBinding(dictRangeOf))(Data_Array_NonEmpty.last(v.body.value0.value1));
              };
              throw new Error("Failed pattern match at PureScript.CST.Range (line 564, column 17 - line 572, column 42): " + [ v.body.constructor.name ]);
          })();
          return {
              start: v.head.keyword.range.start,
              end: v1.end
          };
      });
  };
  var rangeOfDecl = function (dictRangeOf) {
      return new RangeOf(function (v) {
          if (v instanceof PureScript_CST_Types.DeclData) {
              var v1 = (function () {
                  if (v.value1 instanceof Data_Maybe.Nothing) {
                      var v2 = Data_Array.last(v.value0.vars);
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return rangeOf(rangeOfName)(v.value0.name);
                      };
                      if (v2 instanceof Data_Maybe.Just) {
                          return rangeOf(rangeOfTypeVarBinding)(v2.value0);
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Range (line 410, column 13 - line 414, column 28): " + [ v2.constructor.name ]);
                  };
                  if (v.value1 instanceof Data_Maybe.Just) {
                      return rangeOf(rangeOfDataCtor(dictRangeOf))(Data_Maybe.maybe(v.value1.value0.value1.head)(Data_Tuple.snd)(Data_Array.last(v.value1.value0.value1.tail)));
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Range (line 408, column 19 - line 416, column 55): " + [ v.value1.constructor.name ]);
              })();
              return {
                  start: v.value0.keyword.range.start,
                  end: v1.end
              };
          };
          if (v instanceof PureScript_CST_Types.DeclType) {
              return {
                  start: v.value0.keyword.range.start,
                  end: (rangeOf(rangeOfType(dictRangeOf))(v.value2)).end
              };
          };
          if (v instanceof PureScript_CST_Types.DeclNewtype) {
              return {
                  start: v.value0.keyword.range.start,
                  end: (rangeOf(rangeOfType(dictRangeOf))(v.value3)).end
              };
          };
          if (v instanceof PureScript_CST_Types.DeclClass) {
              var v1 = (function () {
                  if (v.value1 instanceof Data_Maybe.Nothing) {
                      if (v.value0.fundeps instanceof Data_Maybe.Nothing) {
                          var v2 = Data_Array.last(v.value0.vars);
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return rangeOf(rangeOfName)(v.value0.name);
                          };
                          if (v2 instanceof Data_Maybe.Just) {
                              return rangeOf(rangeOfTypeVarBinding)(v2.value0);
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Range (line 434, column 17 - line 438, column 32): " + [ v2.constructor.name ]);
                      };
                      if (v.value0.fundeps instanceof Data_Maybe.Just) {
                          return rangeOf(rangeOfSeparated(rangeOfClassFundep))(v.value0.fundeps.value0.value1);
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Range (line 432, column 13 - line 440, column 32): " + [ v.value0.fundeps.constructor.name ]);
                  };
                  if (v.value1 instanceof Data_Maybe.Just) {
                      return rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(Data_Array_NonEmpty.last(v.value1.value0.value1));
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Range (line 430, column 19 - line 442, column 44): " + [ v.value1.constructor.name ]);
              })();
              return {
                  start: v.value0.keyword.range.start,
                  end: v1.end
              };
          };
          if (v instanceof PureScript_CST_Types.DeclInstanceChain) {
              return rangeOf(rangeOfSeparated(rangeOfInstance(dictRangeOf)))(v.value0);
          };
          if (v instanceof PureScript_CST_Types.DeclDerive) {
              var v1 = (function () {
                  var v2 = Data_Array.last(v.value2.types);
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return rangeOf(rangeOfQualifiedName)(v.value2.className);
                  };
                  if (v2 instanceof Data_Maybe.Just) {
                      return rangeOf(rangeOfType(dictRangeOf))(v2.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Range (line 450, column 19 - line 454, column 23): " + [ v2.constructor.name ]);
              })();
              return {
                  start: v.value0.range.start,
                  end: v1.end
              };
          };
          if (v instanceof PureScript_CST_Types.DeclKindSignature) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(v.value1)).end
              };
          };
          if (v instanceof PureScript_CST_Types.DeclSignature) {
              return rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(v.value0);
          };
          if (v instanceof PureScript_CST_Types.DeclValue) {
              return {
                  start: (rangeOf(rangeOfName)(v.value0.name)).start,
                  end: (rangeOf(rangeOfGuarded(dictRangeOf))(v.value0.guarded)).end
              };
          };
          if (v instanceof PureScript_CST_Types.DeclFixity) {
              return {
                  start: v.value0.keyword.value0.range.start,
                  end: (rangeOf(rangeOfFixityOp)(v.value0.operator)).end
              };
          };
          if (v instanceof PureScript_CST_Types.DeclForeign) {
              return {
                  start: v.value0.range.start,
                  end: (rangeOf(rangeOfForeign(dictRangeOf))(v.value2)).end
              };
          };
          if (v instanceof PureScript_CST_Types.DeclRole) {
              return {
                  start: v.value0.range.start,
                  end: (Data_Tuple.fst(Data_Array_NonEmpty.last(v.value3))).range.end
              };
          };
          if (v instanceof PureScript_CST_Types.DeclError) {
              return rangeOf(dictRangeOf)(v.value0);
          };
          throw new Error("Failed pattern match at PureScript.CST.Range (line 405, column 13 - line 481, column 16): " + [ v.constructor.name ]);
      });
  };
  exports["rangeOf"] = rangeOf;
  exports["rangeOfVoid"] = rangeOfVoid;
  exports["rangeOfName"] = rangeOfName;
  exports["rangeOfQualifiedName"] = rangeOfQualifiedName;
  exports["rangeOfWrapped"] = rangeOfWrapped;
  exports["rangeOfSeparated"] = rangeOfSeparated;
  exports["rangeOfLabeled"] = rangeOfLabeled;
  exports["rangeOfType"] = rangeOfType;
  exports["rangeOfExport"] = rangeOfExport;
  exports["rangeOfDataMembers"] = rangeOfDataMembers;
  exports["rangeOfImportDecl"] = rangeOfImportDecl;
  exports["rangeOfImport"] = rangeOfImport;
  exports["rangeOfDataCtor"] = rangeOfDataCtor;
  exports["rangeOfDecl"] = rangeOfDecl;
  exports["rangeOfInstance"] = rangeOfInstance;
  exports["rangeOfExpr"] = rangeOfExpr;
  exports["rangeOfDoStatement"] = rangeOfDoStatement;
  exports["rangeOfBinder"] = rangeOfBinder;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Format"] = $PS["Format"] || {};
  var exports = $PS["Format"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Void = $PS["Data.Void"];
  var PureScript_CST_Print = $PS["PureScript.CST.Print"];
  var PureScript_CST_Range = $PS["PureScript.CST.Range"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var SingleLine = (function () {
      function SingleLine() {

      };
      SingleLine.value = new SingleLine();
      return SingleLine;
  })();
  var MultipleLines = (function () {
      function MultipleLines() {

      };
      MultipleLines.value = new MultipleLines();
      return MultipleLines;
  })();
  var space = " ";
  var singleOrMultilineFromRange = function (v) {
      var $149 = v.start.line === v.end.line;
      if ($149) {
          return SingleLine.value;
      };
      return MultipleLines.value;
  };
  var singleOrMultilineBetween = function (dictRangeOf) {
      return function (dictRangeOf1) {
          return function (a) {
              return function (b) {
                  var v = PureScript_CST_Range.rangeOf(dictRangeOf)(a);
                  var v1 = PureScript_CST_Range.rangeOf(dictRangeOf1)(b);
                  return singleOrMultilineFromRange({
                      start: v.start,
                      end: v1.end
                  });
              };
          };
      };
  };
  var singleOrMultiline = function (dictRangeOf) {
      return function (value) {
          return singleOrMultilineFromRange(PureScript_CST_Range.rangeOf(dictRangeOf)(value));
      };
  };
  var rangeOfSeparated = function (f) {
      return function (separated) {
          var headRange = f(separated.head);
          var tailRange = Data_Maybe.maybe(headRange)(f)(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_Array.last(separated.tail))(Data_Tuple.snd));
          return {
              start: headRange.start,
              end: tailRange.end
          };
      };
  };
  var rangeOfPatternGuard = function (v) {
      var v1 = Data_Maybe.maybe(PureScript_CST_Range.rangeOf(PureScript_CST_Range.rangeOfExpr(PureScript_CST_Range.rangeOfVoid))(v.expr))((function () {
          var $1087 = PureScript_CST_Range.rangeOf(PureScript_CST_Range.rangeOfBinder(PureScript_CST_Range.rangeOfVoid));
          return function ($1088) {
              return $1087(Data_Tuple.fst($1088));
          };
      })())(v.binder);
      var v2 = PureScript_CST_Range.rangeOf(PureScript_CST_Range.rangeOfExpr(PureScript_CST_Range.rangeOfVoid))(v.expr);
      return {
          start: v1.start,
          end: v2.end
      };
  };
  var rangeOfInstanceHead = function (v) {
      var v1 = (function () {
          var v2 = Data_Array.last(v.types);
          if (v2 instanceof Data_Maybe.Nothing) {
              return PureScript_CST_Range.rangeOf(PureScript_CST_Range.rangeOfQualifiedName)(v.className);
          };
          if (v2 instanceof Data_Maybe.Just) {
              return PureScript_CST_Range.rangeOf(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(v2.value0);
          };
          throw new Error("Failed pattern match at Format (line 37, column 15 - line 39, column 28): " + [ v2.constructor.name ]);
      })();
      return singleOrMultilineFromRange({
          start: v.keyword.range.start,
          end: v1.end
      });
  };
  var newline = "\x0a";
  var formatComment = function (v) {
      if (v instanceof PureScript_CST_Types.Comment) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof PureScript_CST_Types.Space) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof PureScript_CST_Types.Line) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Format (line 1746, column 17 - line 1749, column 26): " + [ v.constructor.name ]);
  };
  var blank = "";
  var formatCommentLeading = function (indent) {
      return function (prefix) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.Comment) {
                  return prefix + (v.value0 + (newline + indent));
              };
              if (v instanceof PureScript_CST_Types.Line) {
                  return blank;
              };
              if (v instanceof PureScript_CST_Types.Space) {
                  return blank;
              };
              throw new Error("Failed pattern match at Format (line 1703, column 38 - line 1707, column 23): " + [ v.constructor.name ]);
          };
      };
  };
  var formatCommentTrailing = function (prefix) {
      return function (comment$prime$prime) {
          if (comment$prime$prime instanceof PureScript_CST_Types.Comment) {
              return prefix + (space + comment$prime$prime.value0);
          };
          if (comment$prime$prime instanceof PureScript_CST_Types.Line) {
              return blank;
          };
          if (comment$prime$prime instanceof PureScript_CST_Types.Space) {
              return blank;
          };
          throw new Error("Failed pattern match at Format (line 1713, column 42 - line 1716, column 23): " + [ comment$prime$prime.constructor.name ]);
      };
  };
  var formatCommentsLeading = function (indent) {
      return function (prefix) {
          return function (commentsLeading$prime) {
              if (commentsLeading$prime.length === 0) {
                  return blank;
              };
              return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(formatCommentLeading(indent)(prefix))(commentsLeading$prime);
          };
      };
  };
  var formatCommentsTrailing = function (prefix) {
      return function (commentsTrailing$prime) {
          if (commentsTrailing$prime.length === 0) {
              return blank;
          };
          return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(formatCommentTrailing(prefix))(commentsTrailing$prime);
      };
  };
  var formatSourceToken = function (settings) {
      return function (indent) {
          return function (prefix) {
              return function (v) {
                  var printWithStyle = function (style) {
                      return function (v1) {
                          if (v1 instanceof PureScript_CST_Types.TokLeftArrow) {
                              if (style instanceof PureScript_CST_Types.ASCII) {
                                  return "<-";
                              };
                              if (style instanceof PureScript_CST_Types.Unicode) {
                                  return "\u2190";
                              };
                              throw new Error("Failed pattern match at Format (line 1673, column 9 - line 1675, column 29): " + [ style.constructor.name ]);
                          };
                          if (v1 instanceof PureScript_CST_Types.TokRightArrow) {
                              if (style instanceof PureScript_CST_Types.ASCII) {
                                  return "->";
                              };
                              if (style instanceof PureScript_CST_Types.Unicode) {
                                  return "\u2192";
                              };
                              throw new Error("Failed pattern match at Format (line 1677, column 9 - line 1679, column 29): " + [ style.constructor.name ]);
                          };
                          if (v1 instanceof PureScript_CST_Types.TokRightFatArrow) {
                              if (style instanceof PureScript_CST_Types.ASCII) {
                                  return "=>";
                              };
                              if (style instanceof PureScript_CST_Types.Unicode) {
                                  return "\u21d2";
                              };
                              throw new Error("Failed pattern match at Format (line 1681, column 9 - line 1683, column 29): " + [ style.constructor.name ]);
                          };
                          if (v1 instanceof PureScript_CST_Types.TokDoubleColon) {
                              if (style instanceof PureScript_CST_Types.ASCII) {
                                  return "::";
                              };
                              if (style instanceof PureScript_CST_Types.Unicode) {
                                  return "\u2237";
                              };
                              throw new Error("Failed pattern match at Format (line 1685, column 9 - line 1687, column 29): " + [ style.constructor.name ]);
                          };
                          if (v1 instanceof PureScript_CST_Types.TokForall) {
                              if (style instanceof PureScript_CST_Types.ASCII) {
                                  return "forall";
                              };
                              if (style instanceof PureScript_CST_Types.Unicode) {
                                  return "\u2200";
                              };
                              throw new Error("Failed pattern match at Format (line 1689, column 9 - line 1691, column 29): " + [ style.constructor.name ]);
                          };
                          if (v1 instanceof PureScript_CST_Types.TokSymbolArrow) {
                              if (style instanceof PureScript_CST_Types.ASCII) {
                                  return "(->)";
                              };
                              if (style instanceof PureScript_CST_Types.Unicode) {
                                  return "(\u2192)";
                              };
                              throw new Error("Failed pattern match at Format (line 1693, column 9 - line 1695, column 31): " + [ style.constructor.name ]);
                          };
                          return PureScript_CST_Print.printToken(v1);
                      };
                  };
                  var print = (function () {
                      if (settings.sourceStyle instanceof Data_Maybe.Nothing) {
                          return PureScript_CST_Print.printToken;
                      };
                      if (settings.sourceStyle instanceof Data_Maybe.Just) {
                          return printWithStyle(settings.sourceStyle.value0);
                      };
                      throw new Error("Failed pattern match at Format (line 1668, column 13 - line 1670, column 41): " + [ settings.sourceStyle.constructor.name ]);
                  })();
                  return formatCommentsLeading(indent)(prefix)(v.leadingComments) + (prefix + (print(v.value) + formatCommentsTrailing(prefix)(v.trailingComments)));
              };
          };
      };
  };
  var formatLabeled = function (dictRangeOf) {
      return function (dictRangeOf1) {
          return function (v) {
              return function (indent$prime) {
                  return function (formatLabel) {
                      return function (formatValue) {
                          return function (v1) {
                              var v2 = (function () {
                                  var v3 = singleOrMultiline(PureScript_CST_Range.rangeOfLabeled(dictRangeOf)(dictRangeOf1))(v1);
                                  if (v3 instanceof MultipleLines) {
                                      return {
                                          indent: indent$prime + v.indentation,
                                          prefix: newline + (indent$prime + v.indentation)
                                      };
                                  };
                                  if (v3 instanceof SingleLine) {
                                      return {
                                          indent: indent$prime,
                                          prefix: space
                                      };
                                  };
                                  throw new Error("Failed pattern match at Format (line 1547, column 24 - line 1552, column 53): " + [ v3.constructor.name ]);
                              })();
                              return formatLabel(v1.label) + (formatSourceToken(v)(v2.indent)(space)(v1.separator) + (v2.prefix + formatValue(v2.indent)(v1.value)));
                          };
                      };
                  };
              };
          };
      };
  };
  var formatName = function (settings) {
      return function (indent) {
          return function (prefix) {
              return function (v) {
                  return formatSourceToken(settings)(indent)(prefix)(v.token);
              };
          };
      };
  };
  var formatClassFundep = function (settings) {
      return function (indent) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.FundepDetermined) {
                  return formatSourceToken(settings)(indent)(blank)(v.value0) + Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(formatName(settings)(indent)(space))(v.value1);
              };
              if (v instanceof PureScript_CST_Types.FundepDetermines) {
                  return Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(function (name) {
                      return formatName(settings)(indent)(blank)(name) + space;
                  })(v.value0) + (formatSourceToken(settings)(indent)(blank)(v.value1) + Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(formatName(settings)(indent)(space))(v.value2));
              };
              throw new Error("Failed pattern match at Format (line 1358, column 37 - line 1365, column 62): " + [ v.constructor.name ]);
          };
      };
  };
  var formatQualifiedName = function (settings) {
      return function (indent) {
          return function (prefix) {
              return function (v) {
                  return formatSourceToken(settings)(indent)(prefix)(v.token);
              };
          };
      };
  };
  var formatRole = function (v) {
      return function (indent) {
          return function (v1) {
              return formatSourceToken(v)(v.indentation)(indent)(v1.value0);
          };
      };
  };
  var formatCommentsTrailingModule = function (commentsTrailing$prime) {
      var comments = Data_Functor.map(Data_Functor.functorArray)(formatComment)(commentsTrailing$prime);
      var v = Data_Array_NonEmpty.fromArray(Data_Array.catMaybes(comments));
      if (v instanceof Data_Maybe.Nothing) {
          return blank;
      };
      if (v instanceof Data_Maybe.Just) {
          return newline + (Data_Foldable.fold(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(Data_Array_NonEmpty.intersperse(newline)(v.value0)) + newline);
      };
      throw new Error("Failed pattern match at Format (line 1741, column 3 - line 1743, column 82): " + [ v.constructor.name ]);
  };
  var formatFixityOp = function (settings) {
      return function (indent) {
          return function (fixityOp$prime) {
              if (fixityOp$prime instanceof PureScript_CST_Types.FixityType) {
                  return formatSourceToken(settings)(indent)(blank)(fixityOp$prime.value0) + (formatQualifiedName(settings)(indent)(space)(fixityOp$prime.value1) + (formatSourceToken(settings)(indent)(space)(fixityOp$prime.value2) + formatName(settings)(indent)(space)(fixityOp$prime.value3)));
              };
              if (fixityOp$prime instanceof PureScript_CST_Types.FixityValue) {
                  return formatQualifiedName(settings)(indent)(blank)(fixityOp$prime.value0) + (formatSourceToken(settings)(indent)(space)(fixityOp$prime.value1) + formatName(settings)(indent)(space)(fixityOp$prime.value2));
              };
              throw new Error("Failed pattern match at Format (line 454, column 44 - line 463, column 45): " + [ fixityOp$prime.constructor.name ]);
          };
      };
  };
  var formatFixityFields = function (settings) {
      return function (indent) {
          return function (v) {
              return formatSourceToken(settings)(indent)(blank)(v.keyword.value0) + (formatSourceToken(settings)(indent)(space)(v.prec.value0) + (space + formatFixityOp(settings)(indent)(v.operator)));
          };
      };
  };
  var formatRecordLabeled = function (dictRangeOf) {
      return function (v) {
          return function (indent$prime) {
              return function (f) {
                  return function (recordLabeled$prime) {
                      if (recordLabeled$prime instanceof PureScript_CST_Types.RecordPun) {
                          return formatName(v)(indent$prime)(blank)(recordLabeled$prime.value0);
                      };
                      if (recordLabeled$prime instanceof PureScript_CST_Types.RecordField) {
                          var v1 = (function () {
                              var v2 = singleOrMultilineBetween(PureScript_CST_Range.rangeOfName)(dictRangeOf)(recordLabeled$prime.value0)(recordLabeled$prime.value2);
                              if (v2 instanceof MultipleLines) {
                                  return new Data_Tuple.Tuple(indent$prime + (v.indentation + v.indentation), newline + (indent$prime + (v.indentation + v.indentation)));
                              };
                              if (v2 instanceof SingleLine) {
                                  return new Data_Tuple.Tuple(indent$prime, space);
                              };
                              throw new Error("Failed pattern match at Format (line 1042, column 26 - line 1044, column 39): " + [ v2.constructor.name ]);
                          })();
                          return formatName(v)(indent$prime)(blank)(recordLabeled$prime.value0) + (formatSourceToken(v)(indent$prime)(blank)(recordLabeled$prime.value1) + (v1.value1 + f(v1.value0)(recordLabeled$prime.value2)));
                      };
                      throw new Error("Failed pattern match at Format (line 1037, column 73 - line 1048, column 20): " + [ recordLabeled$prime.constructor.name ]);
                  };
              };
          };
      };
  };
  var formatSeparated = function (settings) {
      return function (lines) {
          return function (indent) {
              return function (prefix$prime) {
                  return function (formatValue) {
                      return function (v) {
                          var prefix = (function () {
                              if (lines instanceof MultipleLines) {
                                  return newline + indent;
                              };
                              if (lines instanceof SingleLine) {
                                  return blank;
                              };
                              throw new Error("Failed pattern match at Format (line 1638, column 12 - line 1640, column 24): " + [ lines.constructor.name ]);
                          })();
                          var go = function (v1) {
                              return prefix + (formatSourceToken(settings)(indent)(blank)(v1.value0) + (prefix$prime + formatValue(v1.value1)));
                          };
                          return formatValue(v.head) + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(go)(v.tail);
                      };
                  };
              };
          };
      };
  };
  var formatWrapped = function (settings) {
      return function (indent) {
          return function (formatValue) {
              return function (v) {
                  var v1 = (function () {
                      var v2 = singleOrMultiline(PureScript_CST_Range.rangeOfWrapped)(v);
                      if (v2 instanceof MultipleLines) {
                          return {
                              before: space,
                              after: newline + indent
                          };
                      };
                      if (v2 instanceof SingleLine) {
                          return {
                              before: blank,
                              after: blank
                          };
                      };
                      throw new Error("Failed pattern match at Format (line 1765, column 23 - line 1767, column 50): " + [ v2.constructor.name ]);
                  })();
                  return formatSourceToken(settings)(indent)(blank)(v.open) + (v1.before + (formatValue(v.value) + (v1.after + formatSourceToken(settings)(indent)(blank)(v.close))));
              };
          };
      };
  };
  var formatArrayNonEmpty = function (dictRangeOf) {
      return function (settings) {
          return function (lines) {
              return function (indent) {
                  return function (formatValue) {
                      var v = (function () {
                          if (lines instanceof MultipleLines) {
                              return new Data_Tuple.Tuple(blank, blank);
                          };
                          if (lines instanceof SingleLine) {
                              return new Data_Tuple.Tuple(space, space);
                          };
                          throw new Error("Failed pattern match at Format (line 1264, column 21 - line 1266, column 33): " + [ lines.constructor.name ]);
                      })();
                      var formatOne = function (v1) {
                          return v.value0 + (formatSeparated(settings)(singleOrMultiline(PureScript_CST_Range.rangeOfSeparated(dictRangeOf))(v1))(indent)(space)(formatValue)(v1) + v.value1);
                      };
                      return formatWrapped(settings)(indent)(formatOne);
                  };
              };
          };
      };
  };
  var formatArray = function (dictRangeOf) {
      return function (settings) {
          return function (lines) {
              return function (indent) {
                  return function (formatValue) {
                      return function (v) {
                          if (v.value instanceof Data_Maybe.Nothing) {
                              return formatSourceToken(settings)(indent)(blank)(v.open) + formatSourceToken(settings)(indent)(blank)(v.close);
                          };
                          if (v.value instanceof Data_Maybe.Just) {
                              return formatArrayNonEmpty(dictRangeOf)(settings)(lines)(indent)(formatValue)({
                                  open: v.open,
                                  value: v.value.value0,
                                  close: v.close
                              });
                          };
                          throw new Error("Failed pattern match at Format (line 1240, column 49 - line 1251, column 50): " + [ v.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var formatDelimited = function (settings) {
      return function (indent) {
          return function (formatValue) {
              return function (delimited) {
                  var lines = singleOrMultiline(PureScript_CST_Range.rangeOfWrapped)(delimited);
                  return formatWrapped(settings)(indent)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(formatSeparated(settings)(lines)(indent)(space)(formatValue)))(delimited);
              };
          };
      };
  };
  var formatDataMembers = function (v) {
      return function (indent$prime) {
          return function (dataMembers$prime) {
              var span = singleOrMultiline(PureScript_CST_Range.rangeOfDataMembers)(dataMembers$prime);
              if (dataMembers$prime instanceof PureScript_CST_Types.DataAll) {
                  return formatSourceToken(v)(indent$prime)(blank)(dataMembers$prime.value0);
              };
              if (dataMembers$prime instanceof PureScript_CST_Types.DataEnumerated) {
                  var v1 = (function () {
                      if (span instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indent$prime + v.indentation, newline + indent$prime);
                      };
                      if (span instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime, blank);
                      };
                      throw new Error("Failed pattern match at Format (line 261, column 28 - line 263, column 41): " + [ span.constructor.name ]);
                  })();
                  return v1.value1 + formatDelimited(v)(indent$prime)(formatName(v)(v1.value0)(blank))(dataMembers$prime.value0);
              };
              throw new Error("Failed pattern match at Format (line 256, column 67 - line 269, column 21): " + [ dataMembers$prime.constructor.name ]);
          };
      };
  };
  var formatExport = function (v) {
      return function (indent$prime) {
          return function (export$prime) {
              var lines = singleOrMultiline(PureScript_CST_Range.rangeOfExport(PureScript_CST_Range.rangeOfVoid))(export$prime);
              if (export$prime instanceof PureScript_CST_Types.ExportClass) {
                  return formatSourceToken(v)(indent$prime)(blank)(export$prime.value0) + formatName(v)(indent$prime)(space)(export$prime.value1);
              };
              if (export$prime instanceof PureScript_CST_Types.ExportKind) {
                  return formatSourceToken(v)(indent$prime)(blank)(export$prime.value0) + formatName(v)(indent$prime)(space)(export$prime.value1);
              };
              if (export$prime instanceof PureScript_CST_Types.ExportModule) {
                  return formatSourceToken(v)(indent$prime)(blank)(export$prime.value0) + formatName(v)(indent$prime)(space)(export$prime.value1);
              };
              if (export$prime instanceof PureScript_CST_Types.ExportOp) {
                  return formatName(v)(indent$prime)(blank)(export$prime.value0);
              };
              if (export$prime instanceof PureScript_CST_Types.ExportType) {
                  var indentTrick = indent$prime + v.indentation;
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indentTrick, newline + indentTrick);
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime, blank);
                      };
                      throw new Error("Failed pattern match at Format (line 128, column 26 - line 130, column 39): " + [ lines.constructor.name ]);
                  })();
                  return formatName(v)(indent$prime)(blank)(export$prime.value0) + (v1.value1 + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(formatDataMembers(v)(v1.value0))(export$prime.value1));
              };
              if (export$prime instanceof PureScript_CST_Types.ExportTypeOp) {
                  return formatSourceToken(v)(indent$prime)(blank)(export$prime.value0) + formatName(v)(indent$prime)(space)(export$prime.value1);
              };
              if (export$prime instanceof PureScript_CST_Types.ExportValue) {
                  return formatName(v)(indent$prime)(blank)(export$prime.value0);
              };
              if (export$prime instanceof PureScript_CST_Types.ExportError) {
                  return Data_Void.absurd(export$prime.value0);
              };
              throw new Error("Failed pattern match at Format (line 112, column 57 - line 139, column 32): " + [ export$prime.constructor.name ]);
          };
      };
  };
  var formatImport = function (v) {
      return function (indent$prime) {
          return function (import$prime$prime) {
              var lines = singleOrMultiline(PureScript_CST_Range.rangeOfImport(PureScript_CST_Range.rangeOfVoid))(import$prime$prime);
              if (import$prime$prime instanceof PureScript_CST_Types.ImportClass) {
                  return formatSourceToken(v)(indent$prime)(blank)(import$prime$prime.value0) + formatName(v)(indent$prime)(space)(import$prime$prime.value1);
              };
              if (import$prime$prime instanceof PureScript_CST_Types.ImportKind) {
                  return formatSourceToken(v)(indent$prime)(blank)(import$prime$prime.value0) + formatName(v)(indent$prime)(space)(import$prime$prime.value1);
              };
              if (import$prime$prime instanceof PureScript_CST_Types.ImportOp) {
                  return formatName(v)(indent$prime)(blank)(import$prime$prime.value0);
              };
              if (import$prime$prime instanceof PureScript_CST_Types.ImportType) {
                  var indent = (function () {
                      if (lines instanceof MultipleLines) {
                          return indent$prime + v.indentation;
                      };
                      if (lines instanceof SingleLine) {
                          return indent$prime;
                      };
                      throw new Error("Failed pattern match at Format (line 237, column 16 - line 239, column 30): " + [ lines.constructor.name ]);
                  })();
                  return formatName(v)(indent$prime)(blank)(import$prime$prime.value0) + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(formatDataMembers(v)(indent))(import$prime$prime.value1);
              };
              if (import$prime$prime instanceof PureScript_CST_Types.ImportTypeOp) {
                  return formatSourceToken(v)(indent$prime)(blank)(import$prime$prime.value0) + formatName(v)(indent$prime)(space)(import$prime$prime.value1);
              };
              if (import$prime$prime instanceof PureScript_CST_Types.ImportValue) {
                  return formatName(v)(indent$prime)(blank)(import$prime$prime.value0);
              };
              if (import$prime$prime instanceof PureScript_CST_Types.ImportError) {
                  return Data_Void.absurd(import$prime$prime.value0);
              };
              throw new Error("Failed pattern match at Format (line 226, column 58 - line 247, column 32): " + [ import$prime$prime.constructor.name ]);
          };
      };
  };
  var formatDelimitedNonEmpty = function (dictRangeOf) {
      return function (settings) {
          return function (lines) {
              return function (indent) {
                  return function (formatValue) {
                      return formatWrapped(settings)(indent)(formatSeparated(settings)(lines)(indent)(space)(formatValue));
                  };
              };
          };
      };
  };
  var formatExports = function (v) {
      return function (exports$prime$prime) {
          if (exports$prime$prime instanceof Data_Maybe.Nothing) {
              return blank;
          };
          if (exports$prime$prime instanceof Data_Maybe.Just) {
              var lines = singleOrMultiline(PureScript_CST_Range.rangeOfWrapped)(exports$prime$prime.value0);
              var prefix = (function () {
                  if (lines instanceof MultipleLines) {
                      return newline + v.indentation;
                  };
                  if (lines instanceof SingleLine) {
                      return space;
                  };
                  throw new Error("Failed pattern match at Format (line 94, column 16 - line 96, column 28): " + [ lines.constructor.name ]);
              })();
              return prefix + formatDelimitedNonEmpty(PureScript_CST_Range.rangeOfExport(PureScript_CST_Range.rangeOfVoid))(v)(lines)(v.indentation)(formatExport(v)(v.indentation))(exports$prime$prime.value0);
          };
          throw new Error("Failed pattern match at Format (line 88, column 52 - line 105, column 39): " + [ exports$prime$prime.constructor.name ]);
      };
  };
  var formatImportDeclaration = function (v) {
      return function (indent$prime$prime) {
          return function (importDecl$prime) {
              var span = singleOrMultiline(PureScript_CST_Range.rangeOfImportDecl)(importDecl$prime);
              var indent$prime = indent$prime$prime + v.indentation;
              return formatSourceToken(v)(indent$prime$prime)(blank)(importDecl$prime.keyword) + (formatName(v)(indent$prime$prime)(space)(importDecl$prime.module) + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v1) {
                  if (v1.value0 instanceof Data_Maybe.Just) {
                      var indent = indent$prime + v.indentation;
                      var importPrefix = (function () {
                          if (span instanceof MultipleLines) {
                              return newline + indent;
                          };
                          if (span instanceof SingleLine) {
                              return space;
                          };
                          throw new Error("Failed pattern match at Format (line 181, column 34 - line 183, column 40): " + [ span.constructor.name ]);
                      })();
                      var hidingPrefix = (function () {
                          if (span instanceof MultipleLines) {
                              return newline + indent$prime;
                          };
                          if (span instanceof SingleLine) {
                              return space;
                          };
                          throw new Error("Failed pattern match at Format (line 177, column 34 - line 179, column 40): " + [ span.constructor.name ]);
                      })();
                      return hidingPrefix + (formatSourceToken(v)(indent$prime)(blank)(v1.value0.value0) + (importPrefix + formatDelimitedNonEmpty(PureScript_CST_Range.rangeOfImport(PureScript_CST_Range.rangeOfVoid))(v)(span)(indent)(formatImport(v)(indent$prime))(v1.value1)));
                  };
                  if (v1.value0 instanceof Data_Maybe.Nothing) {
                      var importPrefix = (function () {
                          if (span instanceof MultipleLines) {
                              return newline + indent$prime;
                          };
                          if (span instanceof SingleLine) {
                              return space;
                          };
                          throw new Error("Failed pattern match at Format (line 197, column 34 - line 199, column 40): " + [ span.constructor.name ]);
                      })();
                      return importPrefix + formatDelimitedNonEmpty(PureScript_CST_Range.rangeOfImport(PureScript_CST_Range.rangeOfVoid))(v)(span)(indent$prime)(formatImport(v)(indent$prime))(v1.value1);
                  };
                  throw new Error("Failed pattern match at Format (line 174, column 39 - line 206, column 31): " + [ v1.value0.constructor.name ]);
              })(importDecl$prime.names) + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v1) {
                  var prefix = (function () {
                      if (span instanceof MultipleLines) {
                          return newline + indent$prime;
                      };
                      if (span instanceof SingleLine) {
                          return space;
                      };
                      throw new Error("Failed pattern match at Format (line 212, column 26 - line 214, column 38): " + [ span.constructor.name ]);
                  })();
                  return prefix + (formatSourceToken(v)(indent$prime)(blank)(v1.value0) + formatName(v)(indent$prime)(space)(v1.value1));
              })(importDecl$prime.qualified)));
          };
      };
  };
  var formatImports = function (settings) {
      return function (imports$prime) {
          if (imports$prime.length === 0) {
              return blank;
          };
          return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(function (importDecl) {
              return newline + formatImportDeclaration(settings)(blank)(importDecl);
          })(imports$prime) + newline;
      };
  };
  var formatModuleHeader = function (settings) {
      return function (v) {
          return formatSourceToken(settings)(blank)(blank)(v.keyword) + (formatName(settings)(blank)(space)(v.name) + (formatExports(settings)(v.exports) + (formatSourceToken(settings)(blank)(space)(v.where) + (newline + formatImports(settings)(v.imports)))));
      };
  };
  var formatOneOrDelimited = function (dictRangeOf) {
      return function (settings) {
          return function (lines) {
              return function (indent) {
                  return function (formatValue) {
                      return function (oneOrDelimited) {
                          if (oneOrDelimited instanceof PureScript_CST_Types.One) {
                              return formatValue(oneOrDelimited.value0);
                          };
                          if (oneOrDelimited instanceof PureScript_CST_Types.Many) {
                              return formatDelimitedNonEmpty(dictRangeOf)(settings)(lines)(indent)(formatValue)(oneOrDelimited.value0);
                          };
                          throw new Error("Failed pattern match at Format (line 1376, column 73 - line 1378, column 108): " + [ oneOrDelimited.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var formatParens = function (lines) {
      return function (v) {
          return function (indent) {
              return function (formatValue) {
                  return function (wrapped) {
                      var indented = (function () {
                          if (lines instanceof MultipleLines) {
                              return indent + v.indentation;
                          };
                          if (lines instanceof SingleLine) {
                              return indent;
                          };
                          throw new Error("Failed pattern match at Format (line 1580, column 14 - line 1582, column 25): " + [ lines.constructor.name ]);
                      })();
                      return formatWrapped(v)(indent)(formatValue(indented))(wrapped);
                  };
              };
          };
      };
  };
  var formatRecordNonEmpty = function (settings) {
      return function (indent) {
          return function (formatValue) {
              return function (record$prime) {
                  var lines = singleOrMultiline(PureScript_CST_Range.rangeOfWrapped)(record$prime);
                  var v = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(blank, blank);
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(space, space);
                      };
                      throw new Error("Failed pattern match at Format (line 952, column 25 - line 954, column 37): " + [ lines.constructor.name ]);
                  })();
                  return formatWrapped(settings)(indent)(function (separated$prime) {
                      return v.value0 + (formatSeparated(settings)(lines)(indent)(space)(formatValue)(separated$prime) + v.value1);
                  })(record$prime);
              };
          };
      };
  };
  var formatRecord = function (settings) {
      return function (indent) {
          return function (formatValue) {
              return function (v) {
                  if (v.value instanceof Data_Maybe.Nothing) {
                      return formatSourceToken(settings)(indent)(blank)(v.open) + formatSourceToken(settings)(indent)(blank)(v.close);
                  };
                  if (v.value instanceof Data_Maybe.Just) {
                      return formatRecordNonEmpty(settings)(indent)(formatValue)({
                          open: v.open,
                          value: v.value.value0,
                          close: v.close
                      });
                  };
                  throw new Error("Failed pattern match at Format (line 932, column 44 - line 941, column 52): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var formatWrappedRow = function (v) {
      return function (indent) {
          return function (v1) {
              var lines = singleOrMultiline(PureScript_CST_Range.rangeOfWrapped)(v1);
              var v2 = (function () {
                  if (v1.value.labels instanceof Data_Maybe.Just && lines instanceof MultipleLines) {
                      return new Data_Tuple.Tuple(space, newline + indent);
                  };
                  if (v1.value.labels instanceof Data_Maybe.Nothing && lines instanceof MultipleLines) {
                      return new Data_Tuple.Tuple(blank, newline + indent);
                  };
                  if (lines instanceof SingleLine) {
                      return new Data_Tuple.Tuple(blank, blank);
                  };
                  throw new Error("Failed pattern match at Format (line 1783, column 21 - line 1786, column 36): " + [ v1.value.constructor.name, lines.constructor.name ]);
              })();
              return formatSourceToken(v)(indent)(blank)(v1.open) + (v2.value0 + (formatRow(lines)(v)(indent)(v1.value) + (v2.value1 + formatSourceToken(v)(indent)(blank)(v1.close))));
          };
      };
  };
  var formatTypeVarBindings = function (settings) {
      return function (indent) {
          return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Semigroup.append(Data_Semigroup.semigroupFn(Data_Semigroup.semigroupString))(Control_Applicative.pure(Control_Applicative.applicativeFn)(space))(formatTypeVarBinding(settings)(indent)));
      };
  };
  var formatTypeVarBinding = function (settings) {
      return function (indent) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.TypeVarName) {
                  return formatName(settings)(indent)(blank)(v.value0);
              };
              if (v instanceof PureScript_CST_Types.TypeVarKinded) {
                  return formatWrapped(settings)(indent)(formatLabeledName(PureScript_CST_Range.rangeOfName)(settings)(indent))(v.value0);
              };
              throw new Error("Failed pattern match at Format (line 1431, column 40 - line 1433, column 105): " + [ v.constructor.name ]);
          };
      };
  };
  var formatType = function (v) {
      return function (indent) {
          return function (lines) {
              return function (t) {
                  if (t instanceof PureScript_CST_Types.TypeApp) {
                      var typesArray = Data_Array_NonEmpty.toArray(t.value1);
                      var formatTypeWithPredecessor = function (v1) {
                          var v2 = (function () {
                              var v3 = singleOrMultilineBetween(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(v1.value0)(v1.value1);
                              if (v3 instanceof MultipleLines) {
                                  return {
                                      indented: indent + v.indentation,
                                      prefix: newline + (indent + v.indentation)
                                  };
                              };
                              if (v3 instanceof SingleLine) {
                                  return {
                                      indented: indent,
                                      prefix: space
                                  };
                              };
                              throw new Error("Failed pattern match at Format (line 1451, column 30 - line 1453, column 58): " + [ v3.constructor.name ]);
                          })();
                          return v2.prefix + formatType(v)(v2.indented)(singleOrMultiline(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(v1.value0))(v1.value0);
                      };
                      return formatType(v)(indent)(singleOrMultiline(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(t.value0))(t.value0) + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(formatTypeWithPredecessor)(Data_Array.zip(typesArray)(Data_Array.cons(t.value0)(typesArray)));
                  };
                  if (t instanceof PureScript_CST_Types.TypeArrow) {
                      var prefix = (function () {
                          if (lines instanceof MultipleLines) {
                              return newline + indent;
                          };
                          if (lines instanceof SingleLine) {
                              return space;
                          };
                          throw new Error("Failed pattern match at Format (line 1461, column 14 - line 1463, column 26): " + [ lines.constructor.name ]);
                      })();
                      return formatType(v)(indent)(singleOrMultiline(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(t.value0))(t.value0) + (space + (formatSourceToken(v)(indent)(blank)(t.value1) + (prefix + formatType(v)(indent)(singleOrMultiline(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(t.value2))(t.value2))));
                  };
                  if (t instanceof PureScript_CST_Types.TypeArrowName) {
                      return formatSourceToken(v)(indent)(blank)(t.value0);
                  };
                  if (t instanceof PureScript_CST_Types.TypeVar) {
                      return formatName(v)(indent)(blank)(t.value0);
                  };
                  if (t instanceof PureScript_CST_Types.TypeConstructor) {
                      return formatQualifiedName(v)(indent)(blank)(t.value0);
                  };
                  if (t instanceof PureScript_CST_Types.TypeWildcard) {
                      return formatSourceToken(v)(indent)(blank)(t.value0);
                  };
                  if (t instanceof PureScript_CST_Types.TypeHole) {
                      return formatName(v)(indent)(blank)(t.value0);
                  };
                  if (t instanceof PureScript_CST_Types.TypeString) {
                      return formatSourceToken(v)(indent)(blank)(t.value0);
                  };
                  if (t instanceof PureScript_CST_Types.TypeRow) {
                      return formatWrappedRow(v)(indent)(t.value0);
                  };
                  if (t instanceof PureScript_CST_Types.TypeRecord) {
                      return formatWrappedRow(v)(indent)(t.value0);
                  };
                  if (t instanceof PureScript_CST_Types.TypeForall) {
                      var prefix = (function () {
                          if (lines instanceof MultipleLines) {
                              return newline + indent;
                          };
                          if (lines instanceof SingleLine) {
                              return space;
                          };
                          throw new Error("Failed pattern match at Format (line 1479, column 14 - line 1481, column 26): " + [ lines.constructor.name ]);
                      })();
                      return formatSourceToken(v)(indent)(blank)(t.value0) + (formatTypeVarBindings(v)(indent)(Data_Array_NonEmpty.toArray(t.value1)) + (formatSourceToken(v)(indent)(blank)(t.value2) + (prefix + formatType(v)(indent)(lines)(t.value3))));
                  };
                  if (t instanceof PureScript_CST_Types.TypeKinded) {
                      var v1 = (function () {
                          if (lines instanceof MultipleLines) {
                              return {
                                  indented: indent + v.indentation,
                                  prefix: newline + indent
                              };
                          };
                          if (lines instanceof SingleLine) {
                              return {
                                  indented: indent,
                                  prefix: space
                              };
                          };
                          throw new Error("Failed pattern match at Format (line 1489, column 28 - line 1491, column 56): " + [ lines.constructor.name ]);
                      })();
                      return formatType(v)(indent)(lines)(t.value0) + (space + (formatSourceToken(v)(indent)(blank)(t.value1) + (v1.prefix + formatType(v)(v1.indented)(lines)(t.value2))));
                  };
                  if (t instanceof PureScript_CST_Types.TypeOp) {
                      var formatOp = function (v1) {
                          var v2 = (function () {
                              if (lines instanceof MultipleLines) {
                                  return {
                                      indented: indent + v.indentation,
                                      prefix: newline + indent
                                  };
                              };
                              if (lines instanceof SingleLine) {
                                  return {
                                      indented: indent,
                                      prefix: space
                                  };
                              };
                              throw new Error("Failed pattern match at Format (line 1501, column 30 - line 1503, column 58): " + [ lines.constructor.name ]);
                          })();
                          return formatQualifiedName(v)(v2.indented)(v2.prefix)(v1.value0) + (v2.prefix + formatType(v)(v2.indented)(singleOrMultiline(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(v1.value1))(v1.value1));
                      };
                      return formatType(v)(indent)(singleOrMultiline(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(t.value0))(t.value0) + Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(formatOp)(t.value1);
                  };
                  if (t instanceof PureScript_CST_Types.TypeOpName) {
                      return formatQualifiedName(v)(indent)(blank)(t.value0);
                  };
                  if (t instanceof PureScript_CST_Types.TypeConstrained) {
                      var prefix = (function () {
                          if (lines instanceof MultipleLines) {
                              return newline + indent;
                          };
                          if (lines instanceof SingleLine) {
                              return space;
                          };
                          throw new Error("Failed pattern match at Format (line 1512, column 14 - line 1514, column 26): " + [ lines.constructor.name ]);
                      })();
                      return formatType(v)(indent)(lines)(t.value0) + (space + (formatSourceToken(v)(indent)(blank)(t.value1) + (prefix + formatType(v)(indent)(lines)(t.value2))));
                  };
                  if (t instanceof PureScript_CST_Types.TypeParens) {
                      return formatParens(lines)(v)(indent)(function (x) {
                          return function (wrappedType) {
                              return formatType(v)(x)(singleOrMultiline(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(wrappedType))(wrappedType);
                          };
                      })(t.value0);
                  };
                  if (t instanceof PureScript_CST_Types.TypeUnaryRow) {
                      var prefix = (function () {
                          if (lines instanceof MultipleLines) {
                              return newline + indent;
                          };
                          if (lines instanceof SingleLine) {
                              return space;
                          };
                          throw new Error("Failed pattern match at Format (line 1526, column 14 - line 1528, column 26): " + [ lines.constructor.name ]);
                      })();
                      return formatSourceToken(v)(indent)(blank)(t.value0) + (prefix + formatType(v)(indent)(lines)(t.value1));
                  };
                  if (t instanceof PureScript_CST_Types["TypeError"]) {
                      return Data_Void.absurd(t.value0);
                  };
                  throw new Error("Failed pattern match at Format (line 1441, column 54 - line 1529, column 30): " + [ t.constructor.name ]);
              };
          };
      };
  };
  var formatRow = function (lines) {
      return function (v) {
          return function (indent) {
              return function (v1) {
                  if (v1.labels instanceof Data_Maybe.Nothing && v1.tail instanceof Data_Maybe.Nothing) {
                      return blank;
                  };
                  if (v1.labels instanceof Data_Maybe.Just && v1.tail instanceof Data_Maybe.Nothing) {
                      var v2 = (function () {
                          if (lines instanceof MultipleLines) {
                              return {
                                  before: blank,
                                  indented: indent + v.indentation,
                                  after: blank
                              };
                          };
                          if (lines instanceof SingleLine) {
                              return {
                                  before: space,
                                  indented: indent,
                                  after: space
                              };
                          };
                          throw new Error("Failed pattern match at Format (line 1597, column 35 - line 1599, column 70): " + [ lines.constructor.name ]);
                      })();
                      var f = formatLabeledName(PureScript_CST_Range.rangeOfName)(v)(v2.indented);
                      return v2.before + (formatSeparated(v)(lines)(indent)(space)(f)(v1.labels.value0) + v2.after);
                  };
                  if (v1.labels instanceof Data_Maybe.Nothing && v1.tail instanceof Data_Maybe.Just) {
                      var v2 = (function () {
                          if (lines instanceof MultipleLines) {
                              return {
                                  before: newline + indent,
                                  after: blank
                              };
                          };
                          if (lines instanceof SingleLine) {
                              return {
                                  before: space,
                                  after: space
                              };
                          };
                          throw new Error("Failed pattern match at Format (line 1609, column 25 - line 1611, column 52): " + [ lines.constructor.name ]);
                      })();
                      return v2.before + (formatSourceToken(v)(indent)(blank)(v1.tail.value0.value0) + (space + (formatType(v)(indent)(lines)(v1.tail.value0.value1) + v2.after)));
                  };
                  if (v1.labels instanceof Data_Maybe.Just && v1.tail instanceof Data_Maybe.Just) {
                      var v2 = (function () {
                          if (lines instanceof MultipleLines) {
                              return {
                                  before: blank,
                                  indented: indent + v.indentation,
                                  after: blank,
                                  prefix: newline + indent
                              };
                          };
                          if (lines instanceof SingleLine) {
                              return {
                                  before: space,
                                  indented: indent,
                                  after: space,
                                  prefix: space
                              };
                          };
                          throw new Error("Failed pattern match at Format (line 1621, column 43 - line 1623, column 85): " + [ lines.constructor.name ]);
                      })();
                      var f = formatLabeledName(PureScript_CST_Range.rangeOfName)(v)(v2.indented);
                      return v2.before + (formatSeparated(v)(lines)(indent)(space)(f)(v1.labels.value0) + (v2.prefix + (formatSourceToken(v)(indent)(blank)(v1.tail.value0.value0) + (space + (formatType(v)(indent)(lines)(v1.tail.value0.value1) + v2.after)))));
                  };
                  throw new Error("Failed pattern match at Format (line 1590, column 78 - line 1625, column 44): " + [ v1.labels.constructor.name, v1.tail.constructor.name ]);
              };
          };
      };
  };
  var formatLabeledName = function (dictRangeOf) {
      return function (v) {
          return function (indent) {
              return function (labeledName) {
                  return formatLabeled(dictRangeOf)(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(v)(indent)(formatName(v)(indent)(blank))(function (x) {
                      return formatType(v)(x)(singleOrMultiline(PureScript_CST_Range.rangeOfLabeled(dictRangeOf)(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid)))(labeledName));
                  })(labeledName);
              };
          };
      };
  };
  var formatBinder = function (v) {
      return function (indent$prime) {
          return function (binder) {
              var lines = singleOrMultiline(PureScript_CST_Range.rangeOfBinder(PureScript_CST_Range.rangeOfVoid))(binder);
              if (binder instanceof PureScript_CST_Types.BinderArray) {
                  return formatArray(PureScript_CST_Range.rangeOfBinder(PureScript_CST_Range.rangeOfVoid))(v)(lines)(indent$prime)(formatBinder(v)(indent$prime))(binder.value0);
              };
              if (binder instanceof PureScript_CST_Types.BinderBoolean) {
                  return formatSourceToken(v)(indent$prime)(blank)(binder.value0);
              };
              if (binder instanceof PureScript_CST_Types.BinderChar) {
                  return formatSourceToken(v)(indent$prime)(blank)(binder.value0);
              };
              if (binder instanceof PureScript_CST_Types.BinderConstructor) {
                  var prefix = (function () {
                      var v1 = singleOrMultiline(PureScript_CST_Range.rangeOfBinder(PureScript_CST_Range.rangeOfVoid))(binder);
                      if (v1 instanceof MultipleLines) {
                          return newline + (indent$prime + v.indentation);
                      };
                      if (v1 instanceof SingleLine) {
                          return space;
                      };
                      throw new Error("Failed pattern match at Format (line 580, column 16 - line 582, column 28): " + [ v1.constructor.name ]);
                  })();
                  return formatQualifiedName(v)(indent$prime)(blank)(binder.value0) + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(function (binder$prime) {
                      return prefix + formatBinder(v)(indent$prime)(binder$prime);
                  })(binder.value1);
              };
              if (binder instanceof PureScript_CST_Types.BinderNamed) {
                  return formatName(v)(indent$prime)(blank)(binder.value0) + (formatSourceToken(v)(indent$prime)(blank)(binder.value1) + formatBinder(v)(indent$prime)(binder.value2));
              };
              if (binder instanceof PureScript_CST_Types.BinderNumber) {
                  return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(formatSourceToken(v)(indent$prime)(blank))(binder.value0) + formatSourceToken(v)(indent$prime)(blank)(binder.value1);
              };
              if (binder instanceof PureScript_CST_Types.BinderOp) {
                  var indentTrick = indent$prime + v.indentation;
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indentTrick, newline + indentTrick);
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime, space);
                      };
                      throw new Error("Failed pattern match at Format (line 600, column 24 - line 602, column 37): " + [ lines.constructor.name ]);
                  })();
                  var formatNamedBinder = function (v2) {
                      return formatQualifiedName(v)(indent$prime)(v1.value1)(v2.value0) + (v1.value1 + formatBinder(v)(v1.value0)(v2.value1));
                  };
                  return formatBinder({
                      indentation: indent$prime,
                      sourceStyle: v.sourceStyle
                  })(v1.value1)(binder.value0) + Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(formatNamedBinder)(binder.value1);
              };
              if (binder instanceof PureScript_CST_Types.BinderParens) {
                  return formatParens(lines)(v)(indent$prime)(formatBinder(v))(binder.value0);
              };
              if (binder instanceof PureScript_CST_Types.BinderRecord) {
                  return formatRecord(v)(indent$prime)(formatRecordLabeled(PureScript_CST_Range.rangeOfBinder(PureScript_CST_Range.rangeOfVoid))(v)(indent$prime)(formatBinder(v)))(binder.value0);
              };
              if (binder instanceof PureScript_CST_Types.BinderString) {
                  return formatSourceToken(v)(indent$prime)(blank)(binder.value0);
              };
              if (binder instanceof PureScript_CST_Types.BinderTyped) {
                  var indentTrick = indent$prime + v.indentation;
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indentTrick, newline + indentTrick);
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime, space);
                      };
                      throw new Error("Failed pattern match at Format (line 625, column 26 - line 627, column 39): " + [ lines.constructor.name ]);
                  })();
                  return formatBinder(v)(indent$prime)(binder.value0) + (formatSourceToken(v)(indent$prime)(space)(binder.value1) + (v1.value1 + formatType(v)(v1.value0)(lines)(binder.value2)));
              };
              if (binder instanceof PureScript_CST_Types.BinderVar) {
                  return formatName(v)(indent$prime)(blank)(binder.value0);
              };
              if (binder instanceof PureScript_CST_Types.BinderWildcard) {
                  return formatSourceToken(v)(indent$prime)(blank)(binder.value0);
              };
              if (binder instanceof PureScript_CST_Types.BinderInt) {
                  return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(formatSourceToken(v)(indent$prime)(blank))(binder.value0) + formatSourceToken(v)(indent$prime)(blank)(binder.value1);
              };
              if (binder instanceof PureScript_CST_Types.BinderError) {
                  return Data_Void.absurd(binder.value0);
              };
              throw new Error("Failed pattern match at Format (line 566, column 56 - line 637, column 32): " + [ binder.constructor.name ]);
          };
      };
  };
  var formatDataConstructor = function (v) {
      return function (indent) {
          return function (v1) {
              var lines = singleOrMultiline(PureScript_CST_Range.rangeOfDataCtor(PureScript_CST_Range.rangeOfVoid))(v1);
              var v2 = (function () {
                  if (lines instanceof MultipleLines) {
                      var indented = indent + v.indentation;
                      return {
                          indented: indented,
                          prefix: newline + indented
                      };
                  };
                  if (lines instanceof SingleLine) {
                      return {
                          indented: indent,
                          prefix: space
                      };
                  };
                  throw new Error("Failed pattern match at Format (line 1403, column 26 - line 1408, column 54): " + [ lines.constructor.name ]);
              })();
              var formatField = function (typo) {
                  return v2.prefix + formatType(v)(v2.indented)(lines)(typo);
              };
              return space + (formatName(v)(indent)(blank)(v1.name) + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(formatField)(v1.fields));
          };
      };
  };
  var formatInstanceHead = function (v) {
      return function (indent$prime$prime) {
          return function (v1) {
              var lines = rangeOfInstanceHead(v1);
              var v2 = (function () {
                  if (lines instanceof MultipleLines) {
                      return new Data_Tuple.Tuple(indent$prime$prime + (v.indentation + v.indentation), new Data_Tuple.Tuple(indent$prime$prime + v.indentation, newline + (indent$prime$prime + v.indentation)));
                  };
                  if (lines instanceof SingleLine) {
                      return new Data_Tuple.Tuple(indent$prime$prime, new Data_Tuple.Tuple(indent$prime$prime, space));
                  };
                  throw new Error("Failed pattern match at Format (line 496, column 37 - line 501, column 52): " + [ lines.constructor.name ]);
              })();
              var typePrefix = (function () {
                  var v3 = Data_Array.last(v1.types);
                  if (v3 instanceof Data_Maybe.Just) {
                      var v4 = singleOrMultilineBetween(PureScript_CST_Range.rangeOfQualifiedName)(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(v1.className)(v3.value0);
                      if (v4 instanceof MultipleLines) {
                          return newline + v2.value0;
                      };
                      if (v4 instanceof SingleLine) {
                          return space;
                      };
                      throw new Error("Failed pattern match at Format (line 504, column 24 - line 506, column 28): " + [ v4.constructor.name ]);
                  };
                  if (v3 instanceof Data_Maybe.Nothing) {
                      return space;
                  };
                  throw new Error("Failed pattern match at Format (line 503, column 18 - line 507, column 23): " + [ v3.constructor.name ]);
              })();
              return formatSourceToken(v)(indent$prime$prime)(blank)(v1.keyword) + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v3) {
                  return formatName(v)(indent$prime$prime)(space)(v3.name) + formatSourceToken(v)(indent$prime$prime)(space)(v3.separator);
              })(v1.nameAndSeparator) + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v3) {
                  return v2.value1.value1 + (formatOneOrDelimited(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(v)(lines)(v2.value1.value0)(function (t) {
                      return formatType(v)(v2.value0)(singleOrMultiline(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(t))(t);
                  })(v3.value0) + formatSourceToken(v)(v2.value1.value0)(space)(v3.value1));
              })(v1.constraints) + (formatQualifiedName(v)(v2.value1.value0)(v2.value1.value1)(v1.className) + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(function (type$prime$prime) {
                  return typePrefix + formatType(v)(v2.value0)(singleOrMultiline(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(type$prime$prime))(type$prime$prime);
              })(v1.types))));
          };
      };
  };
  var formatClassHead = function (lines) {
      return function (v) {
          return function (indent) {
              return function (v1) {
                  var v2 = (function () {
                      if (lines instanceof MultipleLines) {
                          var indented = indent + v.indentation;
                          return {
                              indented: indented,
                              prefix: newline + indented
                          };
                      };
                      if (lines instanceof SingleLine) {
                          return {
                              indented: indent,
                              prefix: space
                          };
                      };
                      throw new Error("Failed pattern match at Format (line 1323, column 26 - line 1328, column 54): " + [ lines.constructor.name ]);
                  })();
                  var formatTypeVariableBinding = function (binding) {
                      return space + formatTypeVarBinding(v)(indent)(binding);
                  };
                  var formatSuper = function (v3) {
                      return v2.prefix + (formatOneOrDelimited(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(v)(lines)(v2.indented)(formatType(v)(indent)(lines))(v3.value0) + formatSourceToken(v)(indent)(space)(v3.value1));
                  };
                  var formatFunctionalDependency = function (v3) {
                      return formatSourceToken(v)(indent)(space)(v3.value0) + (space + formatSeparated(v)(lines)(indent)(space)(formatClassFundep(v)(indent))(v3.value1));
                  };
                  return formatSourceToken(v)(v2.indented)(blank)(v1.keyword) + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(formatSuper)(v1["super"]) + (formatName(v)(indent)(space)(v1.name) + (Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(formatTypeVariableBinding)(v1.vars) + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(formatFunctionalDependency)(v1.fundeps))));
              };
          };
      };
  };
  var formatDataHead = function (settings) {
      return function (indent) {
          return function (v) {
              return formatSourceToken(settings)(indent)(blank)(v.keyword) + (formatName(settings)(indent)(space)(v.name) + formatTypeVarBindings(settings)(indent)(v.vars));
          };
      };
  };
  var formatLabeledNameKind = function (settings) {
      return function (indent) {
          return function (labeled) {
              return formatLabeled(PureScript_CST_Range.rangeOfName)(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(settings)(indent)(formatName(settings)(indent)(blank))(function (x) {
                  return formatType(settings)(x)(singleOrMultiline(PureScript_CST_Range.rangeOfLabeled(PureScript_CST_Range.rangeOfName)(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid)))(labeled));
              })(labeled);
          };
      };
  };
  var formatLabeledNameType = function (settings) {
      return function (indent) {
          return function (labeled) {
              return formatLabeled(PureScript_CST_Range.rangeOfName)(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(settings)(indent)(formatName(settings)(indent)(blank))(function (x) {
                  return formatType(settings)(x)(singleOrMultiline(PureScript_CST_Range.rangeOfLabeled(PureScript_CST_Range.rangeOfName)(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid)))(labeled));
              })(labeled);
          };
      };
  };
  var formatForeign = function (settings) {
      return function (indent$prime) {
          return function (foreign$prime$prime) {
              if (foreign$prime$prime instanceof PureScript_CST_Types.ForeignData) {
                  return formatSourceToken(settings)(indent$prime)(blank)(foreign$prime$prime.value0) + (space + formatLabeledNameKind(settings)(indent$prime)(foreign$prime$prime.value1));
              };
              if (foreign$prime$prime instanceof PureScript_CST_Types.ForeignKind) {
                  return formatSourceToken(settings)(indent$prime)(blank)(foreign$prime$prime.value0) + formatName(settings)(indent$prime)(space)(foreign$prime$prime.value1);
              };
              if (foreign$prime$prime instanceof PureScript_CST_Types.ForeignValue) {
                  return formatLabeledNameType(settings)(indent$prime)(foreign$prime$prime.value0);
              };
              throw new Error("Failed pattern match at Format (line 411, column 44 - line 420, column 52): " + [ foreign$prime$prime.constructor.name ]);
          };
      };
  };
  var formatWhere = function (v) {
      return function (indent$prime) {
          return function (v1) {
              var indent = indent$prime + v.indentation;
              return formatExprPrefix(singleOrMultiline(PureScript_CST_Range.rangeOfExpr(PureScript_CST_Range.rangeOfVoid))(v1.expr))(v)(indent$prime)(v1.expr) + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v2) {
                  return newline + indent + (formatSourceToken(v)(indent)(blank)(v2.value0) + (Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(formatLetBinding(v)(indent)(newline + indent)(newline))(Data_Array_NonEmpty.init(v2.value1)) + formatLetBinding(v)(indent)(newline + indent)(blank)(Data_Array_NonEmpty.last(v2.value1))));
              })(v1.bindings);
          };
      };
  };
  var formatValueBindingFields = function (settings) {
      return function (indent) {
          return function (v) {
              var formatValueBinder = function (binder) {
                  return space + formatBinder(settings)(indent)(binder);
              };
              return formatName(settings)(indent)(blank)(v.name) + (Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(formatValueBinder)(v.binders) + formatGuarded(settings)(indent)(v.guarded));
          };
      };
  };
  var formatRecordUpdate = function (v) {
      return function (indent$prime) {
          return function (recordUpdate$prime) {
              if (recordUpdate$prime instanceof PureScript_CST_Types.RecordUpdateBranch) {
                  var lines = singleOrMultiline(PureScript_CST_Range.rangeOfWrapped)(recordUpdate$prime.value1);
                  var indentTrick = indent$prime + v.indentation;
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indentTrick, newline + indentTrick);
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime, space);
                      };
                      throw new Error("Failed pattern match at Format (line 1005, column 26 - line 1007, column 39): " + [ lines.constructor.name ]);
                  })();
                  return formatName(v)(indent$prime)(blank)(recordUpdate$prime.value0) + (v1.value1 + formatRecordNonEmpty(v)(v1.value0)(formatRecordUpdate(v)(v1.value0))(recordUpdate$prime.value1));
              };
              if (recordUpdate$prime instanceof PureScript_CST_Types.RecordUpdateLeaf) {
                  var lines = singleOrMultiline(PureScript_CST_Range.rangeOfExpr(PureScript_CST_Range.rangeOfVoid))(recordUpdate$prime.value2);
                  var indentTrick = indent$prime + v.indentation;
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indentTrick, newline + indentTrick);
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime, space);
                      };
                      throw new Error("Failed pattern match at Format (line 1021, column 26 - line 1023, column 39): " + [ lines.constructor.name ]);
                  })();
                  return formatName(v)(indent$prime)(blank)(recordUpdate$prime.value0) + (formatSourceToken(v)(indent$prime)(space)(recordUpdate$prime.value1) + (v1.value1 + formatExpr(v)(v1.value0)(recordUpdate$prime.value2)));
              };
              throw new Error("Failed pattern match at Format (line 998, column 69 - line 1027, column 42): " + [ recordUpdate$prime.constructor.name ]);
          };
      };
  };
  var formatRecordAccessor = function (lines) {
      return function (v) {
          return function (indent$prime) {
              return function (recordAccessor$prime) {
                  var indentTrick = indent$prime + v.indentation;
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indentTrick, newline + indentTrick);
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime, blank);
                      };
                      throw new Error("Failed pattern match at Format (line 978, column 26 - line 980, column 39): " + [ lines.constructor.name ]);
                  })();
                  return formatExpr(v)(v1.value0)(recordAccessor$prime.expr) + (v1.value1 + (formatSourceToken(v)(v1.value0)(blank)(recordAccessor$prime.dot) + formatSeparated(v)(lines)(v1.value0)(blank)(formatName(v)(indent$prime)(blank))(recordAccessor$prime.path)));
              };
          };
      };
  };
  var formatPatternGuard = function (v) {
      return function (indent) {
          return function (v1) {
              var lines = singleOrMultilineFromRange(rangeOfPatternGuard(v1));
              if (v1.binder instanceof Data_Maybe.Just) {
                  return formatBinder(v)(indent)(v1.binder.value0.value0) + (formatSourceToken(v)(indent)(space)(v1.binder.value0.value1) + formatExprPrefix(lines)(v)(indent)(v1.expr));
              };
              if (v1.binder instanceof Data_Maybe.Nothing) {
                  return formatExpr(v)(indent)(v1.expr);
              };
              throw new Error("Failed pattern match at Format (line 735, column 110 - line 740, column 46): " + [ v1.binder.constructor.name ]);
          };
      };
  };
  var formatLetIn = function (lines) {
      return function (v) {
          return function (indent$prime) {
              return function (letIn$prime) {
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(newline + indent$prime, new Data_Tuple.Tuple(indent$prime + v.indentation, newline + (indent$prime + v.indentation)));
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(space, new Data_Tuple.Tuple(indent$prime, space));
                      };
                      throw new Error("Failed pattern match at Format (line 1063, column 38 - line 1065, column 48): " + [ lines.constructor.name ]);
                  })();
                  return formatSourceToken(v)(indent$prime)(blank)(letIn$prime.keyword) + (Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(formatLetBinding(v)(v1.value1.value0)(v1.value1.value1)(newline))(Data_Array_NonEmpty.init(letIn$prime.bindings)) + (formatLetBinding(v)(v1.value1.value0)(v1.value1.value1)(blank)(Data_Array_NonEmpty.last(letIn$prime.bindings)) + (v1.value0 + (formatSourceToken(v)(indent$prime)(blank)(letIn$prime["in"]) + (v1.value1.value1 + formatExpr(v)(v1.value1.value0)(letIn$prime.body))))));
              };
          };
      };
  };
  var formatLetBinding = function (v) {
      return function (indent$prime) {
          return function (prefix) {
              return function (suffix) {
                  return function (v1) {
                      if (v1 instanceof PureScript_CST_Types.LetBindingName) {
                          return prefix + (formatValueBindingFields(v)(indent$prime)(v1.value0) + suffix);
                      };
                      if (v1 instanceof PureScript_CST_Types.LetBindingPattern) {
                          return prefix + (formatBinder(v)(indent$prime)(v1.value0) + (formatSourceToken(v)(indent$prime)(space)(v1.value1) + (formatWhere(v)(indent$prime)(v1.value2) + suffix)));
                      };
                      if (v1 instanceof PureScript_CST_Types.LetBindingSignature) {
                          return prefix + formatLabeledNameType(v)(indent$prime)(v1.value0);
                      };
                      if (v1 instanceof PureScript_CST_Types.LetBindingError) {
                          return Data_Void.absurd(v1.value0);
                      };
                      throw new Error("Failed pattern match at Format (line 692, column 67 - line 706, column 36): " + [ v1.constructor.name ]);
                  };
              };
          };
      };
  };
  var formatLambda = function (lines) {
      return function (v) {
          return function (indent$prime) {
              return function (lambda$prime) {
                  return formatSourceToken(v)(indent$prime)(blank)(lambda$prime.symbol) + (Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(function (binder$prime) {
                      return formatBinder(v)(indent$prime)(binder$prime) + space;
                  })(lambda$prime.binders) + (formatSourceToken(v)(indent$prime)(blank)(lambda$prime.arrow) + formatExprPrefix(lines)(v)(indent$prime)(lambda$prime.body)));
              };
          };
      };
  };
  var formatIfThenElse = function (lines) {
      return function (v) {
          return function (indent) {
              return function (v1) {
                  var prefix = (function () {
                      if (lines instanceof MultipleLines) {
                          return newline + indent;
                      };
                      if (lines instanceof SingleLine) {
                          return space;
                      };
                      throw new Error("Failed pattern match at Format (line 1141, column 12 - line 1143, column 24): " + [ lines.constructor.name ]);
                  })();
                  return formatSourceToken(v)(indent)(blank)(v1.keyword) + (space + (formatExpr(v)(indent)(v1.cond) + (space + (formatSourceToken(v)(indent)(blank)(v1.then) + (formatExprPrefix(lines)(v)(indent)(v1["true"]) + (prefix + (formatSourceToken(v)(indent)(blank)(v1["else"]) + formatExprPrefixElseIf(lines)(v)(indent)(v1["false"]))))))));
              };
          };
      };
  };
  var formatGuardedExpr = function (v) {
      return function (indent$prime) {
          return function (expr) {
              var indent = indent$prime + v.indentation;
              return formatSourceToken(v)(indent$prime)(blank)(expr.bar) + (space + (formatSeparated(v)(singleOrMultilineFromRange(rangeOfSeparated(rangeOfPatternGuard)(expr.patterns)))(indent$prime)(space)(formatPatternGuard(v)(indent))(expr.patterns) + (space + (formatSourceToken(v)(indent$prime)(blank)(expr.separator) + formatWhere(v)(indent$prime)(expr.where)))));
          };
      };
  };
  var formatGuarded = function (v) {
      return function (indent$prime) {
          return function (v1) {
              if (v1 instanceof PureScript_CST_Types.Guarded) {
                  var indent = indent$prime + v.indentation;
                  return Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(function (guardedExpr) {
                      return newline + indent + formatGuardedExpr(v)(indent)(guardedExpr);
                  })(v1.value0);
              };
              if (v1 instanceof PureScript_CST_Types.Unconditional) {
                  return formatSourceToken(v)(indent$prime)(space)(v1.value0) + formatWhere(v)(indent$prime)(v1.value1);
              };
              throw new Error("Failed pattern match at Format (line 646, column 50 - line 658, column 49): " + [ v1.constructor.name ]);
          };
      };
  };
  var formatExprPrefixElseIf = function (lines) {
      return function (v) {
          return function (indent) {
              return function (expr$prime) {
                  if (expr$prime instanceof PureScript_CST_Types.ExprAdo) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprApp) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprArray) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprBoolean) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprCase) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprChar) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprConstructor) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprDo) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprHole) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprIdent) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprIf) {
                      return space + formatExpr(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprInfix) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprLambda) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprLet) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprNegate) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprNumber) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprOp) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprOpName) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprParens) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprRecord) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprRecordAccessor) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprRecordUpdate) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprSection) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprString) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprTyped) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprInt) {
                      return formatExprPrefix(lines)(v)(indent)(expr$prime);
                  };
                  if (expr$prime instanceof PureScript_CST_Types.ExprError) {
                      return Data_Void.absurd(expr$prime.value0);
                  };
                  throw new Error("Failed pattern match at Format (line 1095, column 70 - line 1122, column 30): " + [ expr$prime.constructor.name ]);
              };
          };
      };
  };
  var formatExprPrefix = function (lines) {
      return function (v) {
          return function (indent$prime) {
              return function (expr) {
                  var indent = (function () {
                      if (expr instanceof PureScript_CST_Types.ExprAdo) {
                          return indent$prime;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprApp) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprArray) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprBoolean) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprCase) {
                          return indent$prime;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprChar) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprConstructor) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprDo) {
                          return indent$prime;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprHole) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprIdent) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprIf) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprInfix) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprLambda) {
                          return indent$prime;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprLet) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprNegate) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprNumber) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprOp) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprOpName) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprParens) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprRecord) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprRecordAccessor) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprRecordUpdate) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprSection) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprString) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprTyped) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprInt) {
                          return indent$prime + v.indentation;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprError) {
                          return Data_Void.absurd(expr.value0);
                      };
                      throw new Error("Failed pattern match at Format (line 747, column 12 - line 774, column 32): " + [ expr.constructor.name ]);
                  })();
                  var multiLine = (function () {
                      if (expr instanceof PureScript_CST_Types.ExprAdo) {
                          return space;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprApp) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprArray) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprBoolean) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprCase) {
                          return space;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprChar) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprConstructor) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprDo) {
                          return space;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprHole) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprIdent) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprIf) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprInfix) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprLambda) {
                          return space;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprLet) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprNegate) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprNumber) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprOp) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprOpName) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprParens) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprRecord) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprRecordAccessor) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprRecordUpdate) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprSection) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprString) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprTyped) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprInt) {
                          return newline + indent;
                      };
                      if (expr instanceof PureScript_CST_Types.ExprError) {
                          return Data_Void.absurd(expr.value0);
                      };
                      throw new Error("Failed pattern match at Format (line 776, column 15 - line 803, column 32): " + [ expr.constructor.name ]);
                  })();
                  var prefix = (function () {
                      if (lines instanceof MultipleLines) {
                          return multiLine;
                      };
                      if (lines instanceof SingleLine) {
                          return space;
                      };
                      throw new Error("Failed pattern match at Format (line 806, column 12 - line 808, column 24): " + [ lines.constructor.name ]);
                  })();
                  return prefix + formatExpr(v)(indent)(expr);
              };
          };
      };
  };
  var formatExpr = function (v) {
      return function (indent$prime$prime) {
          return function (expr$prime$prime) {
              var lines = singleOrMultiline(PureScript_CST_Range.rangeOfExpr(PureScript_CST_Range.rangeOfVoid))(expr$prime$prime);
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprAdo) {
                  return formatAdoBlock(lines)(v)(indent$prime$prime)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprApp) {
                  var formatApp = function (curr) {
                      return formatExprPrefix(singleOrMultilineBetween(PureScript_CST_Range.rangeOfExpr(PureScript_CST_Range.rangeOfVoid))(PureScript_CST_Range.rangeOfExpr(PureScript_CST_Range.rangeOfVoid))(expr$prime$prime.value0)(curr))(v)(indent$prime$prime)(curr);
                  };
                  return formatExpr(v)(indent$prime$prime)(expr$prime$prime.value0) + Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(formatApp)(expr$prime$prime.value1);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprArray) {
                  var indent$prime = (function () {
                      if (lines instanceof MultipleLines) {
                          return indent$prime$prime + v.indentation;
                      };
                      if (lines instanceof SingleLine) {
                          return indent$prime$prime;
                      };
                      throw new Error("Failed pattern match at Format (line 824, column 17 - line 826, column 31): " + [ lines.constructor.name ]);
                  })();
                  return formatArray(PureScript_CST_Range.rangeOfExpr(PureScript_CST_Range.rangeOfVoid))(v)(lines)(indent$prime$prime)(formatExpr(v)(indent$prime))(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprBoolean) {
                  return formatSourceToken(v)(indent$prime$prime)(blank)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprCase) {
                  return formatCaseOf(lines)(v)(indent$prime$prime)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprChar) {
                  return formatSourceToken(v)(indent$prime$prime)(blank)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprConstructor) {
                  return formatQualifiedName(v)(indent$prime$prime)(blank)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprDo) {
                  return formatDoBlock(lines)(v)(indent$prime$prime)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprHole) {
                  return formatName(v)(indent$prime$prime)(blank)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprIdent) {
                  return formatQualifiedName(v)(indent$prime$prime)(blank)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprIf) {
                  return formatIfThenElse(lines)(v)(indent$prime$prime)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprInfix) {
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indent$prime$prime + (v.indentation + v.indentation), new Data_Tuple.Tuple(indent$prime$prime + v.indentation, new Data_Tuple.Tuple(newline + (indent$prime$prime + v.indentation), newline + (indent$prime$prime + v.indentation + v.indentation))));
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime$prime, new Data_Tuple.Tuple(indent$prime$prime, new Data_Tuple.Tuple(space, space)));
                      };
                      throw new Error("Failed pattern match at Format (line 846, column 48 - line 853, column 61): " + [ lines.constructor.name ]);
                  })();
                  var formatOne = function (v2) {
                      return formatWrapped(v)(v1.value0)(formatExpr(v)(v1.value1.value0))(v2.value0) + (v1.value1.value1.value1 + formatExpr(v)(v1.value0)(v2.value1));
                  };
                  return formatExpr(v)(indent$prime$prime)(expr$prime$prime.value0) + (v1.value1.value1.value0 + Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(formatOne)(expr$prime$prime.value1));
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprLambda) {
                  return formatLambda(lines)(v)(indent$prime$prime)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprLet) {
                  return formatLetIn(lines)(v)(indent$prime$prime)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprNegate) {
                  return formatSourceToken(v)(indent$prime$prime)(blank)(expr$prime$prime.value0) + formatExpr(v)(indent$prime$prime)(expr$prime$prime.value1);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprNumber) {
                  return formatSourceToken(v)(indent$prime$prime)(blank)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprOp) {
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indent$prime$prime + (v.indentation + v.indentation), new Data_Tuple.Tuple(indent$prime$prime + v.indentation, newline + (indent$prime$prime + v.indentation)));
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime$prime + v.indentation, new Data_Tuple.Tuple(indent$prime$prime, space));
                      };
                      throw new Error("Failed pattern match at Format (line 870, column 37 - line 872, column 69): " + [ lines.constructor.name ]);
                  })();
                  return formatExpr(v)(indent$prime$prime)(expr$prime$prime.value0) + Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(function (v2) {
                      return formatQualifiedName(v)(v1.value1.value0)(v1.value1.value1)(v2.value0) + (space + formatExpr(v)(v1.value0)(v2.value1));
                  })(expr$prime$prime.value1);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprOpName) {
                  return formatQualifiedName(v)(indent$prime$prime)(blank)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprParens) {
                  return formatParens(lines)(v)(indent$prime$prime)(formatExpr(v))(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprRecord) {
                  return formatRecord(v)(indent$prime$prime)(formatRecordLabeled(PureScript_CST_Range.rangeOfExpr(PureScript_CST_Range.rangeOfVoid))(v)(indent$prime$prime)(formatExpr(v)))(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprRecordAccessor) {
                  return formatRecordAccessor(lines)(v)(indent$prime$prime)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprRecordUpdate) {
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indent$prime$prime + v.indentation, newline + (indent$prime$prime + v.indentation));
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime$prime, space);
                      };
                      throw new Error("Failed pattern match at Format (line 899, column 27 - line 901, column 40): " + [ lines.constructor.name ]);
                  })();
                  return formatExpr(v)(indent$prime$prime)(expr$prime$prime.value0) + (v1.value1 + formatRecordNonEmpty(v)(v1.value0)(formatRecordUpdate(v)(v1.value0))(expr$prime$prime.value1));
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprSection) {
                  return formatSourceToken(v)(indent$prime$prime)(blank)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprString) {
                  return formatSourceToken(v)(indent$prime$prime)(blank)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprTyped) {
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indent$prime$prime + v.indentation, newline + (indent$prime$prime + v.indentation));
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime$prime, space);
                      };
                      throw new Error("Failed pattern match at Format (line 913, column 27 - line 915, column 40): " + [ lines.constructor.name ]);
                  })();
                  return formatExpr(v)(indent$prime$prime)(expr$prime$prime.value0) + (formatSourceToken(v)(indent$prime$prime)(space)(expr$prime$prime.value1) + (v1.value1 + formatType(v)(v1.value0)(lines)(expr$prime$prime.value2)));
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprInt) {
                  return formatSourceToken(v)(indent$prime$prime)(blank)(expr$prime$prime.value0);
              };
              if (expr$prime$prime instanceof PureScript_CST_Types.ExprError) {
                  return Data_Void.absurd(expr$prime$prime.value0);
              };
              throw new Error("Failed pattern match at Format (line 815, column 55 - line 921, column 30): " + [ expr$prime$prime.constructor.name ]);
          };
      };
  };
  var formatDoStatement = function (v) {
      return function (indent$prime) {
          return function (doStatement$prime) {
              if (doStatement$prime instanceof PureScript_CST_Types.DoBind) {
                  return formatBinder(v)(indent$prime)(doStatement$prime.value0) + (formatSourceToken(v)(indent$prime)(space)(doStatement$prime.value1) + formatExprPrefix(singleOrMultiline(PureScript_CST_Range.rangeOfDoStatement(PureScript_CST_Range.rangeOfVoid))(doStatement$prime))(v)(indent$prime)(doStatement$prime.value2));
              };
              if (doStatement$prime instanceof PureScript_CST_Types.DoDiscard) {
                  return formatExpr(v)(indent$prime)(doStatement$prime.value0);
              };
              if (doStatement$prime instanceof PureScript_CST_Types.DoLet) {
                  var indent = indent$prime + v.indentation;
                  return formatSourceToken(v)(indent$prime)(blank)(doStatement$prime.value0) + (Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(formatLetBinding(v)(indent)(newline + indent)(newline))(Data_Array_NonEmpty.init(doStatement$prime.value1)) + formatLetBinding(v)(indent)(newline + indent)(blank)(Data_Array_NonEmpty.last(doStatement$prime.value1)));
              };
              if (doStatement$prime instanceof PureScript_CST_Types.DoError) {
                  return Data_Void.absurd(doStatement$prime.value0);
              };
              throw new Error("Failed pattern match at Format (line 1172, column 67 - line 1192, column 28): " + [ doStatement$prime.constructor.name ]);
          };
      };
  };
  var formatDoBlock = function (lines) {
      return function (v) {
          return function (indent$prime) {
              return function (doBlock$prime) {
                  var indentTrick = indent$prime + v.indentation;
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indentTrick, newline + indentTrick);
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime, space);
                      };
                      throw new Error("Failed pattern match at Format (line 1156, column 26 - line 1158, column 39): " + [ lines.constructor.name ]);
                  })();
                  return formatSourceToken(v)(indent$prime)(blank)(doBlock$prime.keyword) + Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(function (doStatement$prime) {
                      return v1.value1 + formatDoStatement(v)(v1.value0)(doStatement$prime);
                  })(doBlock$prime.statements);
              };
          };
      };
  };
  var formatCaseOf = function (lines) {
      return function (v) {
          return function (indent$prime) {
              return function (caseOf$prime) {
                  var v1 = (function () {
                      if (lines instanceof MultipleLines) {
                          return new Data_Tuple.Tuple(indent$prime + v.indentation, newline + (indent$prime + v.indentation));
                      };
                      if (lines instanceof SingleLine) {
                          return new Data_Tuple.Tuple(indent$prime, space);
                      };
                      throw new Error("Failed pattern match at Format (line 1203, column 26 - line 1205, column 39): " + [ lines.constructor.name ]);
                  })();
                  return formatSourceToken(v)(indent$prime)(blank)(caseOf$prime.keyword) + (space + (formatSeparated(v)(singleOrMultiline(PureScript_CST_Range.rangeOfSeparated(PureScript_CST_Range.rangeOfExpr(PureScript_CST_Range.rangeOfVoid)))(caseOf$prime.head))(v1.value0)(space)(formatExpr(v)(v1.value0))(caseOf$prime.head) + (space + (formatSourceToken(v)(indent$prime)(blank)(caseOf$prime.of) + Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(function (v2) {
                      return v1.value1 + (formatSeparated(v)(singleOrMultiline(PureScript_CST_Range.rangeOfSeparated(PureScript_CST_Range.rangeOfBinder(PureScript_CST_Range.rangeOfVoid)))(v2.value0))(v1.value0)(space)(formatBinder(v)(v1.value0))(v2.value0) + formatGuarded(v)(v1.value0)(v2.value1));
                  })(caseOf$prime.branches)))));
              };
          };
      };
  };
  var formatAdoBlock = function (lines) {
      return function (v) {
          return function (indent$prime) {
              return function (v1) {
                  var v2 = (function () {
                      if (lines instanceof MultipleLines) {
                          var indent = indent$prime + v.indentation;
                          return {
                              indent: indent,
                              prefix: newline + indent
                          };
                      };
                      if (lines instanceof SingleLine) {
                          return {
                              indent: indent$prime,
                              prefix: space
                          };
                      };
                      throw new Error("Failed pattern match at Format (line 1281, column 26 - line 1286, column 55): " + [ lines.constructor.name ]);
                  })();
                  return formatSourceToken(v)(indent$prime)(blank)(v1.keyword) + (Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(function (doStatement$prime) {
                      return v2.prefix + formatDoStatement(v)(v2.indent)(doStatement$prime);
                  })(v1.statements) + (v2.prefix + (formatSourceToken(v)(indent$prime)(blank)(v1["in"]) + (space + formatExpr(v)(v2.indent)(v1.result)))));
              };
          };
      };
  };
  var formatInstanceBinding = function (settings) {
      return function (indent) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.InstanceBindingSignature) {
                  return formatLabeledNameType(settings)(indent)(v.value0);
              };
              if (v instanceof PureScript_CST_Types.InstanceBindingName) {
                  return formatValueBindingFields(settings)(indent)(v.value0);
              };
              throw new Error("Failed pattern match at Format (line 537, column 41 - line 541, column 64): " + [ v.constructor.name ]);
          };
      };
  };
  var formatInstance = function (v) {
      return function (indent) {
          return function (v1) {
              var indented = indent + v.indentation;
              var formatBinding = function (instanceBinding) {
                  return newline + (indented + formatInstanceBinding(v)(indented)(instanceBinding));
              };
              var formatBindings = function (v2) {
                  return formatSourceToken(v)(indent)(space)(v2.value0) + Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(formatBinding)(v2.value1);
              };
              return formatInstanceHead(v)(indent)(v1.head) + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(formatBindings)(v1.body);
          };
      };
  };
  var formatDeclaration = function (v) {
      return function (indent) {
          return function (declaration) {
              var lines = singleOrMultiline(PureScript_CST_Range.rangeOfDecl(PureScript_CST_Range.rangeOfVoid))(declaration);
              var indented = indent + v.indentation;
              if (declaration instanceof PureScript_CST_Types.DeclData) {
                  var formatDataConstructors = function (v1) {
                      return newline + indented + (formatSourceToken(v)(indented)(blank)(v1.value0) + formatSeparated(v)(singleOrMultiline(PureScript_CST_Range.rangeOfDecl(PureScript_CST_Range.rangeOfVoid))(declaration))(indented)(blank)(formatDataConstructor(v)(indented))(v1.value1));
                  };
                  return formatDataHead(v)(indent)(declaration.value0) + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(formatDataConstructors)(declaration.value1) + newline);
              };
              if (declaration instanceof PureScript_CST_Types.DeclType) {
                  return formatDataHead(v)(indent)(declaration.value0) + (newline + (indented + (formatSourceToken(v)(indented)(blank)(declaration.value1) + (space + (formatType(v)(indented + v.indentation)(singleOrMultiline(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(declaration.value2))(declaration.value2) + newline)))));
              };
              if (declaration instanceof PureScript_CST_Types.DeclNewtype) {
                  var prefix = (function () {
                      var v1 = singleOrMultilineBetween(PureScript_CST_Range.rangeOfName)(PureScript_CST_Range.rangeOfType(PureScript_CST_Range.rangeOfVoid))(declaration.value2)(declaration.value3);
                      if (v1 instanceof MultipleLines) {
                          return newline + indented;
                      };
                      if (v1 instanceof SingleLine) {
                          return space;
                      };
                      throw new Error("Failed pattern match at Format (line 337, column 14 - line 339, column 26): " + [ v1.constructor.name ]);
                  })();
                  return formatDataHead(v)(indent)(declaration.value0) + (newline + indented + (formatSourceToken(v)(indented)(blank)(declaration.value1) + (space + (formatName(v)(indented)(blank)(declaration.value2) + (prefix + (formatType(v)(indented)(lines)(declaration.value3) + newline))))));
              };
              if (declaration instanceof PureScript_CST_Types.DeclClass) {
                  var formatLabeledMember = function (labeled) {
                      return newline + (indented + formatLabeledNameType(v)(indented)(labeled));
                  };
                  var formatMember = function (v1) {
                      return formatSourceToken(v)(indent)(space)(v1.value0) + Data_Semigroup_Foldable.intercalateMap(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)(Data_Semigroup.semigroupString)(newline + indented)(formatLabeledMember)(v1.value1);
                  };
                  return formatClassHead(lines)(v)(indent)(declaration.value0) + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(formatMember)(declaration.value1) + newline);
              };
              if (declaration instanceof PureScript_CST_Types.DeclInstanceChain) {
                  return formatSeparated(v)(singleOrMultiline(PureScript_CST_Range.rangeOfSeparated(PureScript_CST_Range.rangeOfInstance(PureScript_CST_Range.rangeOfVoid)))(declaration.value0))(indent)(space)(formatInstance(v)(indent))(declaration.value0) + newline;
              };
              if (declaration instanceof PureScript_CST_Types.DeclDerive) {
                  return formatSourceToken(v)(indent)(blank)(declaration.value0) + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(formatSourceToken(v)(indent)(space))(declaration.value1) + (space + (formatInstanceHead(v)(indent)(declaration.value2) + newline)));
              };
              if (declaration instanceof PureScript_CST_Types.DeclKindSignature) {
                  return formatSourceToken(v)(v.indentation)(indent)(declaration.value0) + (space + formatLabeledNameType(v)(indent)(declaration.value1));
              };
              if (declaration instanceof PureScript_CST_Types.DeclSignature) {
                  return formatLabeledNameType(v)(indent)(declaration.value0);
              };
              if (declaration instanceof PureScript_CST_Types.DeclValue) {
                  return formatValueBindingFields(v)(indent)(declaration.value0) + newline;
              };
              if (declaration instanceof PureScript_CST_Types.DeclFixity) {
                  return formatFixityFields(v)(indent)(declaration.value0) + newline;
              };
              if (declaration instanceof PureScript_CST_Types.DeclForeign) {
                  return formatSourceToken(v)(indent)(blank)(declaration.value0) + (formatSourceToken(v)(indent)(space)(declaration.value1) + (space + (formatForeign(v)(indent)(declaration.value2) + newline)));
              };
              if (declaration instanceof PureScript_CST_Types.DeclRole) {
                  return formatSourceToken(v)(v.indentation)(indent)(declaration.value0) + (space + (formatSourceToken(v)(v.indentation)(indent)(declaration.value1) + (space + (formatName(v)(indent)(blank)(declaration.value2) + (Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Monoid.monoidString)(function (role$prime) {
                      return space + formatRole(v)(indent)(role$prime);
                  })(declaration.value3) + newline)))));
              };
              if (declaration instanceof PureScript_CST_Types.DeclError) {
                  return Data_Void.absurd(declaration.value0);
              };
              throw new Error("Failed pattern match at Format (line 303, column 65 - line 392, column 30): " + [ declaration.constructor.name ]);
          };
      };
  };
  var formatDeclarations = function (v) {
      var formatOne = function (declaration) {
          return newline + formatDeclaration(v)(blank)(declaration);
      };
      return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(formatOne);
  };
  var formatModuleBody = function (v) {
      return function (v1) {
          return formatDeclarations(v)(v1.decls) + formatCommentsTrailingModule(v1.trailingComments);
      };
  };
  var formatModule = function (settings) {
      return function (v) {
          return formatModuleHeader(settings)(v.header) + formatModuleBody(settings)(v.body);
      };
  };
  var format = formatModule;
  exports["format"] = format;
})(PS);
(function(exports) {
  exports.nodeFromPath = (path) => () => path.getValue()
})(PS["Prettier"] = PS["Prettier"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["PureScript.CST.Errors"] = $PS["PureScript.CST.Errors"] || {};
  var exports = $PS["PureScript.CST.Errors"];                            
  var UnexpectedEof = (function () {
      function UnexpectedEof() {

      };
      UnexpectedEof.value = new UnexpectedEof();
      return UnexpectedEof;
  })();
  var ExpectedEof = (function () {
      function ExpectedEof(value0) {
          this.value0 = value0;
      };
      ExpectedEof.create = function (value0) {
          return new ExpectedEof(value0);
      };
      return ExpectedEof;
  })();
  var UnexpectedToken = (function () {
      function UnexpectedToken(value0) {
          this.value0 = value0;
      };
      UnexpectedToken.create = function (value0) {
          return new UnexpectedToken(value0);
      };
      return UnexpectedToken;
  })();
  var LexExpected = (function () {
      function LexExpected(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LexExpected.create = function (value0) {
          return function (value1) {
              return new LexExpected(value0, value1);
          };
      };
      return LexExpected;
  })();
  var LexInvalidCharEscape = (function () {
      function LexInvalidCharEscape(value0) {
          this.value0 = value0;
      };
      LexInvalidCharEscape.create = function (value0) {
          return new LexInvalidCharEscape(value0);
      };
      return LexInvalidCharEscape;
  })();
  var LexCharEscapeOutOfRange = (function () {
      function LexCharEscapeOutOfRange(value0) {
          this.value0 = value0;
      };
      LexCharEscapeOutOfRange.create = function (value0) {
          return new LexCharEscapeOutOfRange(value0);
      };
      return LexCharEscapeOutOfRange;
  })();
  var LexHexOutOfRange = (function () {
      function LexHexOutOfRange(value0) {
          this.value0 = value0;
      };
      LexHexOutOfRange.create = function (value0) {
          return new LexHexOutOfRange(value0);
      };
      return LexHexOutOfRange;
  })();
  var LexIntOutOfRange = (function () {
      function LexIntOutOfRange(value0) {
          this.value0 = value0;
      };
      LexIntOutOfRange.create = function (value0) {
          return new LexIntOutOfRange(value0);
      };
      return LexIntOutOfRange;
  })();
  var LexNumberOutOfRange = (function () {
      function LexNumberOutOfRange(value0) {
          this.value0 = value0;
      };
      LexNumberOutOfRange.create = function (value0) {
          return new LexNumberOutOfRange(value0);
      };
      return LexNumberOutOfRange;
  })();
  exports["UnexpectedEof"] = UnexpectedEof;
  exports["ExpectedEof"] = ExpectedEof;
  exports["UnexpectedToken"] = UnexpectedToken;
  exports["LexExpected"] = LexExpected;
  exports["LexInvalidCharEscape"] = LexInvalidCharEscape;
  exports["LexCharEscapeOutOfRange"] = LexCharEscapeOutOfRange;
  exports["LexHexOutOfRange"] = LexHexOutOfRange;
  exports["LexIntOutOfRange"] = LexIntOutOfRange;
  exports["LexNumberOutOfRange"] = LexNumberOutOfRange;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["PureScript.CST.Layout"] = $PS["PureScript.CST.Layout"] || {};
  var exports = $PS["PureScript.CST.Layout"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var LytRoot = (function () {
      function LytRoot() {

      };
      LytRoot.value = new LytRoot();
      return LytRoot;
  })();
  var LytTopDecl = (function () {
      function LytTopDecl() {

      };
      LytTopDecl.value = new LytTopDecl();
      return LytTopDecl;
  })();
  var LytTopDeclHead = (function () {
      function LytTopDeclHead() {

      };
      LytTopDeclHead.value = new LytTopDeclHead();
      return LytTopDeclHead;
  })();
  var LytDeclGuard = (function () {
      function LytDeclGuard() {

      };
      LytDeclGuard.value = new LytDeclGuard();
      return LytDeclGuard;
  })();
  var LytCase = (function () {
      function LytCase() {

      };
      LytCase.value = new LytCase();
      return LytCase;
  })();
  var LytCaseBinders = (function () {
      function LytCaseBinders() {

      };
      LytCaseBinders.value = new LytCaseBinders();
      return LytCaseBinders;
  })();
  var LytCaseGuard = (function () {
      function LytCaseGuard() {

      };
      LytCaseGuard.value = new LytCaseGuard();
      return LytCaseGuard;
  })();
  var LytLambdaBinders = (function () {
      function LytLambdaBinders() {

      };
      LytLambdaBinders.value = new LytLambdaBinders();
      return LytLambdaBinders;
  })();
  var LytParen = (function () {
      function LytParen() {

      };
      LytParen.value = new LytParen();
      return LytParen;
  })();
  var LytBrace = (function () {
      function LytBrace() {

      };
      LytBrace.value = new LytBrace();
      return LytBrace;
  })();
  var LytSquare = (function () {
      function LytSquare() {

      };
      LytSquare.value = new LytSquare();
      return LytSquare;
  })();
  var LytIf = (function () {
      function LytIf() {

      };
      LytIf.value = new LytIf();
      return LytIf;
  })();
  var LytThen = (function () {
      function LytThen() {

      };
      LytThen.value = new LytThen();
      return LytThen;
  })();
  var LytProperty = (function () {
      function LytProperty() {

      };
      LytProperty.value = new LytProperty();
      return LytProperty;
  })();
  var LytForall = (function () {
      function LytForall() {

      };
      LytForall.value = new LytForall();
      return LytForall;
  })();
  var LytTick = (function () {
      function LytTick() {

      };
      LytTick.value = new LytTick();
      return LytTick;
  })();
  var LytLet = (function () {
      function LytLet() {

      };
      LytLet.value = new LytLet();
      return LytLet;
  })();
  var LytLetStmt = (function () {
      function LytLetStmt() {

      };
      LytLetStmt.value = new LytLetStmt();
      return LytLetStmt;
  })();
  var LytWhere = (function () {
      function LytWhere() {

      };
      LytWhere.value = new LytWhere();
      return LytWhere;
  })();
  var LytOf = (function () {
      function LytOf() {

      };
      LytOf.value = new LytOf();
      return LytOf;
  })();
  var LytDo = (function () {
      function LytDo() {

      };
      LytDo.value = new LytDo();
      return LytDo;
  })();
  var LytAdo = (function () {
      function LytAdo() {

      };
      LytAdo.value = new LytAdo();
      return LytAdo;
  })();
  var lytToken = function (pos) {
      return function (value) {
          return {
              range: {
                  start: pos,
                  end: pos
              },
              leadingComments: [  ],
              trailingComments: [  ],
              value: value
          };
      };
  };
  var isTopDecl = function (tokPos) {
      return function (v) {
          if (v instanceof Data_List_Types.Cons && (v.value0.value1 instanceof LytWhere && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0.value1 instanceof LytRoot && (v.value1.value1 instanceof Data_List_Types.Nil && tokPos.column === v.value0.value0.column))))) {
              return true;
          };
          return false;
      };
  };
  var isIndented = function (v) {
      if (v instanceof LytLet) {
          return true;
      };
      if (v instanceof LytLetStmt) {
          return true;
      };
      if (v instanceof LytWhere) {
          return true;
      };
      if (v instanceof LytOf) {
          return true;
      };
      if (v instanceof LytDo) {
          return true;
      };
      if (v instanceof LytAdo) {
          return true;
      };
      return false;
  };
  var eqLayoutDelim = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof LytRoot && y instanceof LytRoot) {
              return true;
          };
          if (x instanceof LytTopDecl && y instanceof LytTopDecl) {
              return true;
          };
          if (x instanceof LytTopDeclHead && y instanceof LytTopDeclHead) {
              return true;
          };
          if (x instanceof LytDeclGuard && y instanceof LytDeclGuard) {
              return true;
          };
          if (x instanceof LytCase && y instanceof LytCase) {
              return true;
          };
          if (x instanceof LytCaseBinders && y instanceof LytCaseBinders) {
              return true;
          };
          if (x instanceof LytCaseGuard && y instanceof LytCaseGuard) {
              return true;
          };
          if (x instanceof LytLambdaBinders && y instanceof LytLambdaBinders) {
              return true;
          };
          if (x instanceof LytParen && y instanceof LytParen) {
              return true;
          };
          if (x instanceof LytBrace && y instanceof LytBrace) {
              return true;
          };
          if (x instanceof LytSquare && y instanceof LytSquare) {
              return true;
          };
          if (x instanceof LytIf && y instanceof LytIf) {
              return true;
          };
          if (x instanceof LytThen && y instanceof LytThen) {
              return true;
          };
          if (x instanceof LytProperty && y instanceof LytProperty) {
              return true;
          };
          if (x instanceof LytForall && y instanceof LytForall) {
              return true;
          };
          if (x instanceof LytTick && y instanceof LytTick) {
              return true;
          };
          if (x instanceof LytLet && y instanceof LytLet) {
              return true;
          };
          if (x instanceof LytLetStmt && y instanceof LytLetStmt) {
              return true;
          };
          if (x instanceof LytWhere && y instanceof LytWhere) {
              return true;
          };
          if (x instanceof LytOf && y instanceof LytOf) {
              return true;
          };
          if (x instanceof LytDo && y instanceof LytDo) {
              return true;
          };
          if (x instanceof LytAdo && y instanceof LytAdo) {
              return true;
          };
          return false;
      };
  });
  var insertLayout = function (v) {
      return function (nextPos) {
          return function (stack) {
              var sepP = function (lytPos) {
                  return v.range.start.column === lytPos.column && v.range.start.line !== lytPos.line;
              };
              var pushStack = function (lytPos) {
                  return function (lyt) {
                      return function (v1) {
                          return new Data_Tuple.Tuple(new Data_List_Types.Cons(new Data_Tuple.Tuple(lytPos, lyt), v1.value0), v1.value1);
                      };
                  };
              };
              var popStack = function (v1) {
                  return function (v2) {
                      if (v2.value0 instanceof Data_List_Types.Cons && v1(v2.value0.value0.value1)) {
                          return new Data_Tuple.Tuple(v2.value0.value1, v2.value1);
                      };
                      return v2;
                  };
              };
              var offsideP = function (lytPos) {
                  return function (lyt) {
                      return isIndented(lyt) && v.range.start.column < lytPos.column;
                  };
              };
              var offsideEndP = function (lytPos) {
                  return function (lyt) {
                      return isIndented(lyt) && v.range.start.column <= lytPos.column;
                  };
              };
              var insertToken = function (token) {
                  return function (v1) {
                      return new Data_Tuple.Tuple(v1.value0, Data_Array.snoc(v1.value1)(new Data_Tuple.Tuple(token, v1.value0)));
                  };
              };
              var insertStart = function (lyt) {
                  return function (v1) {
                      var v2 = Data_Foldable.find(Data_List_Types.foldableList)(function ($298) {
                          return isIndented(Data_Tuple.snd($298));
                      })(v1.value0);
                      if (v2 instanceof Data_Maybe.Just && nextPos.column <= v2.value0.value0.column) {
                          return v1;
                      };
                      return insertToken(lytToken(nextPos)(new PureScript_CST_Types.TokLayoutStart(nextPos.column)))(pushStack(nextPos)(lyt)(v1));
                  };
              };
              var insertEnd = function (indent) {
                  return insertToken(lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutEnd(indent)));
              };
              var indentedP = Data_Function["const"](isIndented);
              var indentSepP = function (lytPos) {
                  return function (lyt) {
                      return isIndented(lyt) && sepP(lytPos);
                  };
              };
              var insertSep = function (v1) {
                  var sepTok = lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutSep(v.range.start.column));
                  if (v1.value0 instanceof Data_List_Types.Cons && (v1.value0.value0.value1 instanceof LytTopDecl && sepP(v1.value0.value0.value0))) {
                      return insertToken(sepTok)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                  };
                  if (v1.value0 instanceof Data_List_Types.Cons && (v1.value0.value0.value1 instanceof LytTopDeclHead && sepP(v1.value0.value0.value0))) {
                      return insertToken(sepTok)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                  };
                  if (v1.value0 instanceof Data_List_Types.Cons && indentSepP(v1.value0.value0.value0)(v1.value0.value0.value1)) {
                      if (v1.value0.value0.value1 instanceof LytOf) {
                          return pushStack(v.range.start)(LytCaseBinders.value)(insertToken(sepTok)(v1));
                      };
                      return insertToken(sepTok)(v1);
                  };
                  return v1;
              };
              var collapse = function (p) {
                  var go = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Data_List_Types.Cons && p(v1.value0.value0)(v1.value0.value1)) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = (function () {
                                      var $111 = isIndented(v1.value0.value1);
                                      if ($111) {
                                          return Data_Array.snoc(acc)(new Data_Tuple.Tuple(lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutEnd(v1.value0.value0.column)), v1.value1));
                                      };
                                      return acc;
                                  })();
                                  return;
                              };
                              $tco_done = true;
                              return new Data_Tuple.Tuple(v1, acc);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  return Data_Tuple.uncurry(go);
              };
              var insertDefault = function (state) {
                  return insertToken(v)(insertSep(collapse(offsideP)(state)));
              };
              var insertKwProperty = function (k) {
                  return function (state) {
                      var v1 = insertDefault(state);
                      if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytProperty) {
                          return new Data_Tuple.Tuple(v1.value0.value1, v1.value1);
                      };
                      return k(v1);
                  };
              };
              var insert = function (v1) {
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "data")) {
                      var v2 = insertDefault(v1);
                      if (isTopDecl(v.range.start)(v2.value0)) {
                          return pushStack(v.range.start)(LytTopDecl.value)(v2);
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "class")) {
                      var v2 = insertDefault(v1);
                      if (isTopDecl(v.range.start)(v2.value0)) {
                          return pushStack(v.range.start)(LytTopDeclHead.value)(v2);
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "where")) {
                      var whereP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytDo) {
                                  return true;
                              };
                              return offsideEndP(v2)(v3);
                          };
                      };
                      if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytTopDeclHead) {
                          return insertStart(LytWhere.value)(insertToken(v)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1)));
                      };
                      if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytProperty) {
                          return insertToken(v)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                      };
                      return insertStart(LytWhere.value)(insertToken(v)(collapse(whereP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "in")) {
                      var inP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytLet) {
                                  return false;
                              };
                              if (v3 instanceof LytAdo) {
                                  return false;
                              };
                              return isIndented(v3);
                          };
                      };
                      var v2 = collapse(inP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytLetStmt && (v2.value0.value1 instanceof Data_List_Types.Cons && v2.value0.value1.value0.value1 instanceof LytAdo))) {
                          return insertToken(v)(insertEnd(v2.value0.value1.value0.value0.column)(insertEnd(v2.value0.value0.value0.column)(new Data_Tuple.Tuple(v2.value0.value1.value1, v2.value1))));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && isIndented(v2.value0.value0.value1)) {
                          return insertToken(v)(insertEnd(v2.value0.value0.value0.column)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1)));
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "let")) {
                      var next = function (v2) {
                          if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytDo && v2.value0.value0.value0.column === v.range.start.column)) {
                              return insertStart(LytLetStmt.value)(v2);
                          };
                          if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytAdo && v2.value0.value0.value0.column === v.range.start.column)) {
                              return insertStart(LytLetStmt.value)(v2);
                          };
                          return insertStart(LytLet.value)(v2);
                      };
                      return insertKwProperty(next)(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value1 === "do") {
                      return insertKwProperty(insertStart(LytDo.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value1 === "ado") {
                      return insertKwProperty(insertStart(LytAdo.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "case")) {
                      return insertKwProperty(pushStack(v.range.start)(LytCase.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "of")) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytCase) {
                          return pushStack(nextPos)(LytCaseBinders.value)(insertStart(LytOf.value)(insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1))));
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(insertDefault(v2));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "if")) {
                      return insertKwProperty(pushStack(v.range.start)(LytIf.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "then")) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytIf) {
                          return pushStack(v.range.start)(LytThen.value)(insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1)));
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "else")) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytThen) {
                          return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                      };
                      var v3 = collapse(offsideP)(v1);
                      if (isTopDecl(v.range.start)(v3.value0)) {
                          return insertToken(v)(v3);
                      };
                      return popStack(function (v4) {
                          return Data_Eq.eq(eqLayoutDelim)(v4)(LytProperty.value);
                      })(insertToken(v)(insertSep(v3)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokForall) {
                      return insertKwProperty(pushStack(v.range.start)(LytForall.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokBackslash) {
                      return pushStack(v.range.start)(LytLambdaBinders.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightArrow) {
                      var guardP = function (v2) {
                          if (v2 instanceof LytCaseBinders) {
                              return true;
                          };
                          if (v2 instanceof LytCaseGuard) {
                              return true;
                          };
                          if (v2 instanceof LytLambdaBinders) {
                              return true;
                          };
                          return false;
                      };
                      var arrowP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytDo) {
                                  return true;
                              };
                              if (v3 instanceof LytOf) {
                                  return false;
                              };
                              return offsideEndP(v2)(v3);
                          };
                      };
                      return insertToken(v)(popStack(guardP)(collapse(arrowP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokEquals) {
                      var equalsP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytWhere) {
                                  return true;
                              };
                              if (v3 instanceof LytLet) {
                                  return true;
                              };
                              if (v3 instanceof LytLetStmt) {
                                  return true;
                              };
                              return false;
                          };
                      };
                      var v2 = collapse(equalsP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytDeclGuard) {
                          return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                      };
                      return insertDefault(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokPipe) {
                      var v2 = collapse(offsideEndP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytOf) {
                          return insertToken(v)(pushStack(v.range.start)(LytCaseGuard.value)(v2));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytLet) {
                          return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytLetStmt) {
                          return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytWhere) {
                          return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                      };
                      return insertDefault(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokTick) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytTick) {
                          return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                      };
                      return pushStack(v.range.start)(LytTick.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokComma) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytBrace) {
                          return pushStack(v.range.start)(LytProperty.value)(insertToken(v)(v2));
                      };
                      return insertToken(v)(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokDot) {
                      var v2 = insertDefault(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytForall) {
                          return new Data_Tuple.Tuple(v2.value0.value1, v2.value1);
                      };
                      return pushStack(v.range.start)(LytProperty.value)(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLeftParen) {
                      return pushStack(v.range.start)(LytParen.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLeftBrace) {
                      return pushStack(v.range.start)(LytProperty.value)(pushStack(v.range.start)(LytBrace.value)(insertDefault(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLeftSquare) {
                      return pushStack(v.range.start)(LytSquare.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightParen) {
                      return insertToken(v)(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytParen.value);
                      })(collapse(indentedP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightBrace) {
                      return insertToken(v)(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytBrace.value);
                      })(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytProperty.value);
                      })(collapse(indentedP)(v1))));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightSquare) {
                      return insertToken(v)(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytSquare.value);
                      })(collapse(indentedP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokString) {
                      return popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value0 instanceof Data_Maybe.Nothing) {
                      return popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokOperator) {
                      return insertToken(v)(insertSep(collapse(offsideEndP)(v1)));
                  };
                  return insertDefault(v1);
              };
              return insert(new Data_Tuple.Tuple(stack, [  ]));
          };
      };
  }; 
  var currentIndent = (function () {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons) {
                  if (isIndented(v.value0.value1)) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0.value0);
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = v.value1;
                      return;
                  };
              };
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return go;
  })();
  exports["LytRoot"] = LytRoot;
  exports["currentIndent"] = currentIndent;
  exports["isIndented"] = isIndented;
  exports["insertLayout"] = insertLayout;
  exports["lytToken"] = lytToken;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["PureScript.CST.TokenStream"] = $PS["PureScript.CST.TokenStream"] || {};
  var exports = $PS["PureScript.CST.TokenStream"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Layout = $PS["PureScript.CST.Layout"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var TokenEOF = (function () {
      function TokenEOF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokenEOF.create = function (value0) {
          return function (value1) {
              return new TokenEOF(value0, value1);
          };
      };
      return TokenEOF;
  })();
  var TokenError = (function () {
      function TokenError(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      TokenError.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new TokenError(value0, value1, value2, value3);
                  };
              };
          };
      };
      return TokenError;
  })();
  var TokenCons = (function () {
      function TokenCons(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      TokenCons.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new TokenCons(value0, value1, value2, value3);
                  };
              };
          };
      };
      return TokenCons;
  })();
  var TokenStream = function (x) {
      return x;
  }; 
  var step = (function () {
      var $29 = Data_Newtype.unwrap();
      return function ($30) {
          return Data_Lazy.force($29($30));
      };
  })();
  var unwindLayout = function (pos) {
      return function (eof) {
          var go = function (stk) {
              return TokenStream(Data_Lazy.defer(function (v) {
                  if (stk instanceof Data_List_Types.Nil) {
                      return step(eof);
                  };
                  if (stk instanceof Data_List_Types.Cons) {
                      if (stk.value0.value1 instanceof PureScript_CST_Layout.LytRoot) {
                          return step(eof);
                      };
                      if (PureScript_CST_Layout.isIndented(stk.value0.value1)) {
                          return new TokenCons(PureScript_CST_Layout.lytToken(pos)(new PureScript_CST_Types.TokLayoutEnd(stk.value0.value0.column)), pos, go(stk.value1), stk.value1);
                      };
                      if (Data_Boolean.otherwise) {
                          return step(go(stk.value1));
                      };
                      throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 59, column 7 - line 65, column 27): " + [ stk.value0.value1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 56, column 43 - line 65, column 27): " + [ stk.constructor.name ]);
              }));
          };
          return go;
      };
  };
  var layoutStack = function (stream) {
      var v = step(stream);
      if (v instanceof TokenEOF) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof TokenError) {
          return v.value3;
      };
      if (v instanceof TokenCons) {
          return v.value3;
      };
      throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 48, column 22 - line 51, column 29): " + [ v.constructor.name ]);
  };
  var consTokens = function (dictFoldable) {
      var go = function (v) {
          return function (v1) {
              return Data_Tuple.Tuple.create(v.value0.range.start)(TokenStream(Data_Lazy.defer(function (v2) {
                  return new TokenCons(v.value0, v1.value0, v1.value1, v.value1);
              })));
          };
      };
      return Data_Function.flip(Data_Foldable.foldr(dictFoldable)(go));
  };
  exports["TokenStream"] = TokenStream;
  exports["TokenEOF"] = TokenEOF;
  exports["TokenError"] = TokenError;
  exports["TokenCons"] = TokenCons;
  exports["step"] = step;
  exports["consTokens"] = consTokens;
  exports["layoutStack"] = layoutStack;
  exports["unwindLayout"] = unwindLayout;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["PureScript.CST.Lexer"] = $PS["PureScript.CST.Lexer"] || {};
  var exports = $PS["PureScript.CST.Lexer"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Number = $PS["Data.Number"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var PureScript_CST_Errors = $PS["PureScript.CST.Errors"];
  var PureScript_CST_Layout = $PS["PureScript.CST.Layout"];
  var PureScript_CST_TokenStream = $PS["PureScript.CST.TokenStream"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var LexFail = (function () {
      function LexFail(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LexFail.create = function (value0) {
          return function (value1) {
              return new LexFail(value0, value1);
          };
      };
      return LexFail;
  })();
  var LexSucc = (function () {
      function LexSucc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LexSucc.create = function (value0) {
          return function (value1) {
              return new LexSucc(value0, value1);
          };
      };
      return LexSucc;
  })();
  var Lex = function (x) {
      return x;
  };
  var $$try = function (v) {
      return function (str) {
          var v1 = v(str);
          if (v1 instanceof LexFail) {
              return new LexFail(v1.value0, str);
          };
          if (v1 instanceof LexSucc) {
              return new LexSucc(v1.value0, v1.value1);
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 81, column 3 - line 83, column 31): " + [ v1.constructor.name ]);
      };
  };
  var toModuleName = function (v) {
      if (v.length === 0) {
          return Data_Maybe.Nothing.value;
      };
      return Data_Maybe.Just.create(PureScript_CST_Types.ModuleName(Data_String_Common.joinWith(".")(v)));
  };
  var qualLength = Data_Maybe.maybe(0)((function () {
      var $244 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
      var $245 = Data_Newtype.unwrap();
      return function ($246) {
          return $244(Data_String_CodePoints.length($245($246)));
      };
  })());
  var optional = function (v) {
      return function (str) {
          var v1 = v(str);
          if (v1 instanceof LexFail) {
              if (Data_String_CodeUnits.length(str) === Data_String_CodeUnits.length(v1.value1)) {
                  return new LexSucc(Data_Maybe.Nothing.value, str);
              };
              if (Data_Boolean.otherwise) {
                  return new LexFail(v1.value0, v1.value1);
              };
          };
          if (v1 instanceof LexSucc) {
              return new LexSucc(new Data_Maybe.Just(v1.value0), v1.value1);
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 137, column 3 - line 144, column 25): " + [ v1.constructor.name ]);
      };
  };    
  var mkUnexpected = function (str) {
      var start = Data_String_CodePoints.take(6)(str);
      var len = Data_String_CodePoints.length(start);
      var $87 = len === 0;
      if ($87) {
          return "end of file";
      };
      var $88 = len < 6;
      if ($88) {
          return start;
      };
      return start + "...";
  };
  var regex = function (mkErr) {
      return function (regexStr) {
          var matchRegex = Data_String_Regex_Unsafe.unsafeRegex("^(?:" + (regexStr + ")"))(Data_String_Regex_Flags.unicode);
          return function (str) {
              var v = Data_String_Regex.match(matchRegex)(str);
              var v1 = function (v2) {
                  return new LexFail(function (v3) {
                      return mkErr(mkUnexpected(str));
                  }, str);
              };
              if (v instanceof Data_Maybe.Just) {
                  var $90 = Data_Array_NonEmpty.head(v.value0);
                  if ($90 instanceof Data_Maybe.Just) {
                      return new LexSucc($90.value0, Data_String_CodeUnits.drop(Data_String_CodeUnits.length($90.value0))(str));
                  };
                  return v1(true);
              };
              return v1(true);
          };
      };
  };
  var satisfy = function (mkErr) {
      return function (p) {
          return function (str) {
              var v = Data_String_CodeUnits.charAt(0)(str);
              if (v instanceof Data_Maybe.Just && p(v.value0)) {
                  return new LexSucc(v.value0, Data_String_CodeUnits.drop(1)(str));
              };
              return new LexFail(function (v1) {
                  return mkErr(mkUnexpected(str));
              }, str);
          };
      };
  };
  var string = function (mkErr) {
      return function (match) {
          return function (str) {
              var $95 = Data_String_CodeUnits.take(Data_String_CodeUnits.length(match))(str) === match;
              if ($95) {
                  return new LexSucc(match, Data_String_CodeUnits.drop(Data_String_CodeUnits.length(match))(str));
              };
              return new LexFail(function (v) {
                  return mkErr(mkUnexpected(str));
              }, str);
          };
      };
  };
  var many = function (v) {
      return function (str) {
          var go = function ($copy_acc) {
              return function ($copy_str$prime) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, str$prime) {
                      var v1 = v(str$prime);
                      if (v1 instanceof LexFail) {
                          if (Data_String_CodeUnits.length(str$prime) === Data_String_CodeUnits.length(v1.value1)) {
                              $tco_done = true;
                              return new LexSucc(acc, str$prime);
                          };
                          if (Data_Boolean.otherwise) {
                              $tco_done = true;
                              return new LexFail(v1.value0, v1.value1);
                          };
                      };
                      if (v1 instanceof LexSucc) {
                          $tco_var_acc = Data_Array.snoc(acc)(v1.value0);
                          $copy_str$prime = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 163, column 7 - line 170, column 38): " + [ v1.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $copy_str$prime);
                  };
                  return $tco_result;
              };
          };
          return go([  ])(str);
      };
  };
  var functorLex = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function (str) {
              var v1 = v(str);
              if (v1 instanceof LexFail) {
                  return new LexFail(v1.value0, v1.value1);
              };
              if (v1 instanceof LexSucc) {
                  return new LexSucc(f(v1.value0), v1.value1);
              };
              throw new Error("Failed pattern match at PureScript.CST.Lexer (line 43, column 5 - line 45, column 37): " + [ v1.constructor.name ]);
          };
      };
  });
  var spaceComment = Data_Functor.map(functorLex)(Data_String_CodeUnits.length)(regex(PureScript_CST_Errors.LexExpected.create("spaces"))(" +"));
  var fail = function ($249) {
      return Lex(LexFail.create(Data_Function["const"]($249)));
  };
  var char$prime = function (mkErr) {
      return function (res) {
          return function (match) {
              return function (str) {
                  var $110 = Data_String_CodeUnits.singleton(match) === Data_String_CodeUnits.take(1)(str);
                  if ($110) {
                      return new LexSucc(res, Data_String_CodeUnits.drop(1)(str));
                  };
                  return new LexFail(function (v) {
                      return mkErr(mkUnexpected(str));
                  }, str);
              };
          };
      };
  };
  var $$char = function (mkErr) {
      return function (match) {
          return function (str) {
              var $111 = Data_String_CodeUnits.singleton(match) === Data_String_CodeUnits.take(1)(str);
              if ($111) {
                  return new LexSucc(match, Data_String_CodeUnits.drop(1)(str));
              };
              return new LexFail(function (v) {
                  return mkErr(mkUnexpected(str));
              }, str);
          };
      };
  };
  var bumpText = function (v) {
      return function (colOffset) {
          return function (str) {
              var go = function ($copy_n) {
                  return function ($copy_ix) {
                      var $tco_var_n = $copy_n;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(n, ix) {
                          var v1 = Data_String_CodeUnits["indexOf'"]("\x0a")(ix)(str);
                          if (v1 instanceof Data_Maybe.Just) {
                              $tco_var_n = n + 1 | 0;
                              $copy_ix = v1.value0 + 1 | 0;
                              return;
                          };
                          if (v1 instanceof Data_Maybe.Nothing) {
                              if (n === 0) {
                                  $tco_done = true;
                                  return {
                                      line: v.line,
                                      column: (v.column + Data_String_CodePoints.length(str) | 0) + (colOffset * 2 | 0) | 0
                                  };
                              };
                              if (Data_Boolean.otherwise) {
                                  $tco_done = true;
                                  return {
                                      line: v.line + n | 0,
                                      column: Data_String_CodePoints.length(Data_String_CodeUnits.drop(ix)(str)) + colOffset | 0
                                  };
                              };
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 319, column 13 - line 328, column 12): " + [ v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_n, $copy_ix);
                      };
                      return $tco_result;
                  };
              };
              return go(0)(0);
          };
      };
  };
  var bumpToken = function (v) {
      return function (v1) {
          if (v1 instanceof PureScript_CST_Types.TokLeftParen) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightParen) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftBrace) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightBrace) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftSquare) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightSquare) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightFatArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightFatArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokDoubleColon && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokDoubleColon && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokForall && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 6 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokForall && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokEquals) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokPipe) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokTick) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokDot) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokComma) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokUnderscore) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokBackslash) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokAt) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLowerName) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokUpperName) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokOperator) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokSymbolName) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokSymbolArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokSymbolArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 4 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokHole) {
              return {
                  line: v.line,
                  column: (v.column + Data_String_CodePoints.length(v1.value0) | 0) + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokChar) {
              return {
                  line: v.line,
                  column: (v.column + Data_String_CodePoints.length(v1.value0) | 0) + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokInt) {
              return {
                  line: v.line,
                  column: v.column + Data_String_CodePoints.length(v1.value0) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokNumber) {
              return {
                  line: v.line,
                  column: v.column + Data_String_CodePoints.length(v1.value0) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokString) {
              return bumpText(v)(1)(v1.value0);
          };
          if (v1 instanceof PureScript_CST_Types.TokRawString) {
              return bumpText(v)(3)(v1.value0);
          };
          if (v1 instanceof PureScript_CST_Types.TokLayoutStart) {
              return v;
          };
          if (v1 instanceof PureScript_CST_Types.TokLayoutSep) {
              return v;
          };
          if (v1 instanceof PureScript_CST_Types.TokLayoutEnd) {
              return v;
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 236, column 34 - line 314, column 8): " + [ v1.constructor.name ]);
      };
  };
  var bumpComment = function (v) {
      return function (v1) {
          if (v1 instanceof PureScript_CST_Types.Comment) {
              return bumpText(v)(0)(v1.value0);
          };
          if (v1 instanceof PureScript_CST_Types.Space) {
              return {
                  line: v.line,
                  column: v.column + v1.value0 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.Line) {
              return {
                  line: v.line + v1.value1 | 0,
                  column: 0
              };
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 331, column 36 - line 337, column 34): " + [ v1.constructor.name ]);
      };
  };
  var applyLex = new Control_Apply.Apply(function () {
      return functorLex;
  }, function (v) {
      return function (v1) {
          return function (str) {
              var v2 = v(str);
              if (v2 instanceof LexFail) {
                  return new LexFail(v2.value0, v2.value1);
              };
              if (v2 instanceof LexSucc) {
                  var v3 = v1(v2.value1);
                  if (v3 instanceof LexFail) {
                      return new LexFail(v3.value0, v3.value1);
                  };
                  if (v3 instanceof LexSucc) {
                      return new LexSucc(v2.value0(v3.value0), v3.value1);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 52, column 9 - line 55, column 32): " + [ v3.constructor.name ]);
              };
              throw new Error("Failed pattern match at PureScript.CST.Lexer (line 49, column 5 - line 55, column 32): " + [ v2.constructor.name ]);
          };
      };
  });
  var bindLex = new Control_Bind.Bind(function () {
      return applyLex;
  }, function (v) {
      return function (k) {
          return function (str) {
              var v1 = v(str);
              if (v1 instanceof LexFail) {
                  return new LexFail(v1.value0, v1.value1);
              };
              if (v1 instanceof LexSucc) {
                  var v2 = k(v1.value0);
                  return v2(v1.value1);
              };
              throw new Error("Failed pattern match at PureScript.CST.Lexer (line 62, column 5 - line 66, column 16): " + [ v1.constructor.name ]);
          };
      };
  });
  var applicativeLex = new Control_Applicative.Applicative(function () {
      return applyLex;
  }, function ($250) {
      return Lex(LexSucc.create($250));
  });
  var altLex = new Control_Alt.Alt(function () {
      return functorLex;
  }, function (v) {
      return function (v1) {
          return function (str) {
              var v2 = v(str);
              if (v2 instanceof LexFail) {
                  if (Data_String_CodeUnits.length(str) === Data_String_CodeUnits.length(v2.value1)) {
                      return v1(str);
                  };
                  if (Data_Boolean.otherwise) {
                      return new LexFail(v2.value0, v2.value1);
                  };
              };
              if (v2 instanceof LexSucc) {
                  return new LexSucc(v2.value0, v2.value1);
              };
              throw new Error("Failed pattern match at PureScript.CST.Lexer (line 70, column 5 - line 77, column 20): " + [ v2.constructor.name ]);
          };
      };
  });
  var comment = Control_Alt.alt(altLex)(regex(PureScript_CST_Errors.LexExpected.create("block comment"))("\\{-(-(?!\\})|[^-]+)*-\\}"))(regex(PureScript_CST_Errors.LexExpected.create("line comment"))("--[^\\r\\n]*"));
  var lineComment = Control_Alt.alt(altLex)(Data_Functor.map(functorLex)((function () {
      var $251 = PureScript_CST_Types.Line.create(PureScript_CST_Types.LF.value);
      return function ($252) {
          return $251(Data_String_CodePoints.length($252));
      };
  })())(regex(PureScript_CST_Errors.LexExpected.create("newline"))("\x0a+")))(Data_Functor.map(functorLex)((function () {
      var $253 = PureScript_CST_Types.Line.create(PureScript_CST_Types.CRLF.value);
      return function ($254) {
          return $253((function (v) {
              return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v)(2);
          })(Data_String_CodePoints.length($254)));
      };
  })())(regex(PureScript_CST_Errors.LexExpected.create("newline"))("(?:\x0d\x0a)+")));
  var leadingComments = many(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Data_Functor.map(functorLex)(PureScript_CST_Types.Comment.create)(comment))(Data_Functor.map(functorLex)(PureScript_CST_Types.Space.create)(spaceComment)))(lineComment));
  var token = (function () {
      var tokenTick = char$prime(PureScript_CST_Errors.LexExpected.create("backtick"))(PureScript_CST_Types.TokTick.value)("`");
      var tokenRightSquare = char$prime(PureScript_CST_Errors.LexExpected.create("right square"))(PureScript_CST_Types.TokRightSquare.value)("]");
      var tokenRightParen = char$prime(PureScript_CST_Errors.LexExpected.create("right paren"))(PureScript_CST_Types.TokRightParen.value)(")");
      var tokenRightBrace = char$prime(PureScript_CST_Errors.LexExpected.create("right brace"))(PureScript_CST_Types.TokRightBrace.value)("}");
      var tokenLeftSquare = char$prime(PureScript_CST_Errors.LexExpected.create("left square"))(PureScript_CST_Types.TokLeftSquare.value)("[");
      var tokenLeftParen = char$prime(PureScript_CST_Errors.LexExpected.create("left paren"))(PureScript_CST_Types.TokLeftParen.value)("(");
      var tokenLeftBrace = char$prime(PureScript_CST_Errors.LexExpected.create("left brace"))(PureScript_CST_Types.TokLeftBrace.value)("{");
      var tokenComma = char$prime(PureScript_CST_Errors.LexExpected.create("comma"))(PureScript_CST_Types.TokComma.value)(",");
      var stripUnderscores = Data_String_Common.replaceAll("_")("");
      var stringSpaceEscapeRegex = regex(PureScript_CST_Errors.LexExpected.create("whitespace escape"))("\\\\[ \\r\\n]+\\\\");
      var stringCharsRegex = regex(PureScript_CST_Errors.LexExpected.create("string characters"))("[^\"\\\\]+");
      var rawStringCharsRegex = regex(PureScript_CST_Errors.LexExpected.create("raw string characters"))("\"\"\"\"{0,2}([^\"]+\"{1,2})*[^\"]*\"\"\"");
      var parseSymbolIdent = regex(PureScript_CST_Errors.LexExpected.create("symbol"))("(?:[:!#$%&*+./<=>?@\\\\^|~-]|(?!\\p{P})\\p{S})+");
      var parseSymbol = Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  if (v === "->") {
                      return new PureScript_CST_Types.TokSymbolArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2192") {
                      return new PureScript_CST_Types.TokSymbolArrow(PureScript_CST_Types.Unicode.value);
                  };
                  return new PureScript_CST_Types.TokSymbolName(Data_Maybe.Nothing.value, v);
              };
              return new PureScript_CST_Types.TokSymbolName(v1, v);
          };
      })($$try(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(tokenLeftParen)(parseSymbolIdent))(tokenRightParen)));
      var parseStringSpaceEscape = Data_Functor.map(functorLex)(function (v) {
          return {
              raw: v,
              string: ""
          };
      })(stringSpaceEscapeRegex);
      var parseStringChars = Data_Functor.map(functorLex)(function (v) {
          return {
              raw: v,
              string: v
          };
      })(stringCharsRegex);
      var parseRawString = Data_Functor.map(functorLex)(function (v) {
          return PureScript_CST_Types.TokRawString.create(Data_String_CodeUnits.dropRight(3)(Data_String_CodeUnits.drop(3)(v)));
      })(rawStringCharsRegex);
      var parseProper = regex(PureScript_CST_Errors.LexExpected.create("proper name"))("\\p{Lu}[\\p{L}0-9_']*");
      var parseUpper = Data_Functor.map(functorLex)(Data_Function.flip(PureScript_CST_Types.TokUpperName.create))(parseProper);
      var parseOperator = Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  if (v === "<-") {
                      return new PureScript_CST_Types.TokLeftArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2190") {
                      return new PureScript_CST_Types.TokLeftArrow(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "->") {
                      return new PureScript_CST_Types.TokRightArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2192") {
                      return new PureScript_CST_Types.TokRightArrow(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "=>") {
                      return new PureScript_CST_Types.TokRightFatArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u21d2") {
                      return new PureScript_CST_Types.TokRightFatArrow(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "::") {
                      return new PureScript_CST_Types.TokDoubleColon(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2237") {
                      return new PureScript_CST_Types.TokDoubleColon(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "\u2200") {
                      return new PureScript_CST_Types.TokForall(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "=") {
                      return PureScript_CST_Types.TokEquals.value;
                  };
                  if (v === ".") {
                      return PureScript_CST_Types.TokDot.value;
                  };
                  if (v === "\\") {
                      return PureScript_CST_Types.TokBackslash.value;
                  };
                  if (v === "|") {
                      return PureScript_CST_Types.TokPipe.value;
                  };
                  if (v === "@") {
                      return PureScript_CST_Types.TokAt.value;
                  };
                  if (v === "`") {
                      return PureScript_CST_Types.TokTick.value;
                  };
                  return new PureScript_CST_Types.TokOperator(Data_Maybe.Nothing.value, v);
              };
              return new PureScript_CST_Types.TokOperator(v1, v);
          };
      })(parseSymbolIdent);
      var parseIdent = regex(PureScript_CST_Errors.LexExpected.create("ident"))("[\\p{Ll}_][\\p{L}0-9_']*");
      var parseLower = Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  if (v === "forall") {
                      return new PureScript_CST_Types.TokForall(PureScript_CST_Types.ASCII.value);
                  };
                  return new PureScript_CST_Types.TokLowerName(Data_Maybe.Nothing.value, v);
              };
              return new PureScript_CST_Types.TokLowerName(v1, v);
          };
      })(parseIdent);
      var parseName = Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseLower)(parseUpper))(parseOperator))(parseSymbol);
      var parseExponentSign = Control_Alt.alt(altLex)(string(PureScript_CST_Errors.LexExpected.create("negative"))("-"))(string(PureScript_CST_Errors.LexExpected.create("positive"))("+"));
      var intPartRegex = regex(PureScript_CST_Errors.LexExpected.create("int part"))("(0|[1-9][0-9_]*)");
      var parseExponentPart = Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              return {
                  sign: v,
                  exponent: v1
              };
          };
      })(optional(parseExponentSign)))(intPartRegex);
      var hexIntRegex = regex(PureScript_CST_Errors.LexExpected.create("hex int"))("[a-fA-F0-9]+");
      var hexIntPrefix = string(PureScript_CST_Errors.LexExpected.create("hex int prefix"))("0x");
      var parseHexInt = Control_Bind.bind(bindLex)(Control_Apply.applySecond(applyLex)(hexIntPrefix)(hexIntRegex))(function (raw) {
          var v = Data_Int.fromStringAs(Data_Int.hexadecimal)(raw);
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt("0x" + raw, v.value0));
          };
          if (v instanceof Data_Maybe.Nothing) {
              return fail(new PureScript_CST_Errors.LexHexOutOfRange(raw));
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 567, column 5 - line 571, column 36): " + [ v.constructor.name ]);
      });
      var hexEscapeRegex = regex(PureScript_CST_Errors.LexExpected.create("hex"))("[a-fA-F0-9]{1,6}");
      var parseHexEscape = Control_Bind.bind(bindLex)(hexEscapeRegex)(function (esc) {
          var v = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Char.fromCharCode)(Data_Int.fromStringAs(Data_Int.hexadecimal)(esc));
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\x" + esc,
                  "char": v.value0
              });
          };
          if (v instanceof Data_Maybe.Nothing) {
              return fail(new PureScript_CST_Errors.LexCharEscapeOutOfRange(esc));
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 515, column 5 - line 519, column 43): " + [ v.constructor.name ]);
      });
      var fractionPartRegex = regex(PureScript_CST_Errors.LexExpected.create("fraction part"))("[0-9_]+");
      var charSingleQuote = $$char(PureScript_CST_Errors.LexExpected.create("single quote"))("'");
      var charQuote = $$char(PureScript_CST_Errors.LexExpected.create("quote"))("\"");
      var charQuestionMark = $$char(PureScript_CST_Errors.LexExpected.create("question mark"))("?");
      var parseHole = Data_Functor.map(functorLex)(function (v) {
          return new PureScript_CST_Types.TokHole(v);
      })($$try(Control_Apply.applySecond(applyLex)(charQuestionMark)(Control_Alt.alt(altLex)(parseIdent)(parseProper))));
      var charExponent = $$char(PureScript_CST_Errors.LexExpected.create("exponent"))("e");
      var charDot = $$char(PureScript_CST_Errors.LexExpected.create("dot"))(".");
      var parseModuleName = Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              return v1(toModuleName(v));
          };
      })(many($$try(Control_Apply.applyFirst(applyLex)(parseProper)(charDot)))))(parseName);
      var parseNumber = Control_Bind.bind(bindLex)(intPartRegex)(function (intPart) {
          return Control_Bind.bind(bindLex)(optional($$try(Control_Apply.applySecond(applyLex)(charDot)(fractionPartRegex))))(function (fractionPart) {
              return Control_Bind.bind(bindLex)(optional(Control_Apply.applySecond(applyLex)(charExponent)(parseExponentPart)))(function (exponentPart) {
                  var $215 = Data_Maybe.isNothing(fractionPart) && Data_Maybe.isNothing(exponentPart);
                  if ($215) {
                      var v = Data_Int.fromString(intPart);
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt(intPart, v.value0));
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return fail(new PureScript_CST_Errors.LexIntOutOfRange(intPart));
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 578, column 7 - line 582, column 42): " + [ v.constructor.name ]);
                  };
                  var raw = intPart + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (fr) {
                      return "." + fr;
                  })(fractionPart) + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (ex) {
                      return "e" + (Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(ex.sign) + ex.exponent);
                  })(exponentPart));
                  var v = Data_Number.fromString(stripUnderscores(raw));
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokNumber(raw, v.value0));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return fail(new PureScript_CST_Errors.LexNumberOutOfRange(raw));
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 589, column 7 - line 593, column 41): " + [ v.constructor.name ]);
              });
          });
      });
      var parseNumericLiteral = Control_Alt.alt(altLex)(parseHexInt)(parseNumber);
      var charBackslash = $$char(PureScript_CST_Errors.LexExpected.create("backslash"))("\\");
      var charAny = satisfy(PureScript_CST_Errors.LexExpected.create("char"))(Data_Function["const"](true));
      var parseEscape = Control_Bind.bind(bindLex)(charAny)(function (ch) {
          if (ch === "t") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\t",
                  "char": "\x09"
              });
          };
          if (ch === "r") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\r",
                  "char": "\x0d"
              });
          };
          if (ch === "n") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\n",
                  "char": "\x0a"
              });
          };
          if (ch === "\"") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\\"",
                  "char": "\""
              });
          };
          if (ch === "'") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\'",
                  "char": "'"
              });
          };
          if (ch === "\\") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\\\",
                  "char": "\\"
              });
          };
          if (ch === "x") {
              return parseHexEscape;
          };
          return fail(PureScript_CST_Errors.LexInvalidCharEscape.create(Data_String_CodeUnits.singleton(ch)));
      });
      var parseChar = Control_Bind.bind(bindLex)(charAny)(function (ch) {
          if (ch === "\\") {
              return parseEscape;
          };
          if (ch === "'") {
              return fail(new PureScript_CST_Errors.LexExpected("character", "empty character literal"));
          };
          return Control_Applicative.pure(applicativeLex)({
              raw: Data_String_CodeUnits.singleton(ch),
              "char": ch
          });
      });
      var parseCharLiteral = Data_Functor.map(functorLex)(function (v) {
          return new PureScript_CST_Types.TokChar(v.raw, v["char"]);
      })(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(charSingleQuote)(parseChar))(charSingleQuote));
      var parseStringEscape = Data_Functor.map(functorLex)(function (v) {
          return {
              raw: v.raw,
              string: Data_String_CodeUnits.singleton(v["char"])
          };
      })(Control_Apply.applySecond(applyLex)(charBackslash)(parseEscape));
      var parseStringPart = Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseStringChars)(parseStringSpaceEscape))(parseStringEscape);
      var parseString = Data_Functor.map(functorLex)(function (v) {
          var v1 = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
              return "raw";
          }))(Data_Monoid.monoidString)()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
              return "string";
          }))(Data_Monoid.monoidString)()(Data_Monoid.monoidRecordNil))))(v);
          return new PureScript_CST_Types.TokString(v1.raw, v1.string);
      })(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(charQuote)(many(parseStringPart)))(charQuote));
      var parseStringLiteral = Control_Alt.alt(altLex)(parseRawString)(parseString);
      return Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseHole)(parseModuleName))(parseCharLiteral))(parseStringLiteral))(parseNumericLiteral))(tokenLeftParen))(tokenRightParen))(tokenLeftBrace))(tokenRightBrace))(tokenLeftSquare))(tokenRightSquare))(tokenTick))(tokenComma);
  })();
  var trailingComments = many(Control_Alt.alt(altLex)(Data_Functor.map(functorLex)(PureScript_CST_Types.Comment.create)(comment))(Data_Functor.map(functorLex)(PureScript_CST_Types.Space.create)(spaceComment)));
  var lexWithState = (function () {
      var token$prime = Control_Apply.apply(applyLex)(Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      token: v,
                      trailing: v1,
                      nextLeading: v2
                  };
              };
          };
      })(token))(trailingComments))(leadingComments);
      var go = function (stack) {
          return function (startPos) {
              return function (leading) {
                  return function (str) {
                      return PureScript_CST_TokenStream.TokenStream(Data_Lazy.defer(function (v) {
                          var $228 = str === "";
                          if ($228) {
                              return PureScript_CST_TokenStream.step(PureScript_CST_TokenStream.unwindLayout(startPos)(PureScript_CST_TokenStream.TokenStream(Data_Lazy.defer(function (v1) {
                                  return new PureScript_CST_TokenStream.TokenEOF(startPos, leading);
                              })))(stack));
                          };
                          var v1 = token$prime(str);
                          if (v1 instanceof LexFail) {
                              var errPos = bumpText(startPos)(0)(Data_String_CodeUnits.take(Data_String_CodeUnits.length(str) - Data_String_CodeUnits.length(v1.value1) | 0)(str));
                              return new PureScript_CST_TokenStream.TokenError(errPos, v1.value0(Data_Unit.unit), Data_Maybe.Nothing.value, stack);
                          };
                          if (v1 instanceof LexSucc) {
                              var endPos = bumpToken(startPos)(v1.value0.token);
                              var nextStart = Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(endPos)(v1.value0.trailing))(v1.value0.nextLeading);
                              var posToken = {
                                  range: {
                                      start: startPos,
                                      end: endPos
                                  },
                                  leadingComments: leading,
                                  trailingComments: v1.value0.trailing,
                                  value: v1.value0.token
                              };
                              var v2 = PureScript_CST_Layout.insertLayout(posToken)(nextStart)(stack);
                              return PureScript_CST_TokenStream.step(Data_Tuple.snd(PureScript_CST_TokenStream.consTokens(Data_Foldable.foldableArray)(v2.value1)(Data_Tuple.Tuple.create(nextStart)(go(v2.value0)(nextStart)(v1.value0.nextLeading)(v1.value1)))));
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 198, column 7 - line 217, column 63): " + [ v1.constructor.name ]);
                      }));
                  };
              };
          };
      };
      var init = function (initStack) {
          return function (initPos) {
              return function (str) {
                  return PureScript_CST_TokenStream.TokenStream(Data_Lazy.defer(function (v) {
                      var v1 = leadingComments(str);
                      if (v1 instanceof LexFail) {
                          return Partial_Unsafe.unsafeCrashWith("Leading comments can't fail.");
                      };
                      if (v1 instanceof LexSucc) {
                          var nextPos = Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(initPos)(v1.value0);
                          return PureScript_CST_TokenStream.step(go(initStack)(nextPos)(v1.value0)(v1.value1));
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 185, column 5 - line 190, column 51): " + [ v1.constructor.name ]);
                  }));
              };
          };
      };
      return init;
  })();
  var lex = lexWithState(new Data_List_Types.Cons(new Data_Tuple.Tuple({
      line: 0,
      column: 0
  }, PureScript_CST_Layout.LytRoot.value), Data_List_Types.Nil.value))({
      line: 0,
      column: 0
  });
  exports["lex"] = lex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["PureScript.CST.Parser.Monad"] = $PS["PureScript.CST.Parser.Monad"] || {};
  var exports = $PS["PureScript.CST.Parser.Monad"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_ST_Class = $PS["Control.Monad.ST.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var PureScript_CST_Errors = $PS["PureScript.CST.Errors"];
  var PureScript_CST_TokenStream = $PS["PureScript.CST.TokenStream"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Recovery = (function () {
      function Recovery(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Recovery.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Recovery(value0, value1, value2);
              };
          };
      };
      return Recovery;
  })();
  var Leaf = (function () {
      function Leaf(value0) {
          this.value0 = value0;
      };
      Leaf.create = function (value0) {
          return new Leaf(value0);
      };
      return Leaf;
  })();
  var Node = (function () {
      function Node(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Node.create = function (value0) {
          return function (value1) {
              return new Node(value0, value1);
          };
      };
      return Node;
  })();
  var UnconsDone = (function () {
      function UnconsDone(value0) {
          this.value0 = value0;
      };
      UnconsDone.create = function (value0) {
          return new UnconsDone(value0);
      };
      return UnconsDone;
  })();
  var UnconsMore = (function () {
      function UnconsMore(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UnconsMore.create = function (value0) {
          return function (value1) {
              return new UnconsMore(value0, value1);
          };
      };
      return UnconsMore;
  })();
  var ParseFail = (function () {
      function ParseFail(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ParseFail.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ParseFail(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ParseFail;
  })();
  var ParseSucc = (function () {
      function ParseSucc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseSucc.create = function (value0) {
          return function (value1) {
              return new ParseSucc(value0, value1);
          };
      };
      return ParseSucc;
  })();
  var Take = (function () {
      function Take(value0) {
          this.value0 = value0;
      };
      Take.create = function (value0) {
          return new Take(value0);
      };
      return Take;
  })();
  var Eof = (function () {
      function Eof(value0) {
          this.value0 = value0;
      };
      Eof.create = function (value0) {
          return new Eof(value0);
      };
      return Eof;
  })();
  var Fail = (function () {
      function Fail(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fail.create = function (value0) {
          return function (value1) {
              return new Fail(value0, value1);
          };
      };
      return Fail;
  })();
  var Alt = (function () {
      function Alt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Alt.create = function (value0) {
          return function (value1) {
              return new Alt(value0, value1);
          };
      };
      return Alt;
  })();
  var Try = (function () {
      function Try(value0) {
          this.value0 = value0;
      };
      Try.create = function (value0) {
          return new Try(value0);
      };
      return Try;
  })();
  var LookAhead = (function () {
      function LookAhead(value0) {
          this.value0 = value0;
      };
      LookAhead.create = function (value0) {
          return new LookAhead(value0);
      };
      return LookAhead;
  })();
  var Defer = (function () {
      function Defer(value0) {
          this.value0 = value0;
      };
      Defer.create = function (value0) {
          return new Defer(value0);
      };
      return Defer;
  })();
  var Recover = (function () {
      function Recover(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Recover.create = function (value0) {
          return function (value1) {
              return new Recover(value0, value1);
          };
      };
      return Recover;
  })();
  var Iter = (function () {
      function Iter(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iter.create = function (value0) {
          return function (value1) {
              return new Iter(value0, value1);
          };
      };
      return Iter;
  })();
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var StkNil = (function () {
      function StkNil() {

      };
      StkNil.value = new StkNil();
      return StkNil;
  })();
  var StkAlt = (function () {
      function StkAlt(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      StkAlt.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new StkAlt(value0, value1, value2);
              };
          };
      };
      return StkAlt;
  })();
  var StkTry = (function () {
      function StkTry(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StkTry.create = function (value0) {
          return function (value1) {
              return new StkTry(value0, value1);
          };
      };
      return StkTry;
  })();
  var StkLookAhead = (function () {
      function StkLookAhead(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StkLookAhead.create = function (value0) {
          return function (value1) {
              return new StkLookAhead(value0, value1);
          };
      };
      return StkLookAhead;
  })();
  var StkBinds = (function () {
      function StkBinds(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StkBinds.create = function (value0) {
          return function (value1) {
              return new StkBinds(value0, value1);
          };
      };
      return StkBinds;
  })();
  var StkRecover = (function () {
      function StkRecover(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      StkRecover.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new StkRecover(value0, value1, value2);
              };
          };
      };
      return StkRecover;
  })();
  var SuccStop = (function () {
      function SuccStop(value0) {
          this.value0 = value0;
      };
      SuccStop.create = function (value0) {
          return new SuccStop(value0);
      };
      return SuccStop;
  })();
  var SuccBinds = (function () {
      function SuccBinds(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SuccBinds.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SuccBinds(value0, value1, value2);
              };
          };
      };
      return SuccBinds;
  })();
  var FailStop = (function () {
      function FailStop(value0) {
          this.value0 = value0;
      };
      FailStop.create = function (value0) {
          return new FailStop(value0);
      };
      return FailStop;
  })();
  var FailAlt = (function () {
      function FailAlt(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FailAlt.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FailAlt(value0, value1, value2);
              };
          };
      };
      return FailAlt;
  })();
  var FailRecover = (function () {
      function FailRecover(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FailRecover.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FailRecover(value0, value1, value2);
              };
          };
      };
      return FailRecover;
  })();
  var uncons$prime = function ($copy_cons) {
      return function ($copy_l) {
          return function ($copy_r) {
              var $tco_var_cons = $copy_cons;
              var $tco_var_l = $copy_l;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(cons, l, r) {
                  if (l instanceof Leaf) {
                      $tco_done = true;
                      return cons(l.value0)(r);
                  };
                  if (l instanceof Node) {
                      $tco_var_cons = cons;
                      $tco_var_l = l.value0;
                      $copy_r = new Node(l.value1, r);
                      return;
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 74, column 20 - line 76, column 74): " + [ l.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_cons, $tco_var_l, $copy_r);
              };
              return $tco_result;
          };
      };
  };
  var uncons = function (done) {
      return function (more) {
          return function (v) {
              if (v instanceof Leaf) {
                  return done(v.value0);
              };
              if (v instanceof Node) {
                  return uncons$prime(more)(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 64, column 20 - line 66, column 31): " + [ v.constructor.name ]);
          };
      };
  };
  var unconsView = uncons(UnconsDone.create)(UnconsMore.create);
  var unFold = Unsafe_Coerce.unsafeCoerce;
  var $$try = Try.create;
  var take = Take.create;
  var runParser$prime = (function () {
      var unwindSucc = function ($copy_a) {
          return function ($copy_state) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_state = $copy_state;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(a, state, v) {
                      if (v instanceof StkNil) {
                          $tco_done = true;
                          return new SuccStop(new ParseSucc(a, state));
                      };
                      if (v instanceof StkAlt) {
                          $tco_var_a = a;
                          $tco_var_state = state;
                          $copy_v = v.value0;
                          return;
                      };
                      if (v instanceof StkTry) {
                          $tco_var_a = a;
                          $tco_var_state = state;
                          $copy_v = v.value0;
                          return;
                      };
                      if (v instanceof StkRecover) {
                          $tco_var_a = a;
                          $tco_var_state = {
                              consumed: state.consumed || v.value1.consumed,
                              errors: state.errors,
                              position: state.position,
                              stream: state.stream
                          };
                          $copy_v = v.value0;
                          return;
                      };
                      if (v instanceof StkLookAhead) {
                          $tco_var_a = a;
                          $tco_var_state = v.value1;
                          $copy_v = v.value0;
                          return;
                      };
                      if (v instanceof StkBinds) {
                          $tco_done = true;
                          return new SuccBinds(v.value0, state, v.value1);
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 344, column 24 - line 356, column 38): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_state, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      var unwindFail = function ($copy_error) {
          return function ($copy_position) {
              return function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_error = $copy_error;
                      var $tco_var_position = $copy_position;
                      var $tco_var_v = $copy_v;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(error, position, v, v1) {
                          if (v1 instanceof StkNil) {
                              $tco_done1 = true;
                              return new FailStop(new ParseFail(error, position, v, new Data_Maybe.Just(v.stream)));
                          };
                          if (v1 instanceof StkAlt) {
                              if (v.consumed) {
                                  $tco_var_error = error;
                                  $tco_var_position = position;
                                  $tco_var_v = v;
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_done1 = true;
                              return new FailAlt(v1.value0, v1.value1, v1.value2);
                          };
                          if (v1 instanceof StkTry) {
                              $tco_var_error = error;
                              $tco_var_position = position;
                              $tco_var_v = {
                                  consumed: v1.value1.consumed,
                                  errors: v.errors,
                                  position: v.position,
                                  stream: v.stream
                              };
                              $copy_v1 = v1.value0;
                              return;
                          };
                          if (v1 instanceof StkRecover) {
                              if (v.consumed) {
                                  var posError = {
                                      error: error,
                                      position: position
                                  };
                                  var nextErrors = Data_Array.snoc(v.errors)(posError);
                                  var v2 = v1.value2(posError)(v1.value1.stream);
                                  $tco_done1 = true;
                                  return new FailRecover(v1.value0, {
                                      consumed: true,
                                      errors: nextErrors,
                                      position: v2.value1,
                                      stream: v2.value2
                                  }, v2.value0);
                              };
                              $tco_var_error = error;
                              $tco_var_position = position;
                              $tco_var_v = {
                                  consumed: v.consumed || v1.value1.consumed,
                                  errors: v.errors,
                                  position: v.position,
                                  stream: v.stream
                              };
                              $copy_v1 = v1.value0;
                              return;
                          };
                          if (v1 instanceof StkLookAhead) {
                              $tco_var_error = error;
                              $tco_var_position = position;
                              $tco_var_v = v1.value1;
                              $copy_v1 = v1.value0;
                              return;
                          };
                          if (v1 instanceof StkBinds) {
                              $tco_var_error = error;
                              $tco_var_position = position;
                              $tco_var_v = v;
                              $copy_v1 = v1.value0;
                              return;
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 315, column 48 - line 341, column 48): " + [ v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_error, $tco_var_position, $tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
          };
      };
      var go = function ($copy_stack) {
          return function ($copy_v) {
              return function ($copy_v1) {
                  var $tco_var_stack = $copy_stack;
                  var $tco_var_v = $copy_v;
                  var $tco_done2 = false;
                  var $tco_result;
                  function $tco_loop(stack, v, v1) {
                      if (v1 instanceof Alt) {
                          $tco_var_stack = new StkAlt(stack, v, v1.value1);
                          $tco_var_v = {
                              consumed: false,
                              errors: v.errors,
                              position: v.position,
                              stream: v.stream
                          };
                          $copy_v1 = v1.value0;
                          return;
                      };
                      if (v1 instanceof Try) {
                          $tco_var_stack = new StkTry(stack, v);
                          $tco_var_v = v;
                          $copy_v1 = v1.value0;
                          return;
                      };
                      if (v1 instanceof LookAhead) {
                          $tco_var_stack = new StkLookAhead(stack, v);
                          $tco_var_v = v;
                          $copy_v1 = v1.value0;
                          return;
                      };
                      if (v1 instanceof Bind) {
                          $tco_var_stack = new StkBinds(stack, v1.value1);
                          $tco_var_v = v;
                          $copy_v1 = v1.value0;
                          return;
                      };
                      if (v1 instanceof Pure) {
                          var v2 = unwindSucc(v1.value0)(v)(stack);
                          if (v2 instanceof SuccBinds) {
                              var v3 = unconsView(v2.value2);
                              if (v3 instanceof UnconsDone) {
                                  $tco_var_stack = v2.value0;
                                  $tco_var_v = v2.value1;
                                  $copy_v1 = v3.value0(v1.value0);
                                  return;
                              };
                              if (v3 instanceof UnconsMore) {
                                  $tco_var_stack = new StkBinds(v2.value0, v3.value1);
                                  $tco_var_v = v2.value1;
                                  $copy_v1 = v3.value0(v1.value0);
                                  return;
                              };
                              throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 260, column 11 - line 264, column 64): " + [ v3.constructor.name ]);
                          };
                          if (v2 instanceof SuccStop) {
                              $tco_done2 = true;
                              return v2.value0;
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 258, column 7 - line 266, column 14): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Fail) {
                          var v2 = unwindFail(v1.value1)(v1.value0)(v)(stack);
                          if (v2 instanceof FailAlt) {
                              $tco_var_stack = v2.value0;
                              $tco_var_v = v2.value1;
                              $copy_v1 = v2.value2;
                              return;
                          };
                          if (v2 instanceof FailRecover) {
                              $tco_var_stack = v2.value0;
                              $tco_var_v = v2.value1;
                              $copy_v1 = new Pure(v2.value2);
                              return;
                          };
                          if (v2 instanceof FailStop) {
                              $tco_done2 = true;
                              return v2.value0;
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 268, column 7 - line 274, column 14): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Take) {
                          var v2 = PureScript_CST_TokenStream.step(v.stream);
                          if (v2 instanceof PureScript_CST_TokenStream.TokenError) {
                              $tco_done2 = true;
                              return new ParseFail(v2.value1, v2.value0, v, v2.value2);
                          };
                          if (v2 instanceof PureScript_CST_TokenStream.TokenEOF) {
                              $tco_var_stack = stack;
                              $tco_var_v = v;
                              $copy_v1 = new Fail(v2.value0, PureScript_CST_Errors.UnexpectedEof.value);
                              return;
                          };
                          if (v2 instanceof PureScript_CST_TokenStream.TokenCons) {
                              var v3 = v1.value0(v2.value0);
                              if (v3 instanceof Data_Either.Left) {
                                  $tco_var_stack = stack;
                                  $tco_var_v = v;
                                  $copy_v1 = new Fail(v2.value0.range.start, v3.value0);
                                  return;
                              };
                              if (v3 instanceof Data_Either.Right) {
                                  $tco_var_stack = stack;
                                  $tco_var_v = {
                                      consumed: true,
                                      errors: v.errors,
                                      position: v2.value1,
                                      stream: v2.value2
                                  };
                                  $copy_v1 = new Pure(v3.value0);
                                  return;
                              };
                              throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 282, column 11 - line 286, column 98): " + [ v3.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 276, column 7 - line 286, column 98): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Eof) {
                          var v2 = PureScript_CST_TokenStream.step(v.stream);
                          if (v2 instanceof PureScript_CST_TokenStream.TokenError) {
                              $tco_done2 = true;
                              return new ParseFail(v2.value1, v2.value0, v, v2.value2);
                          };
                          if (v2 instanceof PureScript_CST_TokenStream.TokenEOF) {
                              $tco_var_stack = stack;
                              $tco_var_v = {
                                  consumed: true,
                                  errors: v.errors,
                                  position: v2.value0,
                                  stream: v.stream
                              };
                              $copy_v1 = new Pure(v1.value0(new Data_Tuple.Tuple(v2.value0, v2.value1)));
                              return;
                          };
                          if (v2 instanceof PureScript_CST_TokenStream.TokenCons) {
                              $tco_var_stack = stack;
                              $tco_var_v = v;
                              $copy_v1 = new Fail(v2.value0.range.start, new PureScript_CST_Errors.ExpectedEof(v2.value0.value));
                              return;
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 288, column 7 - line 294, column 72): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Iter) {
                          var v2 = unFold(function (v3) {
                              var iter1 = function ($copy_acc) {
                                  return function ($copy_state$prime) {
                                      var $tco_var_acc = $copy_acc;
                                      var $tco_done3 = false;
                                      var $tco_result;
                                      function $tco_loop(acc, state$prime) {
                                          var v4 = runParser$prime({
                                              consumed: false,
                                              errors: state$prime.errors,
                                              position: state$prime.position,
                                              stream: state$prime.stream
                                          })(v1.value1);
                                          if (v4 instanceof ParseSucc) {
                                              $tco_var_acc = v3.step(acc)(v4.value0);
                                              $copy_state$prime = v4.value1;
                                              return;
                                          };
                                          if (v4 instanceof ParseFail) {
                                              if (v4.value2.consumed) {
                                                  $tco_done3 = true;
                                                  return new Data_Tuple.Tuple(v4.value2, new Fail(v4.value1, v4.value0));
                                              };
                                              if (Data_Boolean.otherwise) {
                                                  $tco_done3 = true;
                                                  return new Data_Tuple.Tuple(state$prime, new Pure(v3.done(acc)));
                                              };
                                          };
                                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 299, column 31 - line 306, column 51): " + [ v4.constructor.name ]);
                                      };
                                      while (!$tco_done3) {
                                          $tco_result = $tco_loop($tco_var_acc, $copy_state$prime);
                                      };
                                      return $tco_result;
                                  };
                              };
                              return iter1(v3.init(Data_Unit.unit))(v);
                          })(v1.value0);
                          $tco_var_stack = stack;
                          $tco_var_v = v2.value0;
                          $copy_v1 = v2.value1;
                          return;
                      };
                      if (v1 instanceof Defer) {
                          $tco_var_stack = stack;
                          $tco_var_v = v;
                          $copy_v1 = Data_Lazy.force(v1.value0);
                          return;
                      };
                      if (v1 instanceof Recover) {
                          $tco_var_stack = new StkRecover(stack, v, v1.value0);
                          $tco_var_v = {
                              consumed: false,
                              errors: v.errors,
                              position: v.position,
                              stream: v.stream
                          };
                          $copy_v1 = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 248, column 31 - line 312, column 67): " + [ v1.constructor.name ]);
                  };
                  while (!$tco_done2) {
                      $tco_result = $tco_loop($tco_var_stack, $tco_var_v, $copy_v1);
                  };
                  return $tco_result;
              };
          };
      };
      return function (state) {
          return function (parser) {
              return go(StkNil.value)(state)(parser);
          };
      };
  })();
  var recover = Recover.create;
  var qsingleton = Leaf.create;
  var qappend = Node.create;
  var mkFold = Unsafe_Coerce.unsafeCoerce;
  var lookAhead = LookAhead.create;
  var lazyParser = new Control_Lazy.Lazy(function ($169) {
      return Defer.create(Data_Lazy.defer($169));
  });
  var iter = function (a) {
      return function (b) {
          return new Iter(a, b);
      };
  };
  var initialParserState = function (stream) {
      return {
          consumed: false,
          errors: [  ],
          position: {
              line: 0,
              column: 0
          },
          stream: stream
      };
  };
  var functorRecovery = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Recovery(f(m.value0), m.value1, m.value2);
      };
  });
  var functorParser = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Bind) {
              return new Bind(v.value0, qappend(v.value1)(qsingleton(function ($170) {
                  return Pure.create(f($170));
              })));
          };
          return new Bind(v, qsingleton(function ($171) {
              return Pure.create(f($171));
          }));
      };
  });
  var fromParserResult = function (v) {
      if (v instanceof ParseFail) {
          return new Data_Either.Left({
              position: v.value1,
              error: v.value0
          });
      };
      if (v instanceof ParseSucc) {
          return new Data_Either.Right(new Data_Tuple.Tuple(v.value0, v.value1.errors));
      };
      throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 197, column 20 - line 201, column 29): " + [ v.constructor.name ]);
  };
  var runParser = function (stream) {
      var $172 = runParser$prime(initialParserState(stream));
      return function ($173) {
          return fromParserResult($172($173));
      };
  };
  var foldMaybe = mkFold({
      init: Data_Function["const"](Data_Maybe.Nothing.value),
      step: Data_Function["const"](Data_Maybe.Just.create),
      done: Control_Category.identity(Control_Category.categoryFn)
  });
  var optional = iter(foldMaybe);
  var foldArray = mkFold({
      init: function (v) {
          return Effect_Unsafe.unsafePerformEffect(Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect)(Data_Array_ST["new"]));
      },
      step: function (arr) {
          return function (a) {
              return Effect_Unsafe.unsafePerformEffect(Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect)(function __do() {
                  Data_Array_ST.push(a)(arr)();
                  return arr;
              }));
          };
      },
      done: (function () {
          var $174 = Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect);
          return function ($175) {
              return Effect_Unsafe.unsafePerformEffect($174(Data_Array_ST.unsafeFreeze($175)));
          };
      })()
  });
  var many = iter(foldArray);
  var eof = new Eof(Control_Category.identity(Control_Category.categoryFn));
  var bindParser = new Control_Bind.Bind(function () {
      return applyParser;
  }, function (p) {
      return function (k) {
          if (p instanceof Bind) {
              return new Bind(p.value0, qappend(p.value1)(qsingleton(k)));
          };
          return new Bind(p, qsingleton(k));
      };
  });
  var applyParser = new Control_Apply.Apply(function () {
      return functorParser;
  }, function (p1) {
      return function (p2) {
          return Control_Bind.bind(bindParser)(p1)(function (f) {
              return Control_Bind.bind(bindParser)(p2)(function (a) {
                  return Control_Applicative.pure(applicativeParser)(f(a));
              });
          });
      };
  });
  var applicativeParser = new Control_Applicative.Applicative(function () {
      return applyParser;
  }, Pure.create);
  var altParser = new Control_Alt.Alt(function () {
      return functorParser;
  }, Alt.create);
  exports["Recovery"] = Recovery;
  exports["runParser"] = runParser;
  exports["take"] = take;
  exports["try"] = $$try;
  exports["lookAhead"] = lookAhead;
  exports["many"] = many;
  exports["optional"] = optional;
  exports["eof"] = eof;
  exports["recover"] = recover;
  exports["functorRecovery"] = functorRecovery;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["bindParser"] = bindParser;
  exports["altParser"] = altParser;
  exports["lazyParser"] = lazyParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["PureScript.CST.Parser"] = $PS["PureScript.CST.Parser"] || {};
  var exports = $PS["PureScript.CST.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Errors = $PS["PureScript.CST.Errors"];
  var PureScript_CST_Layout = $PS["PureScript.CST.Layout"];
  var PureScript_CST_Parser_Monad = $PS["PureScript.CST.Parser.Monad"];
  var PureScript_CST_TokenStream = $PS["PureScript.CST.TokenStream"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var wrapped = function (openTok) {
      return function (closeTok) {
          return function (valueParser) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(openTok)(function (open) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(valueParser)(function (value) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(closeTok)(function (close) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                              open: open,
                              value: value,
                              close: close
                          });
                      });
                  });
              });
          };
      };
  };
  var separated = function (sepParser) {
      return function (valueParser) {
          return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
              return function (v1) {
                  return {
                      head: v,
                      tail: v1
                  };
              };
          })(valueParser))(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(sepParser))(valueParser)));
      };
  };
  var reservedKeywords = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString)([ "ado", "case", "class", "data", "derive", "do", "else", "false", "foreign", "if", "import", "in", "infix", "infixl", "infixr", "instance", "let", "module", "newtype", "of", "then", "true", "type", "where" ]);
  var recoverTokensWhile = function (p) {
      return function (initStream) {
          var indent = Data_Maybe.maybe(0)(function (v) {
              return v.column;
          })(PureScript_CST_Layout.currentIndent(PureScript_CST_TokenStream.layoutStack(initStream)));
          var go = function ($copy_acc) {
              return function ($copy_stream) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, stream) {
                      var v = PureScript_CST_TokenStream.step(stream);
                      if (v instanceof PureScript_CST_TokenStream.TokenError) {
                          $tco_done = true;
                          return new PureScript_CST_Parser_Monad.Recovery(acc, v.value0, stream);
                      };
                      if (v instanceof PureScript_CST_TokenStream.TokenEOF) {
                          $tco_done = true;
                          return new PureScript_CST_Parser_Monad.Recovery(acc, v.value0, stream);
                      };
                      if (v instanceof PureScript_CST_TokenStream.TokenCons) {
                          var $113 = p(v.value0)(indent);
                          if ($113) {
                              $tco_var_acc = Data_Array.snoc(acc)(v.value0);
                              $copy_stream = v.value2;
                              return;
                          };
                          $tco_done = true;
                          return new PureScript_CST_Parser_Monad.Recovery(acc, v.value0.range.start, stream);
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Parser (line 1161, column 19 - line 1170, column 44): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $copy_stream);
                  };
                  return $tco_result;
              };
          };
          return go([  ])(initStream);
      };
  };
  var recoverIndent = function (mkNode) {
      return PureScript_CST_Parser_Monad.recover(function (v) {
          var $295 = Data_Functor.map(PureScript_CST_Parser_Monad.functorRecovery)(function (tokens) {
              return mkNode({
                  position: v.position,
                  error: v.error,
                  tokens: tokens
              });
          });
          var $296 = recoverTokensWhile(function (tok) {
              return function (indent) {
                  if (tok.value instanceof PureScript_CST_Types.TokLayoutEnd) {
                      return tok.value.value0 > indent;
                  };
                  if (tok.value instanceof PureScript_CST_Types.TokLayoutSep) {
                      return tok.value.value0 > indent;
                  };
                  return true;
              };
          });
          return function ($297) {
              return $295($296($297));
          };
      });
  };
  var recoverLetBinding = recoverIndent(PureScript_CST_Types.LetBindingError.create);
  var recoverDoStatement = recoverIndent(PureScript_CST_Types.DoError.create);
  var recoverDecl = recoverIndent(PureScript_CST_Types.DeclError.create);
  var many1 = function (parser) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Array_NonEmpty["cons'"])(parser))(PureScript_CST_Parser_Monad.many(parser));
  };
  var expectMap = function (k) {
      return PureScript_CST_Parser_Monad.take(function (tok) {
          var v = k(tok);
          if (v instanceof Data_Maybe.Just) {
              return new Data_Either.Right(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Either.Left.create(new PureScript_CST_Errors.UnexpectedToken(tok.value));
          };
          throw new Error("Failed pattern match at PureScript.CST.Parser (line 46, column 3 - line 50, column 39): " + [ v.constructor.name ]);
      });
  };
  var parseBoolean = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "true")) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, true));
      };
      if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "false")) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, false));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseChar = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokChar) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseHole = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokHole) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value0
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseIdent = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && !Data_Set.member(Data_Ord.ordString)(v.value.value1)(reservedKeywords))) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var $$parseInt = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokInt) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseLabel = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokString) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseModuleName = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Just) {
          return Data_Maybe.Just.create({
              token: v,
              name: PureScript_CST_Types.ModuleName(v.value.value0.value0 + ("." + v.value.value1))
          });
      };
      if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseNumber = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokNumber) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseOperator = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokOperator && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseProper = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedIdent = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName && !Data_Set.member(Data_Ord.ordString)(v.value.value1)(reservedKeywords)) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedIdentOrProper = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: Data_Either.Left.create(v.value.value1)
          });
      };
      if (v.value instanceof PureScript_CST_Types.TokUpperName) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: Data_Either.Right.create(v.value.value1)
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedOperator = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokOperator) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedProper = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokUpperName) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedSymbol = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokSymbolName) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseString = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokString) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      };
      if (v.value instanceof PureScript_CST_Types.TokRawString) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value0));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseSymbol = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokSymbolName && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var expect = function (pred) {
      return expectMap(function (tok) {
          var $208 = pred(tok.value);
          if ($208) {
              return new Data_Maybe.Just(tok);
          };
          return Data_Maybe.Nothing.value;
      });
  };
  var tokAt = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokAt) {
          return true;
      };
      return false;
  });
  var tokBackslash = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokBackslash) {
          return true;
      };
      return false;
  });
  var tokComma = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokComma) {
          return true;
      };
      return false;
  });
  var tokDot = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokDot) {
          return true;
      };
      return false;
  });
  var parseRecordAccessor = function (expr) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDot)(function (dot) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokDot)(parseLabel))(function (path) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprRecordAccessor({
                  expr: expr,
                  dot: dot,
                  path: path
              }));
          });
      });
  };
  var tokDoubleColon = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokDoubleColon) {
          return true;
      };
      return false;
  });
  var parseInstanceNameAndSeparator = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
              name: name,
              separator: separator
          });
      });
  });
  var tokEquals = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokEquals) {
          return true;
      };
      return false;
  });
  var tokForall = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokForall) {
          return true;
      };
      return false;
  });
  var tokKeyOperator = function (sym) {
      return expect(function (v) {
          if (v instanceof PureScript_CST_Types.TokOperator && v.value0 instanceof Data_Maybe.Nothing) {
              return sym === v.value1;
          };
          return false;
      });
  };
  var parseBinderNegative = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyOperator("-"))(function (negative) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderInt.create(new Data_Maybe.Just(negative))))($$parseInt))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderNumber.create(new Data_Maybe.Just(negative))))(parseNumber));
  });
  var parseRecordLabeled = function (valueParser) {
      var parseRecordField = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.RecordField.create))(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseLabel))(tokKeyOperator(":")))))(valueParser);
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordField)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordPun.create)(parseIdent));
  };
  var tokKeySymbol = function (sym) {
      return expect(function (v) {
          if (v instanceof PureScript_CST_Types.TokSymbolName && v.value0 instanceof Data_Maybe.Nothing) {
              return sym === v.value1;
          };
          return false;
      });
  };
  var tokKeyword = function (kw) {
      return expect(function (v) {
          if (v instanceof PureScript_CST_Types.TokLowerName && v.value0 instanceof Data_Maybe.Nothing) {
              return kw === v.value1;
          };
          return false;
      });
  };
  var parseFixityKeyword = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infix.value))(tokKeyword("infix")))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infixl.value))(tokKeyword("infixl")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infixr.value))(tokKeyword("infixr"))));
  var parseFixityOp = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FixityType.create)(tokKeyword("type")))(parseQualifiedProper))(tokKeyword("as")))(parseOperator))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FixityValue.create)(parseQualifiedIdentOrProper))(tokKeyword("as")))(parseOperator));
  var parseDeclFixity = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseFixityKeyword)(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)($$parseInt)(function (prec) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseFixityOp)(function (operator) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclFixity({
                  keyword: keyword,
                  prec: prec,
                  operator: operator
              }));
          });
      });
  });
  var parseForeignKind = PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ForeignKind.create)(tokKeyword("kind")))(parseProper));
  var parseRole = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Representational.value))(tokKeyword("representational")))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Nominal.value))(tokKeyword("nominal")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Phantom.value))(tokKeyword("phantom"))));
  var parseDeclRole = function (keyword1) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("role"))(function (keyword2) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(many1(parseRole))(function (roles) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclRole(keyword1, keyword2, name, roles));
              });
          });
      });
  };
  var tokLayoutEnd = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
          return true;
      };
      return false;
  });
  var tokLayoutSep = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLayoutSep) {
          return true;
      };
      return false;
  });
  var parseInstanceChainSeparator = Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(tokKeyword("else"))(PureScript_CST_Parser_Monad.optional(tokLayoutSep));
  var tokLayoutStart = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLayoutStart) {
          return true;
      };
      return false;
  });
  var layout = function (valueParser) {
      var tail = PureScript_CST_Parser_Monad.many(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutSep)(valueParser));
      var go = function (head) {
          return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Array.cons(head))(tail);
      };
      var values = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Bind.bindFlipped(PureScript_CST_Parser_Monad.bindParser)(go)(valueParser))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)([  ]));
      return Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(values))(tokLayoutEnd);
  };
  var layoutNonEmpty = function (valueParser) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
          return function (v1) {
              return Data_Array_NonEmpty["cons'"](v)(v1);
          };
      })(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(valueParser)))(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(PureScript_CST_Parser_Monad.many(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutSep)(valueParser)))(tokLayoutEnd));
  };
  var tokLeftArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftArrow) {
          return true;
      };
      return false;
  });
  var tokLeftBrace = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftBrace) {
          return true;
      };
      return false;
  });
  var tokLeftFatArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokOperator && v.value0 instanceof Data_Maybe.Nothing) {
          return v.value1 === "<=" || v.value1 === "\u21d0";
      };
      return false;
  });
  var tokLeftParen = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftParen) {
          return true;
      };
      return false;
  });
  var tokLeftSquare = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftSquare) {
          return true;
      };
      return false;
  });
  var tokPipe = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokPipe) {
          return true;
      };
      return false;
  });
  var tokQualifiedKeyword = function (kw) {
      return expect(function (v) {
          if (v instanceof PureScript_CST_Types.TokLowerName) {
              return kw === v.value1;
          };
          return false;
      });
  };
  var tokRightArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightArrow) {
          return true;
      };
      return false;
  });
  var parseFundep = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FundepDetermined.create)(tokRightArrow))(many1(parseIdent)))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FundepDetermines.create)(many1(parseIdent)))(tokRightArrow))(many1(parseIdent)));
  var tokRightBrace = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightBrace) {
          return true;
      };
      return false;
  });
  var tokRightFatArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
          return true;
      };
      return false;
  });
  var tokRightParen = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightParen) {
          return true;
      };
      return false;
  });
  var parens = wrapped(tokLeftParen)(tokRightParen);
  var parseEmptyRow = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeRow.create({
              open: open,
              value: {
                  labels: Data_Maybe.Nothing.value,
                  tail: Data_Maybe.Nothing.value
              },
              close: close
          }));
      });
  };
  var tokRightSquare = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightSquare) {
          return true;
      };
      return false;
  });                                                  
  var tokSymbolArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
          return true;
      };
      return false;
  });
  var tokTick = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokTick) {
          return true;
      };
      return false;
  });
  var tokUnderscore = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokUnderscore) {
          return true;
      };
      return false;
  });
  var delimited = function (openTok) {
      return function (closeTok) {
          return function (sepTok) {
              return function (valueParser) {
                  var parseNonEmpty = function (open) {
                      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
                          return function (v1) {
                              return {
                                  open: open,
                                  value: new Data_Maybe.Just(v),
                                  close: v1
                              };
                          };
                      })(separated(sepTok)(valueParser)))(closeTok);
                  };
                  var parseEmpty = function (open) {
                      return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
                          return {
                              open: open,
                              value: Data_Maybe.Nothing.value,
                              close: v
                          };
                      })(closeTok);
                  };
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(openTok)(function (open) {
                      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseEmpty(open))(parseNonEmpty(open));
                  });
              };
          };
      };
  };
  var parseDataMembers = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DataAll.create)(tokKeySymbol("..")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DataEnumerated.create)(delimited(tokLeftParen)(tokRightParen)(tokComma)(parseProper)));
  var parseExport = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportTypeOp.create)(tokKeyword("type")))(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportClass.create)(tokKeyword("class")))(parseProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportModule.create)(tokKeyword("module")))(parseModuleName))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportKind.create)(tokKeyword("kind")))(parseProper)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportOp.create)(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportValue.create)(parseIdent))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportType.create)(parseProper))(PureScript_CST_Parser_Monad.optional(parseDataMembers))))))));
  var parseImport = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportOp.create)(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportType.create)(parseProper))(PureScript_CST_Parser_Monad.optional(parseDataMembers)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportTypeOp.create)(tokKeyword("type")))(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportClass.create)(tokKeyword("class")))(parseProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportKind.create)(tokKeyword("kind")))(parseProper))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportValue.create)(parseIdent))))));
  var parseImportDecl = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("import"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleName)(function (module_) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(PureScript_CST_Parser_Monad.optional(tokKeyword("hiding"))))(parens(separated(tokComma)(parseImport)))))(function (names) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("as")))(parseModuleName)))(function (qualified) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                      keyword: keyword,
                      module: module_,
                      names: names,
                      qualified: qualified
                  });
              });
          });
      });
  });
  var parseModuleImportDecls = PureScript_CST_Parser_Monad.many(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(parseImportDecl)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokLayoutSep)(PureScript_CST_Parser_Monad.lookAhead(tokLayoutEnd))));
  var parseModuleHeader = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("module"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleName)(function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parens(separated(tokComma)(parseExport))))(function (exports) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("where"))(function (where_) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(parseModuleImportDecls))(function (imports) {
                      return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                          keyword: keyword,
                          name: name,
                          exports: exports,
                          where: where_,
                          imports: imports
                      });
                  });
              });
          });
      });
  });
  var braces = wrapped(tokLeftBrace)(tokRightBrace);
  var parseTypeVarKinded = Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVarKinded.create)(parens(Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  label: label,
                  separator: separator,
                  value: value
              });
          });
      });
  })));
  var parseTypeVarBinding = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeVarKinded)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVarName.create)(parseIdent));
  });
  var parseTypeParens = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokLeftParen)(function (open) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRowParen(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRowTailParen(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseKindedVar(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeParen(open))(parseEmptyRow(open)))));
  });
  var parseTypeParen = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeParens.create({
                  open: open,
                  value: value,
                  close: close
              }));
          });
      });
  };
  var parseTypeAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVar.create)(parseIdent))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeConstructor.create)(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.TypeString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeParens)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeRecord.create)(braces(parseRow)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeOpName.create)(parseQualifiedSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeHole.create)(parseHole))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeWildcard.create)(tokUnderscore))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeArrowName.create)(tokSymbolArrow)))))))));
  });
  var parseType5 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTypeAtom)(function (ty) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (args) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(args);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return ty;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.TypeApp(ty, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 443, column 8 - line 445, column 29): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseType4 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeUnaryRow.create)(tokKeyOperator("#")))(parseType4))(parseType5);
  });
  var parseType3 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType4)(function (ty) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseType4)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return ty;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.TypeOp(ty, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 430, column 8 - line 432, column 28): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseType2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType3)(function (ty) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeArrow.create(ty))(tokRightArrow))(parseType1))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeConstrained.create(ty))(tokRightFatArrow))(parseType1))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(ty)));
      });
  });
  var parseType1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForall)(parseType2);
  });
  var parseType = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType1)(function (ty) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeKinded.create(ty))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(ty));
      });
  });
  var parseRowTailParen = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType))(function (tail) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeRow.create({
                  open: open,
                  value: {
                      labels: Data_Maybe.Nothing.value,
                      tail: new Data_Maybe.Just(tail)
                  },
                  close: close
              }));
          });
      });
  };
  var parseRowParen = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseLabel))(tokDoubleColon)))(function (v) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokComma))(parseRowLabel)))(function (rest) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType)))(function (tail) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeRow.create({
                              open: open,
                              value: {
                                  labels: Data_Maybe.Just.create({
                                      head: {
                                          label: v.value0,
                                          separator: v.value1,
                                          value: value
                                      },
                                      tail: rest
                                  }),
                                  tail: tail
                              },
                              close: close
                          }));
                      });
                  });
              });
          });
      });
  };
  var parseRowLabel = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseLabel)(function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  label: label,
                  separator: separator,
                  value: value
              });
          });
      });
  });
  var parseRow = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(separated(tokComma)(parseRowLabel)))(function (labels) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType)))(function (tail) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  labels: labels,
                  tail: tail
              });
          });
      });
  });
  var parseKindedVar = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parens(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVar.create)(parseIdent))))(tokDoubleColon)))(function (v) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (kind) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeParens.create({
                      open: open,
                      value: new PureScript_CST_Types.TypeKinded(new PureScript_CST_Types.TypeParens(v.value0), v.value1, kind),
                      close: close
                  }));
              });
          });
      });
  };
  var parseForall = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeForall.create)(tokForall))(many1(parseTypeVarBinding)))(tokDot))(parseType1);
  });
  var parseDataCtor = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
      return function (v1) {
          return {
              name: v,
              fields: v1
          };
      };
  })(parseProper))(PureScript_CST_Parser_Monad.many(parseTypeAtom));
  var parseIdentBinder = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderNamed.create(ident))(tokAt))(parseBinderAtom))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.BinderVar(ident)));
  });
  var parseBinderConstructor = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (apps) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.BinderConstructor(name, apps));
          });
      });
  });
  var parseBinderAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseIdentBinder)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(PureScript_CST_Types.BinderConstructor.create)([  ]))(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderWildcard.create)(tokUnderscore))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderChar.create))(parseChar))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderBoolean.create))(parseBoolean))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderInt.create(Data_Maybe.Nothing.value)))($$parseInt))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderNumber.create(Data_Maybe.Nothing.value)))(parseNumber))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)(parseBinder)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled(parseBinder))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderParens.create)(parens(parseBinder))))))))))));
  });
  var parseBinder2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBinderNegative)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBinderConstructor)(parseBinderAtom));
  });
  var parseBinder1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseBinder2)(function (binder) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseBinder2)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return binder;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.BinderOp(binder, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 818, column 8 - line 820, column 34): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseBinder = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseBinder1)(function (binder) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderTyped.create(binder))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(binder));
      });
  });
  var parseClassConstraints = function (parseOneConstraint) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Many.create)(parens(separated(tokComma)(parseType))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.One.create)(parseOneConstraint));
  };
  var parseDeclDerive = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("derive"))(function (derive_) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(tokKeyword("newtype")))(function (newtype_) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("instance"))(function (keyword) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parseInstanceNameAndSeparator))(function (nameAndSeparator) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(tokDoubleColon))(function (separator) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function (constraints) {
                          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function (className) {
                              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (types) {
                                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclDerive(derive_, newtype_, {
                                      keyword: keyword,
                                      nameAndSeparator: nameAndSeparator,
                                      constraints: constraints,
                                      className: className,
                                      types: types
                                  }));
                              });
                          });
                      });
                  });
              });
          });
      });
  });
  var parseClassMember = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  label: label,
                  separator: separator,
                  value: value
              });
          });
      });
  });
  var parseDeclClassSignature = function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseProper))(tokDoubleColon)))(function (v) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.DeclKindSignature.create(keyword)({
                  label: v.value0,
                  separator: v.value1,
                  value: value
              }));
          });
      });
  };
  var parseDeclKindSignature = function (keyword) {
      return function (label) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.DeclKindSignature.create(keyword)({
                      label: label,
                      separator: separator,
                      value: value
                  }));
              });
          });
      };
  };
  var parseDeclSignature = function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.DeclSignature.create({
                  label: label,
                  separator: separator,
                  value: value
              }));
          });
      });
  };
  var parseForeignData = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("data"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (label) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.ForeignData.create(keyword)({
                      label: label,
                      separator: separator,
                      value: value
                  }));
              });
          });
      });
  });
  var parseForeignValue = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.ForeignValue.create({
                  label: label,
                  separator: separator,
                  value: value
              }));
          });
      });
  });
  var parseDeclForeign = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("foreign"))(function (keyword1) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("import"))(function (keyword2) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForeignData)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForeignKind)(parseForeignValue)))(function (foreign_) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclForeign(keyword1, keyword2, foreign_));
          });
      });
  });
  var parseInstanceBindingSignature = function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.InstanceBindingSignature.create({
                  label: label,
                  separator: separator,
                  value: value
              }));
          });
      });
  };
  var parseLetBindingSignature = function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.LetBindingSignature.create({
                  label: label,
                  separator: separator,
                  value: value
              }));
          });
      });
  };
  var parseWhere = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(recoverLetBinding(parseLetBinding)))))(function (bindings) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  expr: expr,
                  bindings: bindings
              });
          });
      });
  });
  var parseTickExpr1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr3)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseExpr3)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return expr;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.ExprOp(expr, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 589, column 8 - line 591, column 30): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseTickExpr = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokTick)(function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTickExpr1)(function (value) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokTick)(function (close) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  open: open,
                  value: value,
                  close: close
              });
          });
      });
  });
  var parseRecordUpdates = function (expr) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(tokLeftBrace)(PureScript_CST_Parser_Monad.lookAhead(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(parseLabel)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokEquals)(tokLeftBrace))))))(function (open) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokComma)(parseRecordUpdate))(function (value) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightBrace)(function (close) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.ExprRecordUpdate.create(expr)({
                      open: open,
                      value: value,
                      close: close
                  }));
              });
          });
      });
  };
  var parseRecordUpdateLeaf = function (label) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordUpdateLeaf.create(label))(tokEquals))(parseExpr);
  };
  var parseRecordUpdateBranch = function (label) {
      return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordUpdateBranch.create(label))(braces(separated(tokComma)(parseRecordUpdate)));
  };
  var parseRecordUpdate = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseLabel)(function (label) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordUpdateLeaf(label))(parseRecordUpdateBranch(label));
  });
  var parseLetIn = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("let"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layoutNonEmpty(recoverLetBinding(parseLetBinding)))(function (bindings) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("in"))(function (in_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (body) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprLet({
                      keyword: keyword,
                      bindings: bindings,
                      "in": in_,
                      body: body
                  }));
              });
          });
      });
  });
  var parseLetBindingName = function (name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function (guarded) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.LetBindingName({
                  name: name,
                  binders: binders,
                  guarded: guarded
              }));
          });
      });
  };
  var parseLetBinding = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](parseIdentBinding))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.LetBindingPattern.create)(parseBinder1))(tokEquals))(parseWhere));
  });
  var parseLambda = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokBackslash)(function (symbol) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(many1(parseBinderAtom))(function (binders) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightArrow)(function (arrow) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (body) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprLambda({
                      symbol: symbol,
                      binders: binders,
                      arrow: arrow,
                      body: body
                  }));
              });
          });
      });
  });
  var parseIf = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("if"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (cond) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("then"))(function (then_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (true_) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("else"))(function (else_) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (false_) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprIf({
                              keyword: keyword,
                              cond: cond,
                              then: then_,
                              "true": true_,
                              "else": else_,
                              "false": false_
                          }));
                      });
                  });
              });
          });
      });
  });
  var parseIdentBinding = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLetBindingSignature(ident))(parseLetBindingName(ident));
  });
  var parseGuarded = function (sepParser) {
      var parsePatternGuard = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
          return function (v1) {
              return {
                  binder: v,
                  expr: v1
              };
          };
      })(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseBinder))(tokLeftArrow)))))(parseExpr);
      var parseGuardedExpr = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return {
                          bar: v,
                          patterns: v1,
                          separator: v2,
                          where: v3
                      };
                  };
              };
          };
      })(tokPipe))(separated(tokComma)(parsePatternGuard)))(sepParser))(parseWhere);
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Unconditional.create)(sepParser))(parseWhere))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Guarded.create)(many1(parseGuardedExpr)));
  };
  var parseExprAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprIdent.create)(parseQualifiedIdent))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprConstructor.create)(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprOpName.create)(parseQualifiedSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprSection.create)(tokUnderscore))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprHole.create)(parseHole))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprChar.create))(parseChar))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprBoolean.create))(parseBoolean))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprInt.create))($$parseInt))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprNumber.create))(parseNumber))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)(parseExpr)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled(parseExpr))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprParens.create)(parens(parseExpr))))))))))))));
  });
  var parseExpr7 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExprAtom)(function (expr) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordAccessor(expr))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
      });
  });
  var parseExpr6 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr7)(function (expr) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordUpdates(expr))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
      });
  });
  var parseExpr5 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseIf)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLetIn)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLambda)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseCase)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDo)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseAdo)(parseExpr6))))));
  });
  var parseExpr4 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr5)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseExpr5))(function (args) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(args);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return expr;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.ExprApp(expr, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 602, column 8 - line 604, column 31): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseExpr3 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprNegate.create)(tokKeyOperator("-")))(parseExpr3))(parseExpr4);
  });
  var parseExpr2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr3)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseTickExpr))(parseExpr3)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return expr;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.ExprInfix(expr, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 574, column 8 - line 576, column 33): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseExpr1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr2)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseExpr2)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return expr;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.ExprOp(expr, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 566, column 8 - line 568, column 30): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseExpr = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr1)(function (expr) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprTyped.create(expr))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
      });
  });
  var parseDoStatement = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DoLet.create)(tokKeyword("let")))(layoutNonEmpty(recoverLetBinding(parseLetBinding))))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.DoBind.create))(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseBinder))(tokLeftArrow))))(parseExpr))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DoDiscard.create)(parseExpr)));
  });
  var parseDo = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokQualifiedKeyword("do"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layoutNonEmpty(recoverDoStatement(parseDoStatement)))(function (statements) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprDo({
              keyword: keyword,
              statements: statements
          }));
      });
  });
  var parseCaseBranches = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return layoutNonEmpty(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(separated(tokComma)(parseBinder1)))(parseGuarded(tokRightArrow)));
  });
  var parseCase = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("case"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokComma)(parseExpr))(function (head) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("of"))(function (of_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](parseBadSingleCaseBranch))(parseCaseBranches))(function (branches) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprCase({
                      keyword: keyword,
                      head: head,
                      of: of_,
                      branches: branches
                  }));
              });
          });
      });
  });
  var parseBadSingleCaseWhere = function (binder) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightArrow)(function (arrow) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutEnd)(parseWhere))(function (body) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(Data_Array_NonEmpty.singleton(Data_Tuple.Tuple.create({
                  head: binder,
                  tail: [  ]
              })(new PureScript_CST_Types.Unconditional(arrow, body))));
          });
      });
  };
  var parseBadSingleCaseGuarded = function (binder) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutEnd)(parseGuarded(tokRightArrow)))(function (body) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(Data_Array_NonEmpty.singleton(new Data_Tuple.Tuple({
              head: binder,
              tail: [  ]
          }, body)));
      });
  };
  var parseBadSingleCaseBranch = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(parseBinder1))(function (binder) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBadSingleCaseWhere(binder))(parseBadSingleCaseGuarded(binder));
  });
  var parseAdo = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokQualifiedKeyword("ado"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layout(recoverDoStatement(parseDoStatement)))(function (statements) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("in"))(function (in_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (result) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprAdo({
                      keyword: keyword,
                      statements: statements,
                      "in": in_,
                      result: result
                  }));
              });
          });
      });
  });
  var parseDeclValue1 = function (name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function (guarded) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclValue({
                  name: name,
                  binders: binders,
                  guarded: guarded
              }));
          });
      });
  };
  var parseDeclValue = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclSignature(ident))(parseDeclValue1(ident));
  });
  var parseInstanceBindingName = function (name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function (guarded) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.InstanceBindingName({
                  name: name,
                  binders: binders,
                  guarded: guarded
              }));
          });
      });
  };
  var parseInstanceBinding = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseInstanceBindingSignature(ident))(parseInstanceBindingName(ident));
  });
  var parseInstance = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("instance"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parseInstanceNameAndSeparator))(function (nameAndSeparator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function (constraints) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function (className) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (types) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseInstanceBinding))))(function (body) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                              head: {
                                  keyword: keyword,
                                  nameAndSeparator: nameAndSeparator,
                                  constraints: constraints,
                                  className: className,
                                  types: types
                              },
                              body: body
                          });
                      });
                  });
              });
          });
      });
  });
  var parseDeclInstanceChain = Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DeclInstanceChain.create)(separated(parseInstanceChainSeparator)(parseInstance));
  var parseDeclClass1 = function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType5)))(tokLeftFatArrow))))(function ($$super) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(separated(tokComma)(parseFundep))))(function (fundeps) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseClassMember))))(function (members) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclClass({
                              keyword: keyword,
                              "super": $$super,
                              name: name,
                              vars: vars,
                              fundeps: fundeps
                          }, members));
                      });
                  });
              });
          });
      });
  };
  var parseDeclClass = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("class"))(function (keyword) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclClassSignature(keyword))(parseDeclClass1(keyword));
  });
  var parseDeclData1 = function (keyword) {
      return function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokEquals))(separated(tokPipe)(parseDataCtor))))(function (ctors) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclData({
                      keyword: keyword,
                      name: name,
                      vars: vars
                  }, ctors));
              });
          });
      };
  };
  var parseDeclData = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("data"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclData1(keyword)(name));
      });
  });
  var parseDeclNewtype1 = function (keyword) {
      return function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokEquals)(function (tok) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (wrapper) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTypeAtom)(function (body) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclNewtype({
                              keyword: keyword,
                              name: name,
                              vars: vars
                          }, tok, wrapper, body));
                      });
                  });
              });
          });
      };
  };
  var parseDeclNewtype = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("newtype"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclNewtype1(keyword)(name));
      });
  });
  var parseDeclType2 = function (keyword) {
      return function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokEquals)(function (tok) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (body) {
                      return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclType({
                          keyword: keyword,
                          name: name,
                          vars: vars
                      }, tok, body));
                  });
              });
          });
      };
  };
  var parseDeclType1 = function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclType2(keyword)(name));
      });
  };
  var parseDeclType = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("type"))(function (keyword) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclRole(keyword))(parseDeclType1(keyword));
  });
  var parseDecl = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclData)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclNewtype)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclType)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclClass)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclInstanceChain)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclDerive)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclValue)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclForeign)(parseDeclFixity))))))));
  var parseModuleDecls = PureScript_CST_Parser_Monad.many(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(recoverDecl(parseDecl))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokLayoutSep)(PureScript_CST_Parser_Monad.lookAhead(tokLayoutEnd))));
  var parseModuleBody = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(parseModuleDecls)(tokLayoutEnd))(function (decls) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.eof)(function (v) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
              decls: decls,
              trailingComments: v.value1,
              end: v.value0
          });
      });
  });
  var parseModule = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleHeader)(function (header) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleBody)(function (body) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
              header: header,
              body: body
          });
      });
  });
  exports["parseModule"] = parseModule;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["PureScript.CST"] = $PS["PureScript.CST"] || {};
  var exports = $PS["PureScript.CST"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var PureScript_CST_Lexer = $PS["PureScript.CST.Lexer"];
  var PureScript_CST_Parser = $PS["PureScript.CST.Parser"];
  var PureScript_CST_Parser_Monad = $PS["PureScript.CST.Parser.Monad"];
  var ParseSucceeded = (function () {
      function ParseSucceeded(value0) {
          this.value0 = value0;
      };
      ParseSucceeded.create = function (value0) {
          return new ParseSucceeded(value0);
      };
      return ParseSucceeded;
  })();
  var ParseSucceededWithErrors = (function () {
      function ParseSucceededWithErrors(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseSucceededWithErrors.create = function (value0) {
          return function (value1) {
              return new ParseSucceededWithErrors(value0, value1);
          };
      };
      return ParseSucceededWithErrors;
  })();
  var ParseFailed = (function () {
      function ParseFailed(value0) {
          this.value0 = value0;
      };
      ParseFailed.create = function (value0) {
          return new ParseFailed(value0);
      };
      return ParseFailed;
  })();
  var toRecoveredParserResult = function (v) {
      var v1 = function (v2) {
          if (v instanceof Data_Either.Right && Data_Boolean.otherwise) {
              return new ParseSucceeded(v.value0.value0);
          };
          if (v instanceof Data_Either.Left) {
              return new ParseFailed(v.value0);
          };
          throw new Error("Failed pattern match at PureScript.CST (line 41, column 1 - line 44, column 29): " + [ v.constructor.name ]);
      };
      if (v instanceof Data_Either.Right) {
          var $12 = Data_Array_NonEmpty.fromArray(v.value0.value1);
          if ($12 instanceof Data_Maybe.Just) {
              return new ParseSucceededWithErrors(v.value0.value0, $12.value0);
          };
          return v1(true);
      };
      return v1(true);
  };                                           
  var runRecoveredParser = function (p) {
      var $24 = Data_Function.flip(PureScript_CST_Parser_Monad.runParser)(p);
      return function ($25) {
          return toRecoveredParserResult($24(PureScript_CST_Lexer.lex($25)));
      };
  };
  var parseModule = runRecoveredParser(PureScript_CST_Parser.parseModule);
  exports["ParseSucceeded"] = ParseSucceeded;
  exports["parseModule"] = parseModule;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Settings"] = $PS["Settings"] || {};
  var exports = $PS["Settings"];
  var Data_Maybe = $PS["Data.Maybe"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var defaultSettings = {
      indentation: "  ",
      sourceStyle: new Data_Maybe.Just(PureScript_CST_Types.Unicode.value)
  };
  exports["defaultSettings"] = defaultSettings;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Prettier"] = $PS["Prettier"] || {};
  var exports = $PS["Prettier"];
  var $foreign = $PS["Prettier"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var Format = $PS["Format"];
  var PureScript_CST = $PS["PureScript.CST"];
  var Settings = $PS["Settings"];                
  var printPureScript = function (v) {
      return function (v1) {
          return function (options) {
              var optionsToSettings = function (v2) {
                  return Settings.defaultSettings;
              };
              var settings = optionsToSettings(options);
              return function __do() {
                  var v2 = $foreign.nodeFromPath(v)();
                  if (v2.ast_type === "purescript-cst") {
                      if (v2.body instanceof PureScript_CST.ParseSucceeded) {
                          return Format.format(settings)(v2.body.value0);
                      };
                      return v2.source;
                  };
                  return v2.source;
              };
          };
      };
  };
  var printers = {
      "purescript-cst": {
          print: Effect_Uncurried.mkEffectFn3(printPureScript)
      }
  };
  var parse = function (text) {
      return function (parsers1) {
          return function (options) {
              var optionsToSettings = function (v) {
                  return Settings.defaultSettings;
              };
              var settings = optionsToSettings(options);
              var parsed = PureScript_CST.parseModule(text);
              return {
                  ast_type: "purescript-cst",
                  body: parsed,
                  end: Data_String_CodeUnits.length(text),
                  source: text,
                  start: 0
              };
          };
      };
  };
  var parsers = {
      purescript: {
          parse: Data_Function_Uncurried.mkFn3(parse),
          astFormat: "purescript-cst",
          locStart: function (v) {
              return v.start;
          },
          locEnd: function (v) {
              return v.end;
          }
      }
  };
  var languages = [ {
      name: "PureScript",
      parsers: [ "purescript" ],
      since: "1.0.0",
      extensions: [ ".purs" ],
      tmScope: "source.purescript",
      aceMode: "haskell",
      linguistLanguageId: 302,
      vscodeLanguageIds: [ "purescript" ]
  } ];
  exports["languages"] = languages;
  exports["parsers"] = parsers;
  exports["printers"] = printers;
})(PS);
module.exports = PS["Prettier"];
